(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    384122,       7138]
NotebookOptionsPosition[    380023,       7029]
NotebookOutlinePosition[    380376,       7045]
CellTagsIndexPosition[    380333,       7042]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData["NetTrain"], "Input",
 CellChangeTimes->{{3.707501141976551*^9, 
  3.707501143773295*^9}},ExpressionUUID->"0a7ab603-74ce-420a-8cf3-\
0e8d7e047497"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Thread", "[", 
  RowBox[{"\"\<article\>\"", "\[Rule]", " ", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.70750149721566*^9, 
  3.7075015188712463`*^9}},ExpressionUUID->"d420ff1b-170d-4b47-b118-\
1fc033dee3be"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"article\"\>", "\[Rule]", "a"}], ",", 
   RowBox[{"\<\"article\"\>", "\[Rule]", "b"}], ",", 
   RowBox[{"\<\"article\"\>", "\[Rule]", "c"}], ",", 
   RowBox[{"\<\"article\"\>", "\[Rule]", "d"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.7075015200672903`*^9},ExpressionUUID->"ff92d99e-d051-487e-a5cc-\
0379cff1ef5e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Thread", "/@", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"\"\<article\>\"", "\[Rule]", " ", 
     RowBox[{"{", 
      RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}]}], ",", 
    RowBox[{"\"\<article2\>\"", "\[Rule]", " ", 
     RowBox[{"{", 
      RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}]}]}], 
   "}"}]}]], "Input",
 CellChangeTimes->{{3.707501526288239*^9, 3.7075015350361443`*^9}, {
  3.707501578529557*^9, 3.707501606732769*^9}, {3.707501717356221*^9, 
  3.707501720411789*^9}},ExpressionUUID->"b144de3d-4e62-44bf-bcb4-\
ff91db9e3138"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\<\"article\"\>", "\[Rule]", "a"}], ",", 
     RowBox[{"\<\"article\"\>", "\[Rule]", "b"}], ",", 
     RowBox[{"\<\"article\"\>", "\[Rule]", "c"}], ",", 
     RowBox[{"\<\"article\"\>", "\[Rule]", "d"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\<\"article2\"\>", "\[Rule]", "a"}], ",", 
     RowBox[{"\<\"article2\"\>", "\[Rule]", "b"}], ",", 
     RowBox[{"\<\"article2\"\>", "\[Rule]", "c"}], ",", 
     RowBox[{"\<\"article2\"\>", "\[Rule]", "d"}]}], "}"}]}], "}"}]], "Output",\

 CellChangeTimes->{{3.707501528255743*^9, 3.70750153525744*^9}, {
   3.707501580574341*^9, 3.707501607517926*^9}, 
   3.707501720675971*^9},ExpressionUUID->"d3b52a49-f7ab-47a2-b309-\
1c8d70620491"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Function", " ", "\[Rule]", " "}]], "Input",
 CellChangeTimes->{{3.707502010472131*^9, 
  3.7075020177039957`*^9}},ExpressionUUID->"c3ebc529-7798-46fb-8a51-\
b9ee12011e67"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot3D", "[", 
  RowBox[{
   RowBox[{"Exp", "[", 
    RowBox[{
     RowBox[{"-", "\[Alpha]"}], "  ", "x"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Alpha]", ",", "1", ",", "5"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.707502196792616*^9, 
  3.707502216280403*^9}},ExpressionUUID->"1c526708-94f5-49a5-82ca-\
40da6a6454e1"],

Cell[BoxData[
 Graphics3DBox[GraphicsComplex3DBox[CompressedData["
1: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
9j45huV7PEfEKEVUSvSbE15tjra9WcFseDD5wBAP1n9Oe6XrP7Q+M0lMfN8R
liw/dfPD+9SaCon+VHaNfVVJRRkT0nPa7dC9rOdS3d7Ciq3lzMVutQW/7Vke
38vU5xu/XKKfFfx+Nbbjuz/jhCXip33+j/+IAVNjdxaWMnlliR3Cp7H8Wp2i
6/G5pRL9b5BS2qhQsxKJ+dR35ysbK840Sa4XDXkW63+3kXkQ/lNOuInlyWbe
HT42NDD6aaNt+Sqsf+h/e2V1NWe4v/9f+01p/Yu0fllaPyWtv5bWT0nrr6X1
U9L6cWn9nbT+XZofae+LtPdC2nv0/9dzlPZ+SXsfpfXj0sYz0vpfaf2+tPGP
tP5a2jhB2nhJWv8ubVwhrR+U1h9J60+l9YPSxhXSxgnSxhvS+kFp/bW0/lfa
uEXa+OS/xltpcfu/9tfS+mVp/bi0cdR/jfPS+ov/Oh6Q1u9LGydIG+/91/5F
Wj/1X8cb0sYV0sYh0sal/7Vfk9Y//tfxjLR5k7RxjrTxrbRxtbRxrLR+Wdp8
Tdq8Jtpl6yQZzkeJ32c9SL6F7n+B0+VXTn+2nMP5LVEeOF3+7rSvg//ma+jy
M8K/GXA47aVyuI5t9+w1zwzimI/HG7Q4nC5YPmXiqBW3eyQgx31hE6K29D+8
lrlQ0azACWf3CQ7p+e3FpXlbmN/UPkEzsk8QyuM+tR9PPy5MDcDywMeS9e22
GrI/Wtaw+woPvRt2U2NrAHIoX7m1+6lx2o7MloHy31tatLE8vyTnRd80D+RQ
3k0hbWqNxTCmgFH80rJGF8sXrnO4JCPvhBzK5157XDNGuQ+j+S9v3APLLxQm
nUkdOxo5lG+v11J6/qkaYzJUoaaF0cfyWsM8qvautUAO5Xu6ddLfl8phHv37
u+w+x50XqvMXHOuDHMoLK2t2iQdU8ZaObfe55Qq7/zHLvTBz5ipNBjiUt3I7
7as84yUP2ic97oJ2SHNobzSH9ga87NiKm2u8d2G7An6gOtvs/KC12H6A53ha
pdwt9sH2ADzRJq7dpGdTsD0AjyT78uC5A5/TcYWg1x1DfL7AryYOGbF1sgo+
R+A313aw9X3dyIPnBfz+B93XR7a+58Fzwf16Zxsblg+7xwP/wLt+yn4anHkW
/QM/xJdPf2e3Fz3T40/wTHPwDDwifsGCnVMPomfg2nWxd15aRaJn4G7zM2N0
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
e9Yb87S8MRfdHYWNEn7o9dLgR7lqimamoEEij/pOWPHQ0LGesTf6mJ2eugO9
wbrBoy/Szt00CkdvZ6zWbRYa1jGZG78P3e4lQG/OJI9UQOW7bEg9k/vkGXsv
sUBvhqSeZrcsio73HYDeOpF6mn7q5y5cqYvevpP14RVG6gUZyp3QWxGp/9Hs
u2Fc/584n71O6u8V+vXtux/lOJ89Tupf7t7LwKzzC8wP/Dg9PVhoKJnvklhP
Tt5TWD/GSbVPzB0Shz73/dxULhD/+HNfbol3csPQJ6y3XOE58W1q/wXo0z9J
//Df9WX7ro3s2tGGzR+qkHxRLpXXaiT1dOi81T9kqhr6LCb17FtQFPdaXQ59
5v2r7y+mW7T7wf0ja3CedYbUf/W0nnfSaotwPrub1H/LjqPNgf1uo881pP7L
3MK9uZXp6NOb1N9t6APF65qJ6NO904/bAjFHon95SK23h/ZpO+dWsqEjh199
6PvV8sG70TP8ft31wNOA4fM2oGdXrz5ymYIWpjhPduFbsS96hnV6a3M0329L
mIye+3fIyTZ0/M3Mtz+/bq4Vmz8sIfmiYiqv5UbqX7SkKXLtjmocl+aT+htt
1MnV1XiN86xRpP6/nQ+uSsu6iZ5FpP5F1Tss9EvT0LMzqf+EUa+1B8bEomdr
Un9tmc7DY7JD0HNvUv9g9TNf562bjZ6zcvOchYaSea1D6juHOApl+WHteh+L
vhyFPuF3+YtrVFZuuByMPrd4z+3C4cjy34iuO3SNmIE+W8j6yZDn+R0mFw5D
n0EXjT+LBDJ8Bxv/NfMvaaFPW5IvMr3bNq91gdSTb7wptZ1FPvo0IvspwvPf
TFg+SoQ+D5L6T1+ooLfTLxF9diX13/Y4iy+oDEOfkaT++gZmRYWbPdDnL1J/
+fX5FwzUR6LPRaT+e8YmPCkYzOYJtZfteicSSOa1OHnzcgRieX7lz5ZuCRe3
ok/Y91FwYffraaN80GdZN9NEQ0d5fsSEwZvO7rVFn7PI+mSfV/lN83XZPGGB
4NdysUiO76uZKLpY9BPHP4fg3Coqr6VJ6hkjLNsYeOkE+txC1g97pn8uUNfZ
gT5/326t//PncvK1zovRZxCpv4nCDlc1mcnos4TU35HjlpzRNAh9upH68851
9r4S2w59PiD1396n9+UCdzZPGDzAO0AsaicRB8rJemZR2LHlxooH0PPsVWbj
hIbt+Ha9DSNMG9aiZ9gvM8dhn9a5b67o2f7h736OQkX+Upcsv3AdM/R8iaz3
9o82F8+OV0LPJr3vyXM4inyx59oidXc2f8gh+SKVqrZ5raWk/pzanXn2SZvR
cxmpv22v2viZLr7o2Z3U/9Dg6drONXbouYDUv+PlnsG/Y/XRsy2p//LFN+MX
nWjA+ekFUv+XPwMiX44pwDzAIFL/j8GWoccLUtDzk9cWP1ta2kt4HkPWh0dm
dSyonh7Pzk9NZV6IBO35OZwpm5/PXY6eYZ/RDg+TJXJPxqHn5HUPzgnESn/m
R+dy3B/3RM86ZP38r1Svd9VpNTj+jHqWsMPQUYlv05Qx2XgYmz+cTfJFxVRe
q5DU/4VievdLhQvQsz2p/8dm5cROrrboOYvU/8ed36cXF+iiZxNS/4o7kV9K
TGpw3nSI1F9pbkbVfKUb6FmT1P++wIT/bFU8et5M6t+nVtbMLY7NH5r9W78h
mddKIevtL316eWpAjxh23vTpoZdY1JHv1sGmPm9LAHqGdThnFN84yJVw0bOs
1d6RQsOO/HO3auKsZDuh5+VkP8LSpYd73lr0Ej1XbPHRcxR24Ae/87N9LUyl
8gCd+Pw5bfNapqT+R62dwhRH2qPnZFJ/r+zIHfPX9ETP2qT+at8mz1qcUoPz
pig43+CJzPxbj66iZw6pf/fVt0evrYtBz0tJ/YObS5IiVdj8YSmp/17/HHtO
xiD0HPNvnYZkXkuOrP8Z3WvlyOsOm9BzyL91I535a++deqov64WeYX3R+v2F
igs12fxh6zqWznzN+yHjI0404nzqKdnfsWV1g9foiWz+sHVdTSd+9/rgUZkb
tlDz0y78gz3a5rW2kfpPvqy3c3OxIXqWJfX3Os+pfejXiPOpYFL/rtttJt/1
uYWeK0j91VdozE5eJUTPs0n97efm/B56wR09F5L6j0/e9cttGZs/tCP1/3bO
ebniUDZ/GLy6oEAkkMxrwTqlQTtftxi+DGfzLamWjNBQhW+/+3D0FAc39Azr
oFS2x+1qnMbmD3P+rUtR5v8QbnRfkfMJPcM6q2yNxSH9ZrL5w9Z1Msr8y67v
ftgNXCSR1+IMapvXgvp/NHPT7XFUDj1D/UvUzI7w6wvRcwWpv1pR9AWblXu5
beetyvxrHyZejx08j81rkfrf+tpztZ9Tf/Q8mNTffpDR2RcpVZgHOEzq/6Q5
+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
xwmLJLgnuQ7NUwvuZzoKayX4bHL+P51XSSB/l84PBJPrAy+8tz/XnZPImLf5
vh67bmGdFP6+zff1lPlbyHcD6yn+PaSVO5L6RFPrTwKIB5pPJPUEPsr86Itc
9R3MGeIB+PLc65+W1YRj3ngOtS5lGZwrQrgHWacH40Dgm0bONlk6Jh2/90e3
H+B0ewBOP3fg9HNp+70P9rnA92Xovwvnu9IcytP1gfI0h/J0PaE8zaE83d6g
PM2hPL3eBsrTHMrT+X8oT3MoT49noDzN8XudVP4Wv9dJ+Jb+9k+fRx3A8vTz
gvLYj1y95azZbzeWl/Yc6fcFON3O215H8vt3dHvmk/eFbg/A6ee4SIo3L1Ke
9iNPvhdDezCSwvXIdWgPNoTTz3EFmYfSHh6vbo3n9P1CHKM5/F2ah5D4T7fP
IMLp+viQOEPzOaR/oX1CnKGvD5xu58Dp63M4ViX/63euMdLaOakP/bymEj80
z7nxv/sF8Ew/r7bfcVaW4PTzapt/Ztttp6z/Pe8olfKebiTPha7/NPJcaP6S
9MvS4qq0eAX3+8xpRtySYCH1fVhlfk/Sf7X9brXk96HAg/usbQnVezdgedpP
27+ryhc7ZfinbA1nv7NJ2q3J2nvJu8atYDyJB+BJ/sMXn7q7G/tr4Odub+/8
6sl6ZilpD/T9KtY9vi00/In8/vdLU75b7cI8D11+HLkO3T5DSbuSbLcvSv5X
O+m6pvU6tAdZKe0Bv1dLPV84lx7qab1of6rfFiEjjH2k1cexEfnVyIixOSpJ
TDtyv/R7CteRth4G4ufp1fds5uvsx/whlPdO2+I2xSIB6wn+T/oneXcd9mf8
Q+Z3dByWWf2/26emlHYF7Z/25kU4/Z6O23TH+d3FaglvmRllvgOYrxJ/t++L
FNtyD8l6Js0V9ns67LvE883MnzlZu6FOor+uJ+eT0/U/LHf5yNdSyfoHkvPt
6edumThieNDVEom4ff3mLb0uR6ok7lczdrpBpUqjRLtVD/CuGLWhReL5Srvf
38vLPH/VykqsK5N2HWl/V5ofaff7X5+XNA//1b80z4/OtjgKk9l1g1aHH8kZ
n1jIHFrQEvt33Tb4KbC/yehOncZo3ZGxFRqy6+Iil5ddf+TEZ1LIOJz2tkS3
5bWoSg3fo8flUyzHR/CZslUy2wzvaCD3DBGkhbTvw8x6I8cTJmsjX1o4V3NR
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
RhnxfuRwnT6hR9L8jIRYH/C2nnw/7v8BRxjlDw==
   "], {{
     {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
       GrayLevel[1], 3], 
      StyleBox[GraphicsGroup3DBox[
        TagBox[{Polygon3DBox[CompressedData["
1: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
WjvpLNIlVwTnuh7wimAt0JW2JbE2lKbcmjg3dqd/L/i59HzrEue9bvTLg3Pp
vfDi4JzZBV4arB0ehj8IztWd4SVwLO5TUmJN8RDjaxmfCj8IrwnOtz3h94Nz
aV/4Q/gx5QT4rWANcje8KDinDYQ/DdYLfeD18Fb9DRyjtUkn+G3GnoF7wSuD
NcU98DvBeqQ3vC44b3eE3wzWnjo71wbnwDvgN4Jz3aXwtODcdRY8odhTg4vf
+Hn0XCm2K6+eCY/nmp3aM3AWHUNK6WsXtdFmnU19P9ccAv+Veg357+QqxoJy
Hn2lIse2YnxccK6+HX5d+1m5C54XrFOlLWcFayLtW+33XjqbmpPofH4JPLXY
D8NpudaKa3L+/3C+fO9Cx+5DX8L4Y/Cfyll8bs3fHkjfQbEfngh3VbzXfgnW
MsqD87WX+Ju1cOPMMe8A+BrGh0bvbeXH8bSqcAvlmsz1ilj58GO4eurcvhCu
kDo3fghXS60FZsJ/c88f4PXwEak12hr48NR7MBb7WbFIZ+n3zDFPsVU58+Ji
DqSTlUs/4toj6XfT9oJlPkgXrIYPTa0FlsIVU8+F5qRKca4rFvtB+voTxmuk
1jgb4Fqp68XPFcsV86S5E2sD1cGbFEtT18ob4dqpNftnyi/0Bwev4yHB/oHO
sOo86YhZjP8bXAe/Be+T2ifoAL/M+ILU+1D78Qt4PlyOfnvmvPEc/VH83y64
ZvB+eAU+LPMeubiIG6q536bfl75OcLw6lr5d8BwvLLH+egH+J1izvAaXSa2V
XoVLNQep8+n+qetQ1bwyd8pFn4uy0RpnHpxrDjPnwOmZ9dcCeK/U3sYA+OPg
+kxxQPFAmvFNuHxqDfUGvCf9ytS/K1McCs4750RrpXfhA1JrQ61L5dSa5WD4
9uDzoHOhOk8aRx7UvcH65SD41uLMzinOi7RJZcZvDNYmVeCbg2Ow5lP12UuM
D2H88+CaaRC8IVgHHQh3gIcUcUZ7S3qqGuP3BOsvxQ3Fj87RueBUvrdukaeU
r6Sh5CFcrvxe5DXlN/32CrS7orVSea65jc8ti5yl3CXNUp3xzvBD0d/bkvs3
CdYk0innFjlE51aabhl9pdQ+2Tj422BfbRi8Kfic6LwcRH9koQGkBebljmV3
Zo7/yhGrGV8eHdMU29rDVRnrFK3rV+g+qXX9Krhqas2+Umckta5/Hz5YezA4
LnWIzkHyKDYzdnSwppK2WhYcw0O0RzVVMSNYJ0kvnRqskxQ7WgTXH9O45o/g
/ad9mEZ7IPJVtgd7Wk/A2zQP0VpFmqVmcdZqBXtmk+Cfg/WZdFoD+uHRGkZa
eqzmBl7A+MBojSEt/Uv0XOk3yc94AF6l/R999uVProv2c+RhbsztPcmb2j/z
b1T9UpL5mfXs0rg6m6pBtN91PlRnh8zekWr8ldGehvzD1dFeh/y6THVm4rp+
ahFbFGNWSG8l9kjTzH6X/IRlufO0vBp5NkMZ38jzr432RuTBvpn798ur+SJa
G2iPHJs5Dqv2mZ17j8ivUW5SzpJ2ezM6P6qG/Spah8i7+Dpat8jfeC96blV3
L4vWA6qXvyzmVt+1NVpvyE/4Jlo/yKP4KfrMylv4Du6X2E9YGq0fVPNWV12d
uA7NM8co+Z9LM+8BebOLo3O66utthQ6U1zSH8csS18vTovOs6vep0b6f9tKs
6JyuGnx2tFZRXf9ztJaW17EAvjlxzR4ze5LybTRfms+Fij/RZ1M+8M5oX06e
TGXV/4nr0HKZfUvVX4dkzjXyTg/MnItVp+/ib8ck9kZ2R/uK8iL+jvYJ5f/8
Hu0HyheqmjmnyFM9lLYosTdbJXMeUa1dnlaNZ1yc2VvVfO6huJs596n2n1Hk
COWKfWlzE/u3+2T2MOXfVsqc++TxVsicd5R/9s7sZ6pGrpj5XKvW3hHtYcof
+zU6buis/RbtYcormx7tVcpnfinag9U7CPn62vOzpZOj6yb55M/krm3kw8+I
9mblV8+N1lR6ZzEz2uOVt/9ysdZ6x/FutDeodxY/RutheVPSdtIG8v+XRHuA
et/xWrR3qvcIf0X7t/LltkfHCr3veDXaz9Q7i3nRnpLej8yP9hj1HqFsZu9a
3trr0X6j3kFMy63/9P7inWivUu87vo3W8/Lu9susPeRX/MK1n8I16WsX+lAe
/mNcf0piL6JrdN5UPd4zOseplu8RnYtVm+9VxCut3b/R+UXvDqQhpaMbE6/+
jI7Jel9TI7MGkM/TOzqvyU84JrNW1LuDR6NrNHkg3aLztbyCjdH1kTw66RbV
YdLKY6PrUPkka3PncnnL90fnbnkLG+D74LsUFxVHE/tj3aM1g3yJKdE1hbwy
+dMT4Z+C45fimDS49K10peoHxVXVOk1Krc+kZ+RNbYvWEvIwG2bOiXq30iBz
TtT7l/7R9aY8lkaZNa3e0cjzfg+uIj0VXc/Kk5kQXXfLLzo8sx6Tp/R4dG0u
D/aIzLpOfs4XufVl++I8qu5pWupaQPpa3umW6LpMfulT0XWNfN0u0TWCfKTj
MmsJedT9omte+Tx1M+s0eWUnZH5m+YfVMutMeXr1M+d9vZepl1knyPeeHF2X
yddNMp9l5btPoutZ+bS1Mtca8gBrZtaZ8gw/iq5t5esOi/YZ5Gttiq6v5Z3u
kXnt5E+uj66X5ffumTm/y5PUewbF0r9Y36Mya1R5jKWZ9ZL8zM3RdbE82E9y
v1/Ru4lV0bWtPOE10XWx/N4Pomtb+cnvF/lRcf2f6Hyq93HjC+0hr2UQXCex
d1c+sz6RD/k/FCmm9A==
           "]], Polygon3DBox[CompressedData["
1:eJwtmnfgl9Mex7+/5zzn+bVxKa6UsqLMpi63SUbRsLkoIbMhEjIapDJbKLQJ
0aRURiJbQ9LQsHKtq0h0rft+3ff54+l33udznuf7jHM+n/f7fap7Sa8uPbNS
qXS2/sn1d3lRKn2t9ji1/6uO4bFUmqL2j+pbrdhzOharfa363lB8h44has8I
pdJ7iv2g8YPLSqXpOqapfa+OZxTfpXM+VvwPjb9P+HmNXyX8ro7PFBupvp8U
u1Lje6v9svpmKXa38GPC3wqvFH5IeJVwXZ3/hfAHOr5UbIz6dur8yxS/Ru2F
6utSXioNE54svF34Q429XvhW4XeFFwlX03GY2r+o703FXhNenfmZtup6N6vv
zpL7iN0UHftQeInwKOElwrvrfjYX7iM2WH1f6vy+ig9Q+x31LVTsVuERwuuE
3xC+R3ia8A7hNcLnCbcVHiU8QfgW4buEPxJeKvyOjk/VfpBvousPUHyo2mvU
93rhMYzlnr9SfITiU3m36vtIsRuFBwmvFH5FeKjwo8LfCK8Qvjz62y4Sflb4
fR1fqD1afT/remMUX6r23/S8nyp2n/AM5orGrBU+X/hk4UeEJwlXSt/vdY1f
V3iOfK7YqJLnTi/Fb1R7mfrmK9ZP+Hbh94Vf4llzz4eHdP7Lwjcofpvwe4ov
Fu4h3LPkOcncvEr4OuElwnOErxDuJfyS8Ezhq4X7Cr8mPFf4GuHrhZcKzxO+
QPgU4XHCkwu/E97NePX9lnsOMhd5Z78LdxG+X+3N6ttD8+02nX+P8HrhZYq9
qWND5r7vNf4pPccW4QeYk8JvKf6J8L3C/8l9j9wrz/Sm8Isav014onBJ1+4f
PbdWqe/Vwr/BbzGnvtP4R5lTwv/gnQmP1fiVatfRdT5X7CDhRcKfCX9WeA4y
F4ezxjT+WsVv4Hup73nFegr3Y60Lv1B4jjHXmJP/1vgQPTcWB8+vcTqGK36s
+sYo/i/hp9P6r6n3c2y6nwqKtRaervhTip2rvlnqu445ovZ+ul5jxfuQI4Rr
CjcSvkF4ufD+ws2EK6b5uzR4/vVmjQj/XfgYxa/hHQlXFz5C+HpyhnBt4abC
fZnjwrWEmwhfqb8TdT+d1Ddd9zNV8UeFTxWeKnyJ8Hy1C407QOO7Cy8QLhc+
UHia8CSN76y+pzS+LDq3LQzOP1freDXliwYav2f09T4QbiV8qeIv8n6EDyr3
HGQusqYm63rdhGcxFxSvo3ih86cLviLcUvgixZ8V/kPn1BKuED13XwvOv3l0
rnwpON+cq2OC8A8av7fGnyn8CN9WeE/hMwrPVebs34Sz6LW7KLgeXMscF64h
fKTi5wg/zlzW+BrC23KvjycVryrcS/G3hfcRPlq4q/BM4b80fn/hnsJvCe+t
+FHCTwpPV+wc9c3Utc4rvBZYE/sofjE1SfhP4drlfsfk+kklv/uzCtcyatpe
io8XHqF2c/WN1fUuYP6p/av69lX8KuFXhHfT79cXfkDXmCucCW9gLufOz1cL
P8G7oSbo3Hrqu0uxB4VvFj5UeChY58/jc2n8J+QK4Tncm/D6wjmVXP1scK4d
Sc7X+Yep7+7cNY219lxwrbuPHKj4QeobzPqKnpvj1TdFscd03Kv2cep7WPFH
hIcJNxMeLby32o+oNp/ON1D7fF33Qf1tRc5T/EJdr33Jc565P5qaKLwHeYtv
yz0q1prfzF2jqFVtOIf6K7xQ7Yoaf7De3yjhAYrXV98w8pHwYOGGwvcLd9f1
r1R7gfpmKHaJ8BXC84Wf4dvwztU+T32zNb6H8GK1q+j69XT9K8iXwlWFDy33
OZzbgzkOnxB+We1qih+m+PmF18svGvN34YeEh6jdSH0P5L4H7oV7eFn4cL6l
3tcu4SOog9Rw/W0gPJx6KHyb8OHCI3LXPGrfScKTcn8Tvg01ZQrvP9XLD3U/
mwrXWGotnGWp4iNTfub9bVTsEMUOKTM/qZdyPrmfGv6FxleOXu9vaHx1Pc8P
uevnE8Jva+xpGnufzq/ON1f7RPV1V3yu2uUafwLvXHiOcCE8U9eLGlsx5eed
5Hrh31KOgSxWEN5KPRSOOoYJ/5Fy2HG63hnkSo37Te0mhd8F72SH2o11tGNu
Cv9ETMdlws8LV9TvnUgt0vX+Ul878p7il6v9gtqVFG9aeO4+LrxT7UY6TqTW
Cf+o9imFvz1zoLLGz2VOU0/Ih/yenu9A4b7keMVnRN97C+EDFf+ncHXhC4Q7
Kt4p87ubpaMzdVvHbLXH6DhPz7tXwnN4x9Td9L6G6jguc72lHn2a1gO/w+/N
ULwl6yhzm3fYJnONJ78tCM63f+XOz/OD+UXDzPx6iI5G5DEdT5f5N/ltrsG1
eIdt1R6iZ7ow8zP107X666igdhNd7y5ylXAl4WbCdxd+57z753T+SczbzO17
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
g2vNadH+D3ue+DenR/sx7BniN/wPwp/TYw==
           "]], 
          Polygon3DBox[CompressedData["
1:eJwt13f8VvMeAPDH7/k9zy8l4gpNN6mk5NIgszQIV5KVtId2XU3NSyWalKaG
25DSHoSK20QJ7bjKalCpl1HX9v68Tn98Xud83ufzPec855zveEq17Hpfl5xU
KrVGZMQ/sqlUu3QqNQPWl8/NTaVuYv3ZctaKvcFuZP3YMtaSrWI3sCfYTDZL
/CK/XvRmi+TN1K1U18GFhrNsXiq1Tf6h6MNeZOvV9VB3kN2i7UC2krVhb7Gr
1O2yf5TnyZ9QU030lC9Q18Sx5fxWNoi9xtqy1ew61ostZE3ZCtbO+Z5maffy
rvw9UV1dH7ZYXXN1r7G27EuWXxQQZdXfq+1d9rurK61ujLqObETcm+MfyT8W
j7GhLIdtkm8WDZxvJftM2/2iUF7y/PqypfIlYr7879pucu7P4nnFc2I3iwHy
FWpaO/Ym76RuJMvnPNvlO0R7NozlsvflW8T38XvPSqVOaZuRL4x7E4vU7WbD
nO80782msHWsO/uanYrfK79TjHSO0/L67mWJusNsMDvBBonZbCsbqO132lZV
143NZQ+yRawK68peZg+whWygtrPYFjaAHWdl1FVhLeJ9iKHyu8V/2F75Fa67
Wbt/iznsAzZI2xPalld3D+vFeosj8oqiCRsqf1ocjfOpHe88heTniSdzkutW
Vtc0vl1xUP64a4xlj8Uzj/diO4DNZO+r6c+OsZ/ZZOe7mF0kcrQtK2qkk98Q
v+WQ/Gl1y9gn8Uy1/VXbu/hE9jZ7R5zj/WVZwdjPSb65BuwZbVfY/x8bre3v
2lZW14XNYfezBexZdW+yL9k4liO/Vl1nNps1ZK+qG8IXsl3xXNgpNowtZ5+y
Uew3do22ndJJH4++/nI2sY7sBfl4cVI+WNsFbGe8M21/0vYp9irbwYawH1l/
NoNtZn3YN6wHe4GtZl3YgejrbCrbwHqyQ6wvm8Y2sl7sMNvISssvy0neVV3P
qg4r6XhX9hubIn9SzLe/Pb5dx37Qth+bzjbF98KOsJ5sPFvDurLPWTm/7zbW
h5VlQ1kvdRPYWtaNfcFaq/ucXSzeZZdlkjEhxoa62aTPrrBtJQ7Yvyieg7pS
mWRcjPGxTjYZU5bbthFf2L9EvKeutLpe7LS8kjjArmM92Sn5VWI/q8Y+cK6t
onY2GX+X2T4kNtn/3T0vVFdA3c0iG+ODcDjVK96HnZ/UVYwxi1VV0539KK8Q
3yCrwhqxd+V/aruYFWQPs83sD7aInZNJxqcYp253bFSM8dnku59k/0N128Ra
eXOxh50bz1Xbotq2YHvl50UfYcViTnCuneIOx0bHuG/bTOy2XzCdzG9F1NUU
18nbOn8B1k+blur2s8LpZKyNMTfmgZgPamWTMXSJ7YNio/3ftP1V7JM/Ij6M
sVm8ru3fMsn4HuP8bdlkblls+4D4r/3/azdPXZ66+9k77DR7hWVZY/ZRzB9i
FbuQ1RDV5K3V5Wd9Y26MPsweZT7vVG92n7avs+/YdPYHaxXfOZvPHmFvs4bq
VrETbAb7M+Y3dUPYWU62IfqQGMu2s1/ULVB3sfx5sZX9yOawC+SjxXp2lE1j
+eXPiS3sBzabnS/v5LrHWOl0MofHXD5O7IvrxvfISshHiXXyb7Wdys6OsUB8
EnNo9ANWMpPMoa/Jj6s7JrbHmCaOs8tjPlNXSV0tUV3eQU1BNsBvu1fdUnaE
TWY/x1qAHWTFY+5iZbXryk7EfB9zTayP2OPsB/mVMS6yyuxf7Ht5+RjL2bXs
VlFV3tI1zmZPxFpA3desWMxxrIya9uyQvETMXawc68K+k5cRe9jVmWQN8pW8
qCgS47l8DH/f/vex5lJXSN6BH2YlxTZ2BevIjsgvjf7FyrN/spfTSV+LPlfQ
u2/KdrFzYuxVd4m6Pe57t6gX14vv3LYhv89+X+3Kqxvv+P2sIevHrmQTWAW1
DdgzrBobxyaq+5ZdINazivIHoj/I+6urwCbmJvN003Qyn8S88lL0wahlA+QV
1U1S93D0GzaYVWZT2ZVq72XDWFU2ljVS9ygbwqqwabGejHGCTWC12XRWKcYd
NpHVYTPYQ9o+yAayq9jkM2uL+ulkDRFriUln5via6WStEWuOMfKrRQs2SV5X
25e07RZ9JPo4a88+Yd2jP7C3WGe2n3XOJOPj2XnJ+BbjXDfnO8nKiX3qronv
NJO8mwLq9qrZJ7pkkrEwf17y/uI9TmDfsPPFOm0rxNwmPpWnYy5il8ZaUqyR
H3QvE+K/QazZxVvsq3gfLB1rXbGafR3zPsuNZ+z+Pmb5xBusMDuZSdaHsU7M
dR/z5PWij6hpEmskdUN4Y9aKjWA3sFlsMctnW4pvZ0viGqK1fKS6G9lsx5tF
P2RTWL2oY01YGzaK3cTmsObRh9mLsZZlS9k97vmVmD/jnbGTMTepyx99V1zI
norzqduZTv4DxH+B/fGNRp+zP05dLXXzY+xn17N2sWZj/WOeiTUqm8casbUx
F7MbWCd2LhsY/w3Y3awHu5w9l5v01bnp5L9C/Gd4T76erxM1ssnYvTDWsdrW
sd9eTTFtn3X8zhgDWRtWhA2LeZLdwhqzwmxwbjK/bUgnY2mMqYXzknkg5oOa
2eQ/zKL45rW9I52spWJNNTLuj9VlHVlxNvzMs9qRTubKmDOLO1+LWDewqbGO
VbdM3SOsJRvOqrOZsQZmtdljrCh7Jua3GLNYz1ibs+fjvbHbWWdWgo1gfwE7
cOdD
           "]], Polygon3DBox[{{1381, 899, 1126, 1663, 1218, 1219}}]},
         Annotation[#, "Charting`Private`Tag$15500#1"]& ]],
       Lighting->{{"Ambient", 
          RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
         "Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{0, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 0, 2}]}}]}, {}, 
     {GrayLevel[1], EdgeForm[None], 
      StyleBox[GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1: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
          "]], 
         Polygon3DBox[CompressedData["
1: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
PPONaa0S432//x8qlt3C
          "]], Polygon3DBox[CompressedData["
1:eJwl0D9IlHEcx/Hf6empOShCiEpqJLhpW1iuwt0gamChLqaLoLn4B66Eswhc
XRsDB3GSCME/wy0qKNQFoZODgQ6WkHIOIuTr4YF73/P9vJ/P7w9P65vpgbcl
IYRGlOFJeQiXiRAmkiF0Y0F+4cXT0hBeKVJh1l+GX+b2uTb9Hzp9/GfzFXYx
FpVTIUx5HsrXYl7vF7q4h7jj1uRxfLDfS25F97/c7owMl3NGE7fF9aCbe83V
Wbuo/5XrMKf5BjlrXYG74erkFvyUi/yIedteB5iXv/Gr5kG+Fe+4He4R1x/d
H1/k5+i0/y38wkwyPju6w6jnJHLWViBv7QaGuY9yNYryTSI+Kzqzltszj+sk
kvFdrvkl7hxneMD94U7MR8g660Lu9U2HrHksb/L1ev/4T+bfOEUV1xV9F5et
101x62XxfnPmorXHns167/FMJ52M94j2+osacwHfUalzD+JnRWk=
          "]], 
         Polygon3DBox[{{1662, 1122, 1134, 443, 436, 1540}, {1544, 1119, 601, 
          5, 438, 1561}}]}],
       Lighting->{{"Ambient", 
          GrayLevel[0.8]}}]}, {}, {}}, {
     {GrayLevel[0], Line3DBox[CompressedData["
1:eJwt0jlPVFEYh/HDDEMtYgGJyUhC7TfgG1CRGMWJGiHECAIhVNhoaWO0o7K1
tMMFXAIMKJsLsiuMOgoDCCqoOG74O4biuf/nfc+Se8+51Y0d9e0lIYQbuEii
n/D4ILtKQzggG9SXeJpn+FV+lJ/itXIpFcIZXseX+Vme4TnexAfMb1E389e8
m5/j6/wKP89/8B6+Yk2r+iZf5W28lxd4B8/yWzzJr+OlulMmcA2n7VOfCGEs
fohckrNYxBZqykJ4JDfxEX+wh7+Yie+EDayhgJ/4jV+YRoX1K3I1nhHeYxfF
+A3xfXDQnHcyj7d4g6/4jm+oNj4ln8fzwAJyOKL/TL7AU7zCHJaRNjYvRzGJ
hzik90ROoC3elfoBf4xyPi7vYwTb2EHSmRw2lpAl+Kz3BZ9Qqu6X7fbKykrz
+uQw7uGy+oKxIX4n3iuq9G7LVv1BeRcn7ZOK/43UDsdlUh5L/L+SUFTk9/+3
f73YYtY=
       "]], Line3DBox[CompressedData["
1:eJwt0slOFEEAgOFCWUZQRhBHQfZ1BhhwARHEFRcWlcWbMZgQY9QQQL1oPHny
woULifHMCxDjVRPegCAgKOKJ+ARc+Srx8Oerru7qTrqqbmp2YiYnhPBVjw+F
kM+8qGZzQyhg0mSCR1SoOfMV5oqMj+qYzrgu5iv3kjyuEpXqhMp0Uqc8l4rq
tMpVEderyr3KqD4Yv/auauMaVbuuZZ3q1RC/a66RTWpWi9LKqNi9VrapXVl1
KGW+k2d1Tud1QV3qju92/yJ7dEm96tNl9etK/LZnrvKaruuGbmpAt3Rbd3RX
gxrSsEZ0L/4H6+/zgUY1pnE91HebsWYPcll/OIQfxg1cZyM32MRNNvMnW5jW
lnGG22zlL7bxN9u5wyz/sIO7LPSP831rQX9dv2NKvXkhrMZ1XGENv7CUS/GM
cJH71n/kP77lNrf0wvgbH3GZI1xiPz8xy/m4v/zsXXt877tJvmFCM3EfXU/H
vebLeN74nEV8Fs8jn8azySkm+ISTKvh/pg8AbhY5Ng==
       "]]}, 
     {GrayLevel[0.2], 
      Line3DBox[{1164, 1359, 1685, 1163, 1358, 1684, 1162, 1357, 1683, 1161, 
       1356, 1682, 1160, 1355, 1681, 1159, 1354, 1680, 1158, 1767, 1575, 1157,
        1766, 1574, 1679, 1156, 1353, 1678, 1155, 1352, 1677, 1154, 1351, 
       1872, 1562}], 
      Line3DBox[{1177, 1367, 1693, 1176, 1366, 1692, 1175, 1365, 1691, 1174, 
       1364, 1690, 1173, 1363, 1689, 1172, 1770, 1579, 1171, 1769, 1578, 1170,
        1768, 1577, 1688, 1169, 1362, 1687, 1168, 1361, 1686, 1167, 1360, 
       1873, 1542, 1563}], 
      Line3DBox[{1189, 1373, 1700, 1188, 1372, 1699, 1187, 1371, 1698, 1186, 
       1370, 1697, 1185, 1774, 1583, 1184, 1773, 1582, 1183, 1772, 1581, 1182,
        1771, 1580, 1696, 1181, 1369, 1695, 1180, 1368, 1694, 1179, 858, 1178,
        1867, 405, 530}], 
      Line3DBox[{1202, 1377, 1705, 1201, 1376, 1704, 1200, 1375, 1703, 1199, 
       1780, 1589, 1198, 1779, 1588, 1197, 1778, 1587, 1196, 1777, 1586, 1195,
        1776, 1585, 1702, 1194, 1374, 1701, 1193, 873, 1192, 1775, 1584, 1191,
        1103, 1537, 1529, 1538, 1559}], 
      Line3DBox[{1215, 1379, 1708, 1214, 1378, 1707, 1213, 1791, 1599, 1212, 
       1790, 1598, 1211, 1789, 1597, 1210, 1788, 1596, 1209, 1787, 1595, 1208,
        1786, 1594, 1706, 1207, 1785, 1593, 1206, 1784, 1592, 1205, 1783, 
       1591, 1204, 1782, 1590, 1203, 1565}], 
      Line3DBox[{1242, 1392, 1720, 1240, 1803, 1609, 1238, 1802, 1608, 1236, 
       1801, 1607, 1234, 1800, 1606, 1232, 1799, 1605, 1230, 1798, 1604, 1228,
        1797, 904, 1226, 1796, 1603, 1224, 1795, 1602, 1222, 1794, 1601, 1220,
        1793, 1600, 1218, 1663, 1665}], 
      Line3DBox[{1257, 1404, 1732, 1256, 1403, 1731, 1255, 1402, 1730, 1254, 
       1401, 1729, 1253, 1400, 1728, 1252, 1399, 1727, 1251, 921, 1250, 1804, 
       1611, 1726, 1249, 1398, 1725, 1248, 1397, 1724, 1247, 1396, 1723, 1246,
        1395, 1722, 1245, 1394, 1862, 1477, 1549}], 
      Line3DBox[{1271, 1413, 1742, 1270, 1412, 1741, 1269, 1411, 1740, 1268, 
       1410, 1739, 1267, 1409, 1738, 1266, 937, 1265, 1806, 1614, 1264, 1805, 
       1613, 1737, 1263, 1408, 1736, 1262, 1407, 1735, 1261, 1406, 1734, 1260,
        1405, 1733, 1259, 1852, 1612, 1479, 1550}], 
      Line3DBox[{1285, 1420, 1750, 1284, 1419, 1749, 1283, 1418, 1748, 1282, 
       1417, 1747, 1281, 953, 1280, 1810, 1619, 1279, 1809, 1618, 1278, 1808, 
       1617, 1746, 1277, 1416, 1745, 1276, 1415, 1744, 1275, 1414, 1743, 1274,
        1807, 1616, 1273, 1854, 1615, 1519, 1445, 1558}], 
      Line3DBox[{1298, 1425, 1756, 1297, 1424, 1755, 1296, 1423, 1754, 1295, 
       969, 1294, 1816, 1625, 1293, 1815, 1624, 1292, 1814, 1623, 1291, 1813, 
       1622, 1753, 1290, 1422, 1752, 1289, 1421, 1751, 1288, 1812, 1621, 1287,
        1811, 1620, 1286, 1855, 1449, 1520, 1448, 1570}], 
      Line3DBox[{1311, 1429, 1761, 1310, 1428, 1760, 1309, 1427, 1759, 1308, 
       1824, 1633, 1307, 1823, 1632, 1306, 1822, 1631, 1305, 1821, 1630, 1304,
        1820, 1629, 1758, 1303, 1426, 1757, 1302, 1819, 1628, 1301, 1818, 
       1627, 1300, 1817, 1626, 1299, 1856, 1453, 1522, 1452, 1571}], 
      Line3DBox[{1324, 1431, 1764, 1323, 1430, 1763, 1322, 1835, 1643, 1321, 
       1834, 1642, 1320, 1833, 1641, 1319, 1832, 1640, 1318, 1831, 1639, 1317,
        1830, 1638, 1762, 1316, 1829, 1637, 1315, 1828, 1636, 1314, 1827, 
       1635, 1313, 1826, 1634, 1312, 1656, 1825, 1524, 394, 580}], 
      Line3DBox[{1337, 1456, 1455, 1857, 1336, 1848, 1654, 1335, 1847, 1653, 
       1334, 1846, 1652, 1333, 1845, 1651, 1332, 1844, 1650, 1331, 1843, 1649,
        1330, 1842, 1841, 1648, 1329, 1840, 1647, 1328, 1839, 1646, 1327, 
       1838, 1645, 1326, 1837, 1644, 1325, 1657, 1836, 1525, 1527, 1526, 1543,
        1557}], 
      Line3DBox[{1435, 1349, 1434, 1849, 1150, 1348, 1675, 1149, 1347, 1674, 
       1148, 1346, 1673, 1147, 1345, 1672, 1146, 1344, 1671, 1145, 1343, 1670,
        1144, 1765, 1573, 1669, 1143, 1342, 1668, 1142, 1341, 1871, 1541, 
       1551}], Line3DBox[{1566, 1874, 1381, 1219, 1709, 1382, 1221, 1710, 
       1383, 1223, 1711, 1384, 1225, 1712, 1385, 1227, 1713, 905, 1229, 1714, 
       1386, 1231, 1715, 1387, 1233, 1716, 1388, 1235, 1717, 1389, 1237, 1718,
        1390, 1239, 1719, 1391, 1241, 1721, 1393, 1243}]}, 
     {GrayLevel[0.2], 
      Line3DBox[{604, 818, 1668, 605, 831, 1678, 629, 845, 1687, 644, 860, 
       1695, 659, 874, 1701, 673, 1785, 888, 687, 1796, 903, 1712, 702, 918, 
       1725, 717, 933, 1736, 732, 948, 1745, 747, 963, 1752, 762, 978, 1757, 
       777, 1829, 993, 792, 1840, 1007, 806}], 
      Line3DBox[{606, 819, 1669, 608, 832, 1679, 630, 846, 1688, 645, 861, 
       1696, 660, 875, 1702, 674, 889, 1706, 688, 904, 1713, 703, 919, 1726, 
       718, 934, 1737, 733, 949, 1746, 748, 964, 1753, 763, 979, 1758, 778, 
       994, 1762, 793, 1841, 1008, 807}], 
      Line3DBox[{610, 821, 1670, 611, 1767, 834, 632, 1769, 848, 647, 1772, 
       863, 662, 1777, 877, 676, 1787, 891, 690, 1798, 906, 1714, 705, 921, 
       720, 1806, 936, 735, 1809, 951, 750, 1814, 966, 765, 1821, 981, 780, 
       1831, 996, 795, 1843, 1010, 809}], 
      Line3DBox[{612, 822, 1671, 613, 835, 1680, 633, 1770, 849, 648, 1773, 
       864, 663, 1778, 878, 677, 1788, 892, 691, 1799, 907, 1715, 706, 922, 
       1727, 721, 937, 736, 1810, 952, 751, 1815, 967, 766, 1822, 982, 781, 
       1832, 997, 796, 1844, 1011, 810}], 
      Line3DBox[{614, 823, 1672, 615, 836, 1681, 634, 850, 1689, 649, 1774, 
       865, 664, 1779, 879, 678, 1789, 893, 692, 1800, 908, 1716, 707, 923, 
       1728, 722, 938, 1738, 737, 953, 752, 1816, 968, 767, 1823, 983, 782, 
       1833, 998, 797, 1845, 1012, 811}], 
      Line3DBox[{616, 824, 1673, 617, 837, 1682, 635, 851, 1690, 650, 866, 
       1697, 665, 1780, 880, 679, 1790, 894, 693, 1801, 909, 1717, 708, 924, 
       1729, 723, 939, 1739, 738, 954, 1747, 753, 969, 768, 1824, 984, 783, 
       1834, 999, 798, 1846, 1013, 812}], 
      Line3DBox[{618, 825, 1674, 619, 838, 1683, 636, 852, 1691, 651, 867, 
       1698, 666, 881, 1703, 680, 1791, 895, 694, 1802, 910, 1718, 709, 925, 
       1730, 724, 940, 1740, 739, 955, 1748, 754, 970, 1754, 769, 985, 1759, 
       784, 1835, 1000, 799, 1847, 1014, 813}], 
      Line3DBox[{620, 826, 1675, 621, 839, 1684, 637, 853, 1692, 652, 868, 
       1699, 667, 882, 1704, 681, 896, 1707, 695, 1803, 911, 1719, 710, 926, 
       1731, 725, 941, 1741, 740, 956, 1749, 755, 971, 1755, 770, 986, 1760, 
       785, 1001, 1763, 800, 1848, 1015, 814}], 
      Line3DBox[{622, 1019, 1849, 1020, 623, 840, 1685, 638, 854, 1693, 653, 
       869, 1700, 668, 883, 1705, 682, 897, 1708, 696, 912, 1720, 1721, 711, 
       927, 1732, 726, 942, 1742, 741, 957, 1750, 756, 972, 1756, 771, 987, 
       1761, 786, 1002, 1764, 801, 1032, 1857, 1033, 1034}], 
      Line3DBox[{802, 1003, 1031, 1836, 788, 989, 1030, 1825, 773, 974, 1856, 
       1029, 758, 959, 1855, 1028, 743, 944, 1854, 1027, 728, 929, 1852, 1026,
        713, 1862, 914, 1127, 698, 1874, 899, 1126, 1138}], 
      Line3DBox[{803, 1004, 1837, 789, 990, 1826, 774, 975, 1817, 759, 960, 
       1811, 744, 945, 1807, 729, 1733, 930, 714, 1722, 915, 699, 1709, 900, 
       1793, 684, 885, 1782, 670, 871, 1103, 656, 857, 1867, 1100, 641, 
       1137}], Line3DBox[{804, 1005, 1838, 790, 991, 1827, 775, 976, 1818, 
       760, 961, 1812, 745, 1743, 946, 730, 1734, 931, 715, 1723, 916, 700, 
       1710, 901, 1794, 685, 886, 1783, 671, 872, 1775, 657, 858, 642, 1873, 
       843, 627, 1872, 1136}], 
      Line3DBox[{805, 1006, 1839, 791, 992, 1828, 776, 977, 1819, 761, 1751, 
       962, 746, 1744, 947, 731, 1735, 932, 716, 1724, 917, 701, 1711, 902, 
       1795, 686, 887, 1784, 672, 873, 658, 1694, 859, 643, 1686, 844, 628, 
       1677, 830, 603, 1871, 1135}], 
      Line3DBox[{808, 1009, 1842, 794, 995, 1830, 779, 980, 1820, 764, 965, 
       1813, 749, 950, 1808, 734, 935, 1805, 719, 920, 1804, 704, 905, 1797, 
       689, 890, 1786, 675, 876, 1776, 661, 862, 1771, 646, 847, 1768, 631, 
       833, 1766, 609, 820, 1765, 607}]}, {}, {}}},
   VertexNormals->CompressedData["
1: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
cOr+LbNy13OIc/xj6oMEd1SzpkPsz0e73pAcRrcKde7dvX4aLa5xhvLRisxE
dnRBepsEi+Ihol9Bl6p4kuzGLHb8gEopoxvTb+OEdWz+M0tfcuHF2Z1urEXx
4PQ98v2nr/h125RhY2ZiNJDTX4oUZ7sNOzWvdA/h57vPG0Nb6+d2cCeCsvnz
aSvg1m9u6sY/j1xqWqVqojKI/dp8XIpGFfq33yxZeT+MyWTrpXwuvN3prIsm
44MbjXQrdkE6Rv9y2cEZFDurjvpukYLKofCVfvWsxbXi/xTXohBXYzPISUBi
JuOau8yykfpa3MDXVP6A77InCipm/cI7F4qOrI230E9e+yq7DVBcq1A/Q44d
Gl7TbffGgrYmv4Nob9u1BVzSMeJ4w7tnITP0dEj3c4sQRp6fqNtjLVJyox0D
WDphrx1N9qREzqw1ucgVV4xVF6R68lrz9/HDxsNK4dcf5ICCdg/lL/cYeO4w
lUoxgoOkYuGwbU9CQLB2sdLsqieQsTlXu+HXgQpS4WiqOVOIHlJdkjxuCHWq
9bemCfGBpuE7o2OS0GZ3WP5290FglLhZRHj+c/ZXFg8HbAJxy2OB5xNp4dW1
Uyv+6oRzmFtY+0fkdpv8Gu3dPvRh58xKf43NVuNasoV/jGtVlL9oUNnhhdRe
N6aTGQai2jU9P5fFZTFlGqLo1uArfXKXEG5Nt6uPXrz+NiSBhEnkZ/wslYj6
XJj8QrGtaSPy+8je0/p85/o+lzmEgXLbZ2xfqNhCxJP1fUR699LD8s/ZWIw2
mZADay2R3+kv2/TUxgsbXyulu8cv7rc6+9H2KVdXPQbBoUgvRa1QOBX2viue
cI7c0eYZIOsPmSExtX0ZzrBVmsFWFv/88icsvxgn6UIGF0tNg8wJuCa7OYbg
F6mekzgvsYUfmD1nl/3ZeKBv2uTHyjjJu+KqNDyFSBc+n/lSNoMoT6y+//Do
856LigEVqPdSveAG8VoUzbyqD9f51bgWl8sf41rhbxm3vnY+i+iOOasuK1kR
Dm1X+FmuNvXsuUNo7uOP4i0P1vXMW9Zpit1Eg6RCLiTctmIn8uhXIZFf1D5h
O2NoAsU6cUR9LmwI7PftfozNfT6Z25tWtr7PnWYpzvdxxV4wPRS2PSmYyKWb
zsqdLFPCjklVtf2i/338MNPZx2NjURIEvG31Ij17CzT25jN/n8WBvp9VkveU
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

    "]],
  Axes->True,
  AxesLabel->{None, None, None},
  AxesOrigin->{Automatic, Automatic, Automatic},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGrids->None,
  FaceGridsStyle->Automatic,
  ImageSize->{361.9596395924228, 184.05816661750072`},
  ImageSizeRaw->Automatic,
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], "RotationControl" -> "Globe"},
  PlotRange->{{0, 10}, {1, 5}, {0., 0.03440939720975719}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{2.628667060775775, -2.0782447316535664`, 0.4701152187992267},
  ViewVertical->{0., 0., 1.}]], "Output",
 CellChangeTimes->{
  3.70750221672716*^9},ExpressionUUID->"f78a8060-5207-472d-8585-51320b7cf528"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"LinearLayer", "[", "10", "]"}], ",", "Tanh", ",", 
      RowBox[{"LinearLayer", "[", "1", "]"}], ",", "Tanh"}], "}"}], ",", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", " ", "\"\<Real\>\""}], ",", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", " ", 
     RowBox[{"NetDecoder", "[", "\"\<Scalar\>\"", "]"}]}]}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.707502311278824*^9, 3.707502395447391*^9}, {
  3.707502592759735*^9, 3.7075025936617193`*^9}, {3.7075026311494837`*^9, 
  3.70750270744456*^9}, {3.7075028424293547`*^9, 
  3.707502846413722*^9}},ExpressionUUID->"2d2f2250-2984-40dc-9c2e-\
2811865ea22f"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = Association[
        "Type" -> "Chain", "Nodes" -> 
         Association[
          "1" -> Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{10, 1}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 
               1, "$InputDimensions" -> {}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
               "$Dimensions" -> {10}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "3" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{1, 10}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 
               10, "$InputDimensions" -> {10}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]],
            "4" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
               "$Dimensions" -> {1}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"]}, 
         "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
         "Outputs" -> Association["Output" -> NetDecoder["Scalar", 
             Association[], 
             NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
        NeuralNetworks`Private`NetChain`opart, 
        NeuralNetworks`Private`NetChain`part, 
        NeuralNetworks`Private`NetChain`selected = Null}, 
        DynamicBox[GridBox[{{
            NeuralNetworks`Private`NetChain`MouseClickBoxes[
             TagBox[
              GridBox[{{
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Input\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"real\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Output\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"scalar\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 ItemBox[
                  StyleBox["\"(uninitialized)\"", 
                   RGBColor[0.66, 0, 0], Small, StripOnInput -> False], 
                  Alignment -> Center, StripOnInput -> False], 
                 "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
             If[
              ListQ[NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
               If[NeuralNetworks`Private`NetChain`opart === 
                NeuralNetworks`Private`NetChain`part, 
                NeuralNetworks`Private`NetChain`selected = Null; 
                NeuralNetworks`Private`NetChain`opart = Null, 
                NeuralNetworks`Private`NetChain`selected = 
                 Part[NeuralNetworks`Private`NetChain`assoc3, 
                   Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                NeuralNetworks`Private`NetChain`opart = 
                 NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
           NeuralNetworks`Private`NetChain`fmtSelected[
           NeuralNetworks`Private`NetChain`selected, 
            NeuralNetworks`Private`NetChain`part]}, 
          GridBoxSpacings -> {"Columns" -> {{1}}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{158., {46.9169921875, 52.0830078125}},
         TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
        Initialization:>{NetChain}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{{3.7075023776552467`*^9, 3.70750239616991*^9}, 
   3.7075025943105803`*^9, {3.707502632797193*^9, 3.707502707890807*^9}, 
   3.707502846917511*^9},ExpressionUUID->"a8e01361-2595-47ca-ac74-\
bf454c58aa12"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"BesselJ", "[", 
    RowBox[{"1", ",", "x"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.707502415728251*^9, 
  3.707502444999786*^9}},ExpressionUUID->"6a0de1b7-874f-4ab6-8b9d-\
e3431c80d146"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJwtm3k4lN//xu1kyTZjyzKDJJVkSaHOqYhEqSxlSUlkSWWXUJJKQtbKkiQK
faLF1nKOfWcGM5F9SNIm++73fK/r99dcr+t5zjnv+37f55z556E6XTp+noON
jS2Mk43tf78h380n19aUcKlp9gex/TloNFhipmdZCc+3hD+GArnoiMjAXMmC
Eubs+t1u1ZmLKLsvr1yaUsLZPW4v1V1eosqoeL7BUSUsPEi1c75TgPjUv8jj
FiUcecruzSOnIpToe+bw9VQlPJmibhJ+twSt8G0+Yv9QCXOlZh1+P16CXNL/
WexKUsIarx7f/HS4FOnWhltPxChh1V1HWw4JlaGvks/PnglXwrYSldd0Y8oR
5cOPAOimhIdXZiaTIj+hfHafbDZdJUwv/v7M53kF2nUij+eRlhJm3L8ovJ9Z
gWqzhy7s0CDG/+1f/sZTiQaNLbY5bVbCHTc/ShW4ViKJmG3FVRuU8Lip5x3q
pioULjNWF8mmhFdOZuprp1ejk1oOPwUbFbG5Oh9zk1MdGo1INH9eq4g7Yrdr
JUXXIR9m0+s9VYp4IPFSVW1xHYoJ0vP1+qiIBZ5Z+/ny16MqJLnS9p8iZvPk
5Pv1Xz1SN2tfn5CgSFh0cXPfzwbEfd5YU9pBEX8L4c701mxG7ad32Pw8pYi5
2g8G6R5vRhknN1z7ZK2ItfcfkPpwpRntNPtbc9ZCEc8fHDNced2MXLRSTuUd
UMRw96G6c5tbUD379+v6asR8RiUtXsKtKHGJ9lxokyImne7Om1NrRWdmyhsH
lAhWieXVO9iKFsZiSBFyivjIpqOc48GtSI2280WzCDFfqvv1P8OtKDojss1h
jorFuc9FGee0oZMPL09vn6biHweW0gw/tSHleFtpjn9UrKSbe3u2ow19uqV+
LmecijV3bvyhz0ZDfzyZs3/6qPjMJ85L02o0VO6CN1R8pWKPh79z9uvQUOSZ
PJjwhYpfXa2B7oCGFCxDo3TpVNx6sWSD0QkastBXkb9eTcUhfEGCKkE0JKsj
cuB4BRXLfN7zVz+chsbUF12VP1Oxjs0qULtHQzcUW4vqS6jYvUS7NDaNht6s
8zcSzafivVasiaufaCiU84z7cC4V11f7qh+roSHTlUOx77OJek+NLa820xBr
Qq77VAYVL3yhjQz20JB4V41n1gMqvvvfiMKHORrCW57eiYih4p9lgvFqqzTk
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
/WvLSrDCK+W3plIu+P/v++D/f98H/g/woA09
       "]]},
     Annotation[#, "Charting`Private`Tag$29969#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-0.5818651005951258, 0.5818644992766403}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.707502437904833*^9, 3.707502445436447*^9}, 
   3.707502848357038*^9},ExpressionUUID->"ce1fff2a-c56e-4c72-a06c-\
7de38f77c039"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"trainset", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"#", "\[Rule]", " ", 
       RowBox[{"BesselJ", "[", 
        RowBox[{"1", ",", "#"}], "]"}]}], ")"}], "&"}], "@", " ", 
    RowBox[{"RandomReal", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "5"}], ",", "5"}], "}"}], ",", "100000"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"validationset", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"#", "\[Rule]", " ", 
       RowBox[{"BesselJ", "[", 
        RowBox[{"1", ",", "#"}], "]"}]}], ")"}], "&"}], "@", 
    RowBox[{"RandomReal", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "5"}], ",", "5"}], "}"}], ",", "10000"}], "]"}]}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.707502461542794*^9, 3.707502584502688*^9}, {
  3.707502730907188*^9, 
  3.707502737912753*^9}},ExpressionUUID->"c4e07b6f-1619-4e4b-8eab-\
4fe9defd26a6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trainedNet", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", " ", "trainset", ",", 
    RowBox[{"ValidationSet", "\[Rule]", "validationset"}], ",", 
    RowBox[{"MaxTrainingRounds", "\[Rule]", "1000"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.707502587653557*^9, 3.707502614324967*^9}, {
   3.707502722315357*^9, 3.707502755168301*^9}, 3.707502895185603*^9, 
   3.7075032997505693`*^9},ExpressionUUID->"b197d8c6-2fc6-44d2-9570-\
133c9b346a0c"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = Association[
        "Type" -> "Chain", "Nodes" -> 
         Association[
          "1" -> Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`Private`DummyRawArray[{10, 1}], 
               "Biases" -> NeuralNetworks`Private`DummyRawArray[{10}]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 
               1, "$InputDimensions" -> {}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
               "$Dimensions" -> {10}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "3" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`Private`DummyRawArray[{10, 10}], 
               "Biases" -> NeuralNetworks`Private`DummyRawArray[{10}]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 
               10, "$InputDimensions" -> {10}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "4" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
               "$Dimensions" -> {10}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "5" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`Private`DummyRawArray[{10, 10}], 
               "Biases" -> NeuralNetworks`Private`DummyRawArray[{10}]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 
               10, "$InputDimensions" -> {10}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "6" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
               "$Dimensions" -> {10}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "7" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`Private`DummyRawArray[{1, 10}], 
               "Biases" -> NeuralNetworks`Private`DummyRawArray[{1}]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 
               10, "$InputDimensions" -> {10}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]],
            "8" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
               "$Dimensions" -> {1}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"]}, 
         "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
         "Outputs" -> Association["Output" -> NetDecoder["Scalar", 
             Association[], 
             NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
        NeuralNetworks`Private`NetChain`opart, 
        NeuralNetworks`Private`NetChain`part, 
        NeuralNetworks`Private`NetChain`selected = Null}, 
        DynamicBox[GridBox[{{
            NeuralNetworks`Private`NetChain`MouseClickBoxes[
             TagBox[
              GridBox[{{
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Input\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"real\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Output\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"scalar\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
             If[
              ListQ[NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
               If[NeuralNetworks`Private`NetChain`opart === 
                NeuralNetworks`Private`NetChain`part, 
                NeuralNetworks`Private`NetChain`selected = Null; 
                NeuralNetworks`Private`NetChain`opart = Null, 
                NeuralNetworks`Private`NetChain`selected = 
                 Part[NeuralNetworks`Private`NetChain`assoc3, 
                   Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                NeuralNetworks`Private`NetChain`opart = 
                 NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
           NeuralNetworks`Private`NetChain`fmtSelected[
           NeuralNetworks`Private`NetChain`selected, 
            NeuralNetworks`Private`NetChain`part]}, 
          GridBoxSpacings -> {"Columns" -> {{1}}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{158., {69.9169921875, 75.0830078125}},
         TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
        Initialization:>{NetChain}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.707502618927853*^9, 3.7075026515099993`*^9, {3.707502716451316*^9, 
   3.7075027570061913`*^9}, 3.70750285252354*^9, 3.707502907610116*^9, 
   3.707503445043528*^9},ExpressionUUID->"1704ab28-4934-4f0b-a1d3-\
53a6783d8df5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"BesselJ", "[", 
      RowBox[{"1", ",", "x"}], "]"}], ",", 
     RowBox[{"trainedNet", "[", "x", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.707502758824851*^9, 3.707502792728901*^9}, {
  3.707502870483139*^9, 
  3.707502876538216*^9}},ExpressionUUID->"7663e62f-77fe-4161-9039-\
95e90f35ea8e"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJwtm3k4lN//xu1kyTZjyzKDJJVkSaHOqYhEqSxlSUlkSWWXUJJKQtbKkiQK
faLF1nKOfWcGM5F9SNIm++73fK/r99dcr+t5zjnv+37f55z556E6XTp+noON
jS2Mk43tf78h380n19aUcKlp9gex/TloNFhipmdZCc+3hD+GArnoiMjAXMmC
Eubs+t1u1ZmLKLsvr1yaUsLZPW4v1V1eosqoeL7BUSUsPEi1c75TgPjUv8jj
FiUcecruzSOnIpToe+bw9VQlPJmibhJ+twSt8G0+Yv9QCXOlZh1+P16CXNL/
WexKUsIarx7f/HS4FOnWhltPxChh1V1HWw4JlaGvks/PnglXwrYSldd0Y8oR
5cOPAOimhIdXZiaTIj+hfHafbDZdJUwv/v7M53kF2nUij+eRlhJm3L8ovJ9Z
gWqzhy7s0CDG/+1f/sZTiQaNLbY5bVbCHTc/ShW4ViKJmG3FVRuU8Lip5x3q
pioULjNWF8mmhFdOZuprp1ejk1oOPwUbFbG5Oh9zk1MdGo1INH9eq4g7Yrdr
JUXXIR9m0+s9VYp4IPFSVW1xHYoJ0vP1+qiIBZ5Z+/ny16MqJLnS9p8iZvPk
5Pv1Xz1SN2tfn5CgSFh0cXPfzwbEfd5YU9pBEX8L4c701mxG7ad32Pw8pYi5
2g8G6R5vRhknN1z7ZK2ItfcfkPpwpRntNPtbc9ZCEc8fHDNced2MXLRSTuUd
UMRw96G6c5tbUD379+v6asR8RiUtXsKtKHGJ9lxokyImne7Om1NrRWdmyhsH
lAhWieXVO9iKFsZiSBFyivjIpqOc48GtSI2280WzCDFfqvv1P8OtKDojss1h
jorFuc9FGee0oZMPL09vn6biHweW0gw/tSHleFtpjn9UrKSbe3u2ow19uqV+
LmecijV3bvyhz0ZDfzyZs3/6qPjMJ85L02o0VO6CN1R8pWKPh79z9uvQUOSZ
PJjwhYpfXa2B7oCGFCxDo3TpVNx6sWSD0QkastBXkb9eTcUhfEGCKkE0JKsj
cuB4BRXLfN7zVz+chsbUF12VP1Oxjs0qULtHQzcUW4vqS6jYvUS7NDaNht6s
8zcSzafivVasiaufaCiU84z7cC4V11f7qh+roSHTlUOx77OJek+NLa820xBr
Qq77VAYVL3yhjQz20JB4V41n1gMqvvvfiMKHORrCW57eiYih4p9lgvFqqzTk
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
/WvLSrDCK+W3plIu+P/v++D/f98H/g/woA09
       "]]},
     Annotation[#, "Charting`Private`Tag$33080#1"]& ], 
    TagBox[
     {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
RXr5+3p+yIP3KVZj32t1QQdbwezJBtVYqff7q/ovYCpuSzVe/W6KYm4mWGAd
VI3DrF0ywgJIPzOiBq/zH6u8VA3Mf9NXg+83WOR4r5GD8xz3ug4vaFnwu3IR
WPD3Ux3OYSYYGs4Gs/KZOizqK40SKYLZ7er1WE/J7LhFvSzkXr71+Pn6ddr6
p8DsS0sasPEWnV2BLmBq2pYGXGkhE9JsR3xtfwPu5Qp+Ra4DC1jXGrCRz8pP
8kpg3sS2BpzzdBGPShoO+/0V3Igt05TTjPjDyeclphGLMn+0h4eCuXPTGvHI
whTrLadJ/buGRrylZe68DFMwNWGOEH+eMqMxtEkG6ldlCbGzpuzE71Vgfkep
EPfPaN64qYD4FC3Eagvvv2SlkPqRMhS236IRfPgMmErWoXDbOZWVplPAbN39
FB595un30NEkt3OlsIHXxgfUwDA4n9PHKezpfmb0aRrMPnSBwvJ7WquTEohn
xFBYz+ps0K9oUh/xmMJbt6ty1v8H5namUDjMdEuc8DiY2o0pPH3Ry5NKq0i/
XB2FN8zbprt3Hpj3nKawm56kPlGLzDMVU/gFW2OdiTzJZ/yksPHYi0pepSyY
92osjR1EO5827ANzZ6+gcQDd4aC3EyxYh2icUB846dR6MM90HY1/lGeeGT8H
zBq2lcYyZzfeChAP4X/5Gi6NN508M6RZDGZfd6TxdddnTq+fkTz/II3Zu1QX
fz0NZomO0hjNl3zaPhbM+XpWuv4sjeXtXYNQ73aBxiUa2/n+n8GC8gAa249+
7f7qHphjHkzjWNa3KnN/MN/5Go2/9bJXMQdJv2MojX2bA8doLACzx0XSOKcm
0yNtEqnPjKKxQllnzbY/f8Hb7tI4KnNX/PkcMGvGAxo3PQ8aN/UxyZ0f0Vjv
scDzZTCY918cjTPCZpuIrYhDEmk8ck/b/mErwQLbJzS2YseeV9Mi+YSnNH7Y
6nh/oTyZl5giPc8EHYFZ+wB4znMac442NR4oA3Oup9I4ZPH9v34vwdz6FzSu
/7136q3bYN7YNBrrCqYZPTsLFui8orHnxYbdhY6kXzNd+rybor2aN5Kc9ZrG
SuP3RAwYgNn5UnOrVNNUJpL1PTJonHy7utLg1x+YP/wNjQf2RnSbNoI53lJv
mmGltC8bzK6U+hYzcf7peOKJmTQWPa3YFhoMppZJvejkDfckD5Kvlfr8iu3B
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
Uw==
       "]]},
     Annotation[#, "Charting`Private`Tag$33080#2"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-0.8424239158630371, 0.8426278829574585}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.707502783717319*^9, 3.707502793094507*^9}, {
  3.707502855404072*^9, 3.707502876885373*^9}, {3.707502909433444*^9, 
  3.70750291146299*^9}},ExpressionUUID->"71ed944d-b7d7-400b-8dff-\
7488dfb0c4db"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"BesselJ", "[", 
      RowBox[{"1", ",", "x"}], "]"}], ",", 
     RowBox[{"trainedNet", "[", "x", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]], "Input",ExpressionUUID\
->"f2862495-fa63-4a5f-8612-80fff30440b4"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJwtm3k4lN//xu1kyTZjyzKDJJVkSaHOqYhEqSxlSUlkSWWXUJJKQtbKkiQK
faLF1nKOfWcGM5F9SNIm++73fK/r99dcr+t5zjnv+37f55z556E6XTp+noON
jS2Mk43tf78h380n19aUcKlp9gex/TloNFhipmdZCc+3hD+GArnoiMjAXMmC
Eubs+t1u1ZmLKLsvr1yaUsLZPW4v1V1eosqoeL7BUSUsPEi1c75TgPjUv8jj
FiUcecruzSOnIpToe+bw9VQlPJmibhJ+twSt8G0+Yv9QCXOlZh1+P16CXNL/
WexKUsIarx7f/HS4FOnWhltPxChh1V1HWw4JlaGvks/PnglXwrYSldd0Y8oR
5cOPAOimhIdXZiaTIj+hfHafbDZdJUwv/v7M53kF2nUij+eRlhJm3L8ovJ9Z
gWqzhy7s0CDG/+1f/sZTiQaNLbY5bVbCHTc/ShW4ViKJmG3FVRuU8Lip5x3q
pioULjNWF8mmhFdOZuprp1ejk1oOPwUbFbG5Oh9zk1MdGo1INH9eq4g7Yrdr
JUXXIR9m0+s9VYp4IPFSVW1xHYoJ0vP1+qiIBZ5Z+/ny16MqJLnS9p8iZvPk
5Pv1Xz1SN2tfn5CgSFh0cXPfzwbEfd5YU9pBEX8L4c701mxG7ad32Pw8pYi5
2g8G6R5vRhknN1z7ZK2ItfcfkPpwpRntNPtbc9ZCEc8fHDNced2MXLRSTuUd
UMRw96G6c5tbUD379+v6asR8RiUtXsKtKHGJ9lxokyImne7Om1NrRWdmyhsH
lAhWieXVO9iKFsZiSBFyivjIpqOc48GtSI2280WzCDFfqvv1P8OtKDojss1h
jorFuc9FGee0oZMPL09vn6biHweW0gw/tSHleFtpjn9UrKSbe3u2ow19uqV+
LmecijV3bvyhz0ZDfzyZs3/6qPjMJ85L02o0VO6CN1R8pWKPh79z9uvQUOSZ
PJjwhYpfXa2B7oCGFCxDo3TpVNx6sWSD0QkastBXkb9eTcUhfEGCKkE0JKsj
cuB4BRXLfN7zVz+chsbUF12VP1Oxjs0qULtHQzcUW4vqS6jYvUS7NDaNht6s
8zcSzafivVasiaufaCiU84z7cC4V11f7qh+roSHTlUOx77OJek+NLa820xBr
Qq77VAYVL3yhjQz20JB4V41n1gMqvvvfiMKHORrCW57eiYih4p9lgvFqqzTk
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
/WvLSrDCK+W3plIu+P/v++D/f98H/g/woA09
       "]]},
     Annotation[#, "Charting`Private`Tag$47203#1"]& ], 
    TagBox[
     {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJwt2ntYTF0XAPCRJEq6qIQ05BqSpHRhD6mEkiK3aCS3IhSJlIkkpCgVJUZI
KhRJ9XrtkUpFqanmTLqdOSUJSUWh+M679vcPfs9ae6219z7nxPOY5LHfeYcc
h8O5zv7y3+9BHxy6//7VF7F/5CXzS1BboNb3+gGw0HpXCXJUbe57+hMs+rCv
BHHNDwzu7yH55oElqOBctCLdRuKDsSVI0ZCaKCoHc3XelKDLh/grBYmkXrRF
KUof4nebY0Zcyy1Dw3bYGetsmfyf+TN5b5CGtGhv8qVJsD7VrwI5v0zYPrOM
C/mmuytR4NdFey+26P1nuqesCuUeSfB6uHoirFeeWY0co9dx/1ydAPNFpdeg
Y8aj7e1iwCKfrBqUIi45eDECzHd4WoP+qFu9nHyCxIe9rEH3YybvtPMEC7ze
1SDl2K/pFw1JvW7FWlQWf9ZM/+V4WF/gWYvskv51XP55HMynqSlBXRcaBuTb
wJwR4yQoIfh32otmEu+fKEGf3c2HW1aDReUzJCh68hM8Jx/MX20lQU13M4w0
wsHcWx4S5P8oUb1JH8wzzZAg7q18UYIumE7NlKDSmDqf9dokX+uJBE04rP26
ciTJb/lXggrMYk69/KYD9dFbCVL591xvKgZz+7okKOXVUYnfZrCgdy6Frhr7
W99bC+YMzqdQRJJvZpMDyf9jRiFfP+9z9jyS34YotEhvy2K9qWCe82oK1fjz
Uso6x4JP7KXQK5mVBqed+Pd+CuWvMhcskIE5+/woJJxsvElYDeaaHKOQd4W+
in8umL/8DIXkpg33n3QSLAi4QaHvF4e2uAaCRauSKdT+++/qiEOkntYdClVU
9c/s2wmmQ9PY/QR1NL5ZSfpLstn9tLetkLMBC1c+pVCwS8tTs8Uk/iSPQp4z
Gy4lG5H6Hs8pZFRbbhOgSaz/ikL6vLJH91XIPPNLKaSVXqzXMpx4wWsKDQjw
T4df2jCP2lsKff30z85TPWBeRyWFGNfc6tzPYPqJmD2f2Vn39ZvBwkkS9nzi
74/bKCXxAopCGXJpZyKrwIJ1dRSKliZv+/mS1HNsoNBp6xsVhv+S/OxGCgU8
SLT0zAGLlJoptDX0subbVFI/QsaeD/oxPCCZOJmhEPq9/hf3GqmX3kKhzJy8
z6WxYG5KK4W4vuObfaNI/ej3FLo4J6hq/FkS922j0JCPTS8LT5L11h/Y/bkn
p2r5k/r57RRyHi+fiPeT9fyPFHop2XFh9x6yvp+1SfSrE2rbyf5COih022Gm
b74b8W/WY0ac99zuCubv/MTut/Czq7ITWf+S9Y8TjvZP7En90Z8ptNMy03Kr
NYk7sJb8UDMcvojME8ja7pEfN9OUxBNY5+6rVd9oROa/x3rGTLNhcgakXyrr
K61X+tL0yX1eYT1C+Oujiy45X3/Wxza7NQxokfU2rDu0nlfcUSXzDGW9Saz3
wnEkcRY77+sLIY/7hpJ6q1lb2bfcEQ5qwX7r2f1myNtcse8Dc9azniBKOdfd
Bea9YM/rQqBiUGIHiY9n/cfUa/+yVrDQgz1vn+7X2740kvyr7H003Z+zNo4C
8/9l72v1nihbVAUWVbL3KZrybWF7GckXs/dtRDvPulRI6r9gnwdhYrauxXNS
P4l9XtTWa6m2PCX5u9nnqbu8rtckncxf1EQhj7OWHxpvk/gG9nmsXpZUF3ad
xKl6CmX/w38uvUTiSVIKTTlSkBlynszDsM9/rPGUWwanwfSYWgr53/tw5ngA
mWdxFYXaPO2PTfUl+zFh36/13PS9Fd6knnY5hRbG+6zhuoO510solOpcaV26
gdi6mEI6Ksamvs6kvvglhX6Ffh9XaEPqPWbfdy/e+lH7EIkPfUah+t+5fzXN
SXwx+3145nu8dddsYr/H7PeDP/SBkgaZvzqFfX/e2kXWKJP46Vvs+7A4widJ
gczHFVLIVldz7txfmnAeY65SSOXdtExnGZjbeZZCPHvvi+PrwZxPp9nvbe7D
A601JF4Vwj7PcQvn+ZeA6XVHKXTdZcWjqw/BwqW7KFRZEBntcQ/MD/Fgv5/G
1b6zbhHf3cK+H6pu8/+NA4tSXShkWL4vmw4i8aDFFMK2l3KmryLxZaPZ+31S
G9dlQ+q/V2Tva+q4I3mI5HvJUSh86C2zlfNJ/qTvEuQkys71GUfmR3USRJtL
85+0j4H9ql6TIPV7ExKDGeL3MRK0bOy2QLsGMJ14XoJSf3y0rHtLnHFMgg48
/v1sIIfkb14vQZw5etj6NFhYMFKCjmst2Xo6mMSf/61FfX89BouPgDkxvbWo
U5xiucILzCturEX1AYa5TquJHR7UopzCRVlbdEi/VLtaZPzA3emGOqmvbVGL
7seHfKWV/t9/di267VU0x/OPBtyHh2otilZ1SPNqAXM8JTVon5vbrSP3wTzV
TTWo3SZ4aV4KWJRrX4M85wplv26QuIl5Ddok16oXHE18Q7sGLU/1vhZ6hNha
XI2m9B6LvbQELLyxuBq9O3/1THqtOvQ/312Fqou4Gfy3xDcbq9Cbv3crNUvB
nPMlVei5X46O4BlYUJdUhZI3V6evvUXMt61CXrNGVQ4eIB4VVYl+lwnGOimD
+fsHy1GvvOKiYQrE3iXlqHNx1Lb8v2pQXzmmHNGPktKm9IB5NtPLUWFCvtXP
OrAoYuUbFOHVy0++S+I3TpWhCSN33+tdCqZPPi5GW5+/iZhsRezuU4xu+s47
4LQALKRnFKNp9b9MM6YTF1wrQnMzLhRuVyb5hoJCtNTxcbO4VhXqTzYtQHui
/2hm7QbT54vzkfcCg2H1E0bD/rIE8Wi7WVPqy5dKcF6Whi+xQYDFX5/bilBf
P68aixodDVriwNwephq7Wm9ft/4smE5RrsEnVSLSkQ9YgN1rcN3txvWqC0n8
lnwtDq8SZGa9Hg7xxuUS3GbwaltvtwJ4Qq4UH79YH7H7PVhU0yjF6j++Pm2g
wHzPoXV48YuxKkXPwEIlxzocu94rPzYMzPWS1eFloaM0zMaBOYqcenyz0aXw
6JJhEP+g04iNW41/1ZiABblmjbiwQ83IaAax27pG3Nb3NrFNBSzUudiIDdRX
+bk0yIPdhzbhR7bLJs85AhbU003Y2kF/Q7gXmJvxuwnXuMhFtmwB81doNeMf
fNHPq8vAvK8rmrFloFWVgjqpV5nVjAsfmgjojKFQj7ag8bocjRxLIZh715bG
bc+6P8XFgGlnZxorlmWudzgG5mzcQ2OH1tlz8+1I/oQ4GkvGTm2KYeTg/HZ3
0HiXnvyYr7Vgnl8vjfunttivKAULt/2h8bj5N59wMok/qMnwVgfdC/uCwNwE
Mxn+EKJpZTcWTJ8JkuGRQQ+/xowEC/aHybBhgP0temAI2CRKhv19gkYek4Hp
dUIZVtj8XpqRBub3iGTYwPVExM9rJF5QIsOOa3R4tlFgzv5KGY61c7jb7Afm
ujXL8BSTJ4fVF5H153/L8PK5q2e6zwXzFssxeK/Bx4b0SWDhG0UGZ3N1l9ko
kHiwJoOtR51WD3jLgXpGcxi8U1GvuPAFmFNgzOBzQ/OOqmWD6bkLGSz++ZlO
uwIWXl/KYI+2tQ8bt4F5xesYHCbr9DBYS+Immxic1hCudcSWOHgrg7vFz4JU
Z4H5t3cyWKvCdd4WXdJP4MVgi9Ku1nujyTxmPgyWO2F/Jaz9L/6vvulhBq84
HPRXrxwsCg5g8CXvrJ15WSSeHMhg7gadBZ+PgemjIQze7ehw7bQ7mGMYyuDM
ZSFD9ZaR/H/DGIzmfaxaM4p473l2/um65p++/fnPgvMXGFyhu0YYKgHzwqLY
ececHj7xH+LNlxi8dWSez9MbYK5SDINTOF9qnULBotjLDP7yg7uoYzfxr1gG
m3xZe/uUA5hvEc/g4y3hSrrGJL72CoML65755mgR219lsHJlV93q34Mwv04C
g9cWT1nysRksKmCd+GxD6slCMNcukcHMo4jRE+6BhXdYG9wT+T+5QPKbWPve
6G109CX53azzY2fYtLuCBc2sFTd/2D7EivS7x9qVm3Jy3CSS78j69nvPm/MV
wHQF2787TV+06tMA1DdgzTvANO2oBAs92PkjF9wcDH4CFhxm99fwy33ClQQw
35Pd/0zRRMusE2DaMI7B/qcbN5Z5kvwa9vwKV1wLaLEn9dex56uuujl+wBDM
fcSeP79WJ0dzDHEHez8PEqQ1hj9/Q/1B9v4G3ON77JrA3M/s/V7pGDPvWCrx
5jMMbntYvTrmApiuZ58Pk8PRPhm+YIHZSQa//Ts6o8mKxAXHGTyhqKKsbxJY
6HOUwV7nLnxUHU76mfkzWEFTabp11S94PjbtZ+/rXamNWw5YkO3N4OQb4Z6H
E8HCj7sYvNhAIfnuDrDovTuDD6Mhusq/foInOzK4QF5kObUZzHW1Z7BqWfCm
xYVgjucyBmesHYg/EAkWqFkwuHVPn3rtZOJMfQYbz82Z1zmc5D/TZbCg95DT
8C/90D9Zm8HjT3RfMH8KpjlKDHa+/EXx+kowX65LhoUbM6Y/NSL5be0y3DnR
27ZSk/iOTIbP3Ws/JUf3Qf0csQy/eN7yZ+chMG/CYxk2+ljXOzfpB3jEPhk+
1DVnpnYomGvjKcO5fSFb/niBhds2y/ASBYPiNwvBHEt7GXbWPxa/p+Y7rD+k
L8OHt4yzuKUE5iqKaZzv6eNzrrsX5nd8ReM/3gXJB+vAIv9nNA475qXEuwvm
eKXQ+Ep8fkPDUjBPFsCur9p0QutYD9TTH8uulz54PMgHC0OVaLyUlmtvtQML
Lg0249edaU6PNcH8rtJm3KD0e5JTVjf073Jvxn9tEgvPtn+DflNDmvCy/PoR
g65dMM/vqw34Qdod81eWYI7SkQY8NnH/nktcsKDRpQFL+hSiV9Z8hXi5cgOe
GuiqmvSrE9bTgfW4IOS7Ms/uC8xvtPodHoicrxBGf4T+8uUUPnDvYb+aRgvM
v8RCjI1UfE4tpRmIc1XE+JvvbBW/+2BOs6wK+1rd06+xA/N/hlfhw2+THeOO
y6D+w9pK3NMxy37Bm2bwU3EFVjjVL7T1rYN5TPtKsOtO/Zvi46VwfuL9efjV
m7pz811K0H/9Ttrmot0B715tnlUKHhyfhxSn1MuHDi0DL/yWh1YENgTXPH79
nwW9Cf+gNzObfQ+PeQvx+Z+eo93WvvfrO8QInrfnBWiv8EisbkbdfxbJGZYi
izkvHjnFt/xnjnuGGC2okcQ9LwVz0ygxMgr8fGz2AJhXLVeNppVqWytua4V8
vKEaaezwqcYG76Ffr1wN+nxtfK/h8zaY57pTLbqh7L9g1PuPkK/E/nsx4fF5
nUDtDpgn7juF4jbdHGy3B3P6x0tRROqbosIHYIH5bikKWKbvejzgE/R/9EeK
nI9X+n9S+gL5ZvrvkJy/ZoOnThfUO7m8AW3ip4lzTYjbvRvQoxWoVNkJzFGL
akAeentyssNIPK2mARWUPLso3wvm97o1olPjPW1uV3yDftHbmlDDsJ+W/R/B
Qk5IEzLpumC8alg3nN9sYRNqLXyq12sJFj5rbELLfJR+Wd8Dc7PXNSP5F48e
tJzqgXr8CTRyS7e7Y3YDLOyZSaPs2IbE8/lg0XYzGnl6KZyd/43E69bQqEhj
0/ZTW3thPu3TNArbOWSsvvl3qFfUSqMmpziVI2vBtGYXjUwtZw17vR8sWPKb
Rm2j13X7poD5M9VkyDYv9U2Bxg84DwtLGRqu7BTi0QnmOYXL0Ibpm0SmI/og
X++SDKUt9fw7cgqYW3ZVhhyPBgQ93gjmZaXJUFyb8Kh8EZguLpOh9iHpudJm
sPCAWIYsdJ/0Zfwi+d/rZKjJpfTwOqN+6H+xXYamvfh2MCURzFOSZ1BAw+/M
Yzlg4YWRDCrrG9blWAXmflJlkI/hOJ8+hZ8wn5kug3ISl3ot9wULxpgwSPHp
qnsTLoB5+80ZtEns2t51l+TfWcygP4reO682knjycgbZ+Md4dCz/BetlmxgU
dynp5vPtYI6mO4PaM+7S0cEkrr+dQREt/2y1zAbzxV4MavpTlDT6LZjn68Mg
o3GVDS0fwaIvBxlU49S6KULvN8T9Axg0bW/nVb4FmHsqkN3vmX6pyTqwyDuY
QROeK69vPEfiFafY/dZpxWXdAQuXhzFI1MutPS0i9a6HM8hz1gIXwx9gTkME
ex62KFpObQDihZHseXjYV0lmgUVnLrLnEeSimm4LFkyLZlDGlS2rT2wD82/G
sOfzeFeky3ES77vMIKe3B8unxxPPjGNQckeg8kAWWGgaz6DeYWErK98Q611h
kO2ki+dufyBuZX3FKqE0QG4Q5jl9lUEd628rOuiC+UMSGGTl98Bu0kKwcCPr
yMjcsO/OxBdY0/cKikr3gQVJrI2L3shfDwdzz7I+RUusfW+BaSfWTXkr9wU8
A3MG2H4WMaK44FoSP8M6du8CUWgn6d/Lztdlk/bx3PA/MN8S1qv09DQuccH8
/ez+7vbHWMWbg7nB7P7lxIo7k5zBon2xDNqaHhR1y5usX8yeV35od+69ULDg
K3u+mlt3MQ+TwHTIJQYdMGtQyskh+d+jGPRGdc2CZ29JP3v2vmZ0FG0taAcL
g9n7PPXSIrxkyF/Ijz3H7sd/Sn3NfDB/B/s8xK2+Kl+/CszVC2XQtxkqhrId
YE5+CINS6/sEX+LBopjjDJJ/sjetJ5PUEx9lkHukrPpnKXG3P4O0lryepjAA
FkgOMGjhKO6MsJEc3n/rE/YxqO3oO6sR2mAuj33+l7qs3jnaCMwxYt+Pn8PM
88Z7gPnJLgxK8e0pv+5D7LeaQWub7zOTAkm9qSsZlJk7WXnGZVLPaCmDdnor
u5sUg3n1hgwaIy32eyoG0/kzGVSwLCTcohksPD6FQboTf2Tx+sn6FB32fats
lncwGALzXJZj0MlFCTqVpmBR6IAMGaWtNXSxBvM3/JCh86dK1290I/GUjzK0
1PRx2o5IME9WIUOZiWFOwd1gbl2MDL3WCPswmiMH/e3Py1Db+dPBN0eBuVdO
ytCE46EZhTPAvLcHZCjc7aSikjtYdG+lDPF1g0Xxr8Gciez3OTA2aP3MOuIA
9vsdNyqoM78NzM96T6M3g4ETmoYMhf0XvKXRwqajAVMWgoX8ZBqp3jhslHUb
zL21hEaztA+/WvqI5A+a0Mg26tDWGgzmWcyg0fETfhF978j6dSo0anc/2L5I
TR7ms3zUjETcfcKyIDA9WdyE9id7qra6DoP8KR8aUOTRq9cit4P5VSUN6IFT
xQzzA2Cuc1oD6vxjtiTyLFhUurcB7d2s5LvwGZhz52s98hrzqDpiksJ/Fqz5
8g7tDPsbt+AzWPiuTIq2eiXonglRhPzXk2vQ2TX+5vOvKcH8P+cXIvkxsW0n
fqmAj6+6iNU7g1XUh4+GfhVvo/Gkkt2mtzXAghHOsXjxcauwktlgnq5LAj7a
2jJVzZ34qn4y7sw23pH8cjTp35+OPxu0H/SwVYX9+5x9inu1G0+nrwJzbk/M
xb/lxVd7nYn5j3PxyOZ/XoS5g4WH6vPw9JgotfQAMPfd1GfY47dpVk8aWDRn
jQhTr093hY5Wg/O7eqUQX16cZLNOC8wZQxdi56zshKm6xPOnF+GKuJZlxQZg
4frsIly8bcnV4bZgkUFZMc7pG1hy7jiYe66lBMfpH4qJ+qhG7rvsDV4bd77d
vQtMzxtWjtVH3Fpk1Ef8HJXjyM6qD5Xy6rD+xuNyHJY310qdC6b3xFVg/9Wf
Wi+7gvnqUyrxukAP04SXYIHDgyoclzRGoa8UzMl+WYUluLjWpZLU+yKtwq7y
sw6PaiT16uTEeMOFnseCH8Q31orxphuh83bN1IB5v38V44QXpkMK54KFSXLV
uL6lvZJrChaM06zGbjMcDrxbSuLx5tV4S5bmQwc3MH1FUI35L1Nmm0SB+c0K
NVj4fsPAxVgS79aqwbLhSm++JBI3TqvBHqv2e99NJV5kW4O315qljSsAc2ae
qsE7P5RMH/KduO57DU4ZEdi35TdYdGZoLf4wa86r/CFjYH41tVq8+8ClnYdU
wJy8WbV4z8+Ndz5MB/M3utfivUqfJldsInFtUS3+dDRfXmkbWb/ldS32aj/b
ZreL+JSkFu8qmpH2wo/44Oda7HFi57wnEWS9VEuCN/bI0LXnYNHgDgmWbsua
VFdI4u77Jdi1UjBU6zXpnxwgwWvv672KosACyTkJdtq1xfFUF1j49b4E29ZL
3bwma0Jc/asEF9mnLr47A8x78UOCl+Ue4bYaErv+keAlsVqtWyzBnAWjKGy1
eq33mrVgfslMChu/fHt0YRipd3ArhbPm3dh8OIL4uieFjYQ+ix5Fg4XZXhSe
EzRqyOwbYFGSP4VnmK0M18vVJM/jBQrrpRfHKXSQ/iOfUnjtjdy8si5Sb8Uz
Cp+LSWuI7CPz+L2gcG9g5GTtYVowz4nXFC5b5fpgOpc4vInCnCXLqz5NI9Zo
ofCCBRa9D+eAueEfKCzUnWix0FKLvD9dFPbvfF+03JX4DEeKMxiqXXkLWLhH
XoplklKlqu2knpmiFK/C99dsPEjy40ZL8eSLhxv3RIA5XrpSvCF0F8cwBix6
wJXiCwEb9buvggUyfSnu5y/ac+wumWeUgRSXzxv2/VwBmHd+gRTLTevTXl1K
vHihFC8c99FCo5Ksb7aQ4mS5ckFiI6nfiaRY+uP5LfdWYrelUjzqU2ax/icy
f94yKQ6ovqyc0U/6LbWX4gevwuYe+Evm9VkpxS3/BDibKGiDzzpIseNttyvP
NMDcqDVSPOXwlCnlhmABvUGKN+3Rsru0ACyK3CTFUVsUvdZZgXlz3KT4l83n
h432YP5idyk2smgS33Qi8Sy+FO8wrPy+Yz1Zr+khxZVa2ZadnqT/Y08pVlBK
2frIGyz8vEOKLf/Gh/j7kvjYXVKc8iHw1Z8TxLZ7pLi+fl9HQRiZ195LilUr
3UeduUDii72lODDX2mV0Iuk/ZJ8UG7tVdrnfJPkFrDv+ukVm3iXxIz7s+d76
OGvIA+JJ+9n92vmXrskm+SLW6p/kdiXnk/nWHpDissgo+R4RiTexPmk8Idn6
FZh2OyjFFpJUdLmcxKtYdx9d0NhaTeaz9JXiNN2CYwvekX4JrD1eOI4No0n9
TtY6O+qfSNpI3NyPPS/F3S7Tv5D4UdbhGb1dR3qIH7LmOYVElvwk+Q2s+3tG
zdbhjIX7+MM6Mz6hdI8CmKt9SIp3W07fla8M5k1jzW1+LK+kARbOYi09yUve
rEM8nfXFaeUoQ4+sH8d6ednGxoGpYMFQ1hyftmMOs0k/hu33VM1v7HVj4jzW
Pk/+PulcSPqdYT1tY4QLQqTeKtZNA2O/RdmARcNZxwnvRNIrifPZ83BcZjx7
njOZx5O1Qvvz0pANpJ4Ca/+5Unn9HWB6LnvehtWeyX7exE/Z+2nz/4YKD5J5
zFivez4ycEcw6T+RvV9lj/ixOaFgzmn2eSgcNiVH4TzJb2WfFxOHRd/uxpP4
+b1S/LmrNLI/icTF7PN2+7LrbPvbJK7OekzD/l0dmcSB7PPa45XcOLuMzNvN
Pt9pKnMDgyr/fz/s8+/x6J+xFRIyrxxr8c8al/0tZP8/tknxo/DhZVkDZP/n
t0ix1+zLu+SG6kCcz75/kyu5w1xGgLmGm6X4krYFr1cTLHjCvr8HUvbmmM4l
PurCnvfb8bEqpsSD7Pvu8LPMr81KhzxfTlJssGrmvLgVpP4W9vvQ+u19+vcd
YFpsK8XrF7nfzL4G5pxkv1fFO1UEEbdIPNGUPa+L/271TCN+aMK+ny3jJ4zJ
JfWKjNj3J1wa51cN5mfMkOLFNWsijEeOg7ivNvs9HuR4j1Qjnq8pxeOnZ9oz
2mBhlzr7fB9VGR49FczZpMKej97rkG88MN3Dfr+nei87knkEzHX8RmFlOTMP
w/dgfm8xhfOODHVp+0TqWRVSeOeXt9bXu8n6EPbnjUi6e6oKZzzEh7A/j/we
JrR/GQfmNmZS+J3bH5/7TsTDEiic+rQocPYzsMiD/flns29trEHMBLhvvWEU
Hpunu99mykQ472NWEhztG37JiNKDfl3s3yecw1bPScrhwn66r9Rgg82h624H
TYJ8nqwaS9pGJMesmwzxtTOrcYXH+yXqevqwn8EIMZbJ3+2PnQymPc+JcW/K
7oc604jfnBFjnU+fJkyaA+YknxRjT7/uvrmWYN7GADH+dervfYf1YMGf7WI8
7Y7OuLNRYO4kKzE2t6uvVI4h6++bi/Gqj9fOXIwj/S3MxPjgHO73+CSwyNVY
jJ89mVaZkg4WXp8hxs7F88MKX5G4h6YY79j93Wr5a9KfoyHGASOf9ryuIL6h
KsZJjhbbqmtJ/WYlMW6X8KyYFjLfPvbvn78C5Hp2fCD70+CI8ajxhfc+dpD4
P4NV2NjdTvvbN7J+1M8qbDNkRMWh7yT+9EcV3nCrLLS/n/Tb3luFvWwiLI8P
kHzV7ir8///PCft9/rUK/w8iC08J
       "]]},
     Annotation[#, "Charting`Private`Tag$47203#2"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-0.5818651005951258, 0.5818644992766403}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.7075034496185904`*^9},ExpressionUUID->"a31b43c9-92ea-477a-8346-\
a80ca1f66e6b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"LinearLayer", "[", "200", "]"}], ",", "Tanh", ",", 
      RowBox[{"LinearLayer", "[", "1", "]"}], ",", "Tanh"}], "}"}], ",", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", " ", "\"\<Real\>\""}], ",", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", " ", 
     RowBox[{"NetDecoder", "[", "\"\<Scalar\>\"", "]"}]}]}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.707502311278824*^9, 3.707502395447391*^9}, {
  3.707502592759735*^9, 3.7075025936617193`*^9}, {3.7075026311494837`*^9, 
  3.70750270744456*^9}, {3.7075028424293547`*^9, 3.707502846413722*^9}, {
  3.707503098742947*^9, 
  3.707503099949152*^9}},ExpressionUUID->"8948a02f-d48f-4c75-9c2a-\
a255cb6e3556"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = Association[
        "Type" -> "Chain", "Nodes" -> 
         Association[
          "1" -> Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{200, 1}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{200}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {200}, "$OutputSize" -> 200, "$InputSize" -> 
               1, "$InputDimensions" -> {}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{200}, NeuralNetworks`RealT]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
               "$Dimensions" -> {200}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{200}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{200}, NeuralNetworks`RealT]]], "3" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{1, 200}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 
               200, "$InputDimensions" -> {200}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{200}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Output" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]],
            "4" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
               "$Dimensions" -> {1}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"]}, 
         "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
         "Outputs" -> Association["Output" -> NetDecoder["Scalar", 
             Association[], 
             NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
        NeuralNetworks`Private`NetChain`opart, 
        NeuralNetworks`Private`NetChain`part, 
        NeuralNetworks`Private`NetChain`selected = Null}, 
        DynamicBox[GridBox[{{
            NeuralNetworks`Private`NetChain`MouseClickBoxes[
             TagBox[
              GridBox[{{
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Input\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"real\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"200\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"200\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Output\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"scalar\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 ItemBox[
                  StyleBox["\"(uninitialized)\"", 
                   RGBColor[0.66, 0, 0], Small, StripOnInput -> False], 
                  Alignment -> Center, StripOnInput -> False], 
                 "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
             If[
              ListQ[NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
               If[NeuralNetworks`Private`NetChain`opart === 
                NeuralNetworks`Private`NetChain`part, 
                NeuralNetworks`Private`NetChain`selected = Null; 
                NeuralNetworks`Private`NetChain`opart = Null, 
                NeuralNetworks`Private`NetChain`selected = 
                 Part[NeuralNetworks`Private`NetChain`assoc3, 
                   Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                NeuralNetworks`Private`NetChain`opart = 
                 NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
           NeuralNetworks`Private`NetChain`fmtSelected[
           NeuralNetworks`Private`NetChain`selected, 
            NeuralNetworks`Private`NetChain`part]}, 
          GridBoxSpacings -> {"Columns" -> {{1}}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{166., {46.9169921875, 52.0830078125}},
         TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
        Initialization:>{NetChain}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{{3.7075023776552467`*^9, 3.70750239616991*^9}, 
   3.7075025943105803`*^9, {3.707502632797193*^9, 3.707502707890807*^9}, 
   3.707502846917511*^9, 
   3.7075031003423243`*^9},ExpressionUUID->"afc06ecb-1907-4177-919f-\
e6c508611922"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"BesselJ", "[", 
      RowBox[{"1", ",", "x"}], "]"}], ",", 
     RowBox[{"Tanh", "[", "x", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.707502415728251*^9, 3.707502444999786*^9}, {
  3.70750320526058*^9, 
  3.707503212113744*^9}},ExpressionUUID->"c3e85acc-3f8f-42e0-8ca9-\
d9c6fb7fb093"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJwtm3k4lN//xu1kyTZjyzKDJJVkSaHOqYhEqSxlSUlkSWWXUJJKQtbKkiQK
faLF1nKOfWcGM5F9SNIm++73fK/r99dcr+t5zjnv+37f55z556E6XTp+noON
jS2Mk43tf78h380n19aUcKlp9gex/TloNFhipmdZCc+3hD+GArnoiMjAXMmC
Eubs+t1u1ZmLKLsvr1yaUsLZPW4v1V1eosqoeL7BUSUsPEi1c75TgPjUv8jj
FiUcecruzSOnIpToe+bw9VQlPJmibhJ+twSt8G0+Yv9QCXOlZh1+P16CXNL/
WexKUsIarx7f/HS4FOnWhltPxChh1V1HWw4JlaGvks/PnglXwrYSldd0Y8oR
5cOPAOimhIdXZiaTIj+hfHafbDZdJUwv/v7M53kF2nUij+eRlhJm3L8ovJ9Z
gWqzhy7s0CDG/+1f/sZTiQaNLbY5bVbCHTc/ShW4ViKJmG3FVRuU8Lip5x3q
pioULjNWF8mmhFdOZuprp1ejk1oOPwUbFbG5Oh9zk1MdGo1INH9eq4g7Yrdr
JUXXIR9m0+s9VYp4IPFSVW1xHYoJ0vP1+qiIBZ5Z+/ny16MqJLnS9p8iZvPk
5Pv1Xz1SN2tfn5CgSFh0cXPfzwbEfd5YU9pBEX8L4c701mxG7ad32Pw8pYi5
2g8G6R5vRhknN1z7ZK2ItfcfkPpwpRntNPtbc9ZCEc8fHDNced2MXLRSTuUd
UMRw96G6c5tbUD379+v6asR8RiUtXsKtKHGJ9lxokyImne7Om1NrRWdmyhsH
lAhWieXVO9iKFsZiSBFyivjIpqOc48GtSI2280WzCDFfqvv1P8OtKDojss1h
jorFuc9FGee0oZMPL09vn6biHweW0gw/tSHleFtpjn9UrKSbe3u2ow19uqV+
LmecijV3bvyhz0ZDfzyZs3/6qPjMJ85L02o0VO6CN1R8pWKPh79z9uvQUOSZ
PJjwhYpfXa2B7oCGFCxDo3TpVNx6sWSD0QkastBXkb9eTcUhfEGCKkE0JKsj
cuB4BRXLfN7zVz+chsbUF12VP1Oxjs0qULtHQzcUW4vqS6jYvUS7NDaNht6s
8zcSzafivVasiaufaCiU84z7cC4V11f7qh+roSHTlUOx77OJek+NLa820xBr
Qq77VAYVL3yhjQz20JB4V41n1gMqvvvfiMKHORrCW57eiYih4p9lgvFqqzTk
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
/WvLSrDCK+W3plIu+P/v++D/f98H/g/woA09
       "]]},
     Annotation[#, "Charting`Private`Tag$36984#1"]& ], 
    TagBox[
     {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJwt23c8ld8fAHB7Z+95UVmlSFTonChSlGQ0UFllRFEySpNUojIyCkmSUaiE
ynOSTciK7Ox1r73H7zzf1++v+3q/7r3P+JzP+XzO83qdR9bOw8yRgY6OToKR
jo78vDFoMrW+Lo9EPCpW19dpRMSVs4dvxcmjm+z5K6TT6b2S6bTk0VrGpmXS
J3bYjHJVyqHshGcLpJkdDdXFbOQQ09SrGdLl9IO3tJXl0CYjuSnSIfFBtTbz
siifWZhGmurWPEftkEUOP46NkzbV3ix9q1gWVQDbUdI57N4H+NJlUdFTzWHS
Ai0lbklPZZH2/qYB0n5XEw9/9JFFY1v0+kj/4/dXLj4jixpTXXtIH8qyYG8y
kEXK9Yc6/zueyfah/q2yKIi75S9p8VGOsjlBWWS7wvGH9J3g/jesKxSUafu3
nrTmHzOhJzQKmoiKqSM9sgndE+2loOssOjWkzX7G2itVUpB8wcYK0jEsP01f
f6Og3hHlUtLdRqO6Uh8oSKGc9Sfpi3XaonwRFOR7Wecb6U8CDsyPgigo3i4s
j/SSZcgUky8F0Rt++EQ6uKO9esGGgvZ9OJRBesv6pZ87rSgoWHpDGulaCnOB
pykFFe9Ab0kLO2x9O6aHv0+dSyL9euTG7W4FCjp8LzqatAEXv4+ULAV1rjVE
/nc/W1PcT4lT0Ps7K89Ib79cc7qRi4LqYvkfk/an6bo96ZVB1nP6t0h/a9ju
MNksgyrbBW6QXvsib21WKYPkHWt9/4vfLXZjwWwZ9Osoqxfph3xNKtEBMkj3
lqsD6erZMvnFyzIoN+DBWdLcfwskTjnKoCvvQ61JP0tK5JQ0lkFV8sbmpGN3
uI0miMmgnXy39Uh/feN43lRABh32UoCk20XO9NJtkEGnzpTqkpZeOdZ2jk4G
mXuP7yKdVKxVJT8ojSpmO1RJv7NgTH/7SRoxDKqJka4sW9l84r00KpazEP4v
HrvnkthSpZHUQQ+B/+ItPRzrHCeN6tvubyCdNVDzUOWONHo3ZEBPOu9arMuH
o9LIxqlnYA1bzuHym5aD0uhzulgv6cemB7vp9aTR1/H9XaTtlOYszDWkEesn
rz+kOduO7VsUlUbjOlvLSNvuZRfV/yeFGH/2vyZdrtxt5tYmhTZ7aSWQVhf5
8jiyUQrtYPGNJc064cA4VCqFLs9VPiGd9QpRQ9Kl0PfC19dJMzL7lDRfkUIM
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
yNUyvRxGOOPDwVj0gAYMwq7YNhKMkI7uXKLJIxq4ftMrZP4v9m2OQItQGhg6
c3lIl48J1tVVlChF0ACiXEysvMEEpaO65yfjaaAt2k3L+hETrGCKk9RKpIE5
Xrea8WgmqObpwOLziga20Luu8H5igoo1aWfHX9NAdM+FE1YjTFBDmzX9bSoN
eCQ58PZZMkMVC5dex2waCPWNeRFqzwyNDoQJWufQwHvTGsXdl5ihw43dBkc/
0gB1TWtf6ANmqPiUvW7LZxpwO83puesbM4zwXPItyaMBF8GchhBZFug54Jdz
haCBh6MDZ7RUWWD/LoIVIBpIK5IY69nDAl8ub+tn+UEDw5cCmbTMWaDGXWGr
sCIauPDrxM6eIBaYo+MyeLcE50/QetTOMRb4wOPPDH0VDQTZaMh3L7DACyZu
aqnYKRrOHx4ys8L90lucjKtpoP9ffVmXNCsUgJa/Q3/RgANIWXhwjBVOVh88
tVJLA3YLxqc6c1mhlcfvkzcbcf7V3h4I/skKzzhc7WdtooGklFzPHXWssLMq
oSQUu8ec8ih4GB9f60D082acH9nTX9Ul2WCmXbBgVAsN2LrESt2/zQat0p8l
H2qngeVW9prJx2zwcN1KRB52tJFvgHUsG3R+l7xjUwcN/FY80aX2kQ3m65U+
WsLePyj0qr2PDUoynhSK6qIBJYenG9UPskMk8e1P+D8aKG2ga3phzg7bsnB1
wLbTvxTIeo4dpgr8WDPspYEXckcH2n3ZoVNCTMs8NncPV+r9dHZo1jvHdbif
BmZsglU6uDmg1qu/24oGaeDJr/k2QwkOeG/mcRfXEA1s1T0fkqPAAV0m/d9Z
YjtJGozfhxxQtp/h+SB261/GD+qeHHCqp1x+fZgGCq1uqgc3ccDve230WMdo
4HQZ9d9UDwcMPH25Zj/2gqZtuA2VA7qeFnh5G1tNWHdGnZUTcrPzcS5iJzcu
fe7YxQkle/+d7xqngQfHvHfveMEJQzM+rD2i0cCzamW3jHec8FrS8fUi7BeG
XfGbvnDCQWeDg4vYWboHmUTrOWHei1ff7CdooEVJvHaFlQve+at1afskDSgy
FDqUenFBA5uAqbQpGlC/4fkc3OaCoWlOQX+wdRY2V+aFcsHDJmcDGadpwJQa
ti39HRf8fHB/9Unsa3/PLYV1cUEni/CcdezSHOYnJw9vgA8On/NSn6WBuq0F
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
/P/9DPj/9zPA/wAKXuRf
       "]]},
     Annotation[#, "Charting`Private`Tag$36984#2"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-0.9999999958776894, 0.9999999958776894}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.707502437904833*^9, 3.707502445436447*^9}, 
   3.707502848357038*^9, 3.7075031020355463`*^9, 
   3.707503212935848*^9},ExpressionUUID->"c61a5d57-d501-4164-978b-\
b9e456ed948b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trainedNet", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", " ", "trainset", ",", 
    RowBox[{"ValidationSet", "\[Rule]", "validationset"}], ",", 
    RowBox[{"MaxTrainingRounds", "\[Rule]", "100"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.707502587653557*^9, 3.707502614324967*^9}, {
   3.707502722315357*^9, 3.707502755168301*^9}, 
   3.707502895185603*^9},ExpressionUUID->"148136ec-2f39-404c-95f1-\
7cc3c821963a"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = Association[
        "Type" -> "Chain", "Nodes" -> 
         Association[
          "1" -> Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`Private`DummyRawArray[{200, 1}], 
               "Biases" -> NeuralNetworks`Private`DummyRawArray[{200}]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {200}, "$OutputSize" -> 200, "$InputSize" -> 
               1, "$InputDimensions" -> {}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{200}, NeuralNetworks`RealT]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
               "$Dimensions" -> {200}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{200}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{200}, NeuralNetworks`RealT]]], "3" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`Private`DummyRawArray[{1, 200}], 
               "Biases" -> NeuralNetworks`Private`DummyRawArray[{1}]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 
               200, "$InputDimensions" -> {200}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{200}, NeuralNetworks`RealT]],
              "Outputs" -> 
             Association[
              "Output" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]],
            "4" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
               "$Dimensions" -> {1}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"]}, 
         "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
         "Outputs" -> Association["Output" -> NetDecoder["Scalar", 
             Association[], 
             NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
        NeuralNetworks`Private`NetChain`opart, 
        NeuralNetworks`Private`NetChain`part, 
        NeuralNetworks`Private`NetChain`selected = Null}, 
        DynamicBox[GridBox[{{
            NeuralNetworks`Private`NetChain`MouseClickBoxes[
             TagBox[
              GridBox[{{
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Input\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"real\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"200\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"200\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Output\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"scalar\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
             If[
              ListQ[NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
               If[NeuralNetworks`Private`NetChain`opart === 
                NeuralNetworks`Private`NetChain`part, 
                NeuralNetworks`Private`NetChain`selected = Null; 
                NeuralNetworks`Private`NetChain`opart = Null, 
                NeuralNetworks`Private`NetChain`selected = 
                 Part[NeuralNetworks`Private`NetChain`assoc3, 
                   Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                NeuralNetworks`Private`NetChain`opart = 
                 NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
           NeuralNetworks`Private`NetChain`fmtSelected[
           NeuralNetworks`Private`NetChain`selected, 
            NeuralNetworks`Private`NetChain`part]}, 
          GridBoxSpacings -> {"Columns" -> {{1}}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{166., {39.9169921875, 45.0830078125}},
         TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
        Initialization:>{NetChain}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.707502618927853*^9, 3.7075026515099993`*^9, {3.707502716451316*^9, 
   3.7075027570061913`*^9}, 3.70750285252354*^9, 3.707502907610116*^9, 
   3.7075031478762207`*^9},ExpressionUUID->"363d09ef-5bfd-4556-b644-\
cd3641a88f1d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"BesselJ", "[", 
      RowBox[{"1", ",", "x"}], "]"}], ",", 
     RowBox[{"trainedNet", "[", "x", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.707502758824851*^9, 3.707502792728901*^9}, {
  3.707502870483139*^9, 
  3.707502876538216*^9}},ExpressionUUID->"39429816-9165-4937-a09e-\
1d7597823390"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJwtm3k4lN//xu1kyTZjyzKDJJVkSaHOqYhEqSxlSUlkSWWXUJJKQtbKkiQK
faLF1nKOfWcGM5F9SNIm++73fK/r99dcr+t5zjnv+37f55z556E6XTp+noON
jS2Mk43tf78h380n19aUcKlp9gex/TloNFhipmdZCc+3hD+GArnoiMjAXMmC
Eubs+t1u1ZmLKLsvr1yaUsLZPW4v1V1eosqoeL7BUSUsPEi1c75TgPjUv8jj
FiUcecruzSOnIpToe+bw9VQlPJmibhJ+twSt8G0+Yv9QCXOlZh1+P16CXNL/
WexKUsIarx7f/HS4FOnWhltPxChh1V1HWw4JlaGvks/PnglXwrYSldd0Y8oR
5cOPAOimhIdXZiaTIj+hfHafbDZdJUwv/v7M53kF2nUij+eRlhJm3L8ovJ9Z
gWqzhy7s0CDG/+1f/sZTiQaNLbY5bVbCHTc/ShW4ViKJmG3FVRuU8Lip5x3q
pioULjNWF8mmhFdOZuprp1ejk1oOPwUbFbG5Oh9zk1MdGo1INH9eq4g7Yrdr
JUXXIR9m0+s9VYp4IPFSVW1xHYoJ0vP1+qiIBZ5Z+/ny16MqJLnS9p8iZvPk
5Pv1Xz1SN2tfn5CgSFh0cXPfzwbEfd5YU9pBEX8L4c701mxG7ad32Pw8pYi5
2g8G6R5vRhknN1z7ZK2ItfcfkPpwpRntNPtbc9ZCEc8fHDNced2MXLRSTuUd
UMRw96G6c5tbUD379+v6asR8RiUtXsKtKHGJ9lxokyImne7Om1NrRWdmyhsH
lAhWieXVO9iKFsZiSBFyivjIpqOc48GtSI2280WzCDFfqvv1P8OtKDojss1h
jorFuc9FGee0oZMPL09vn6biHweW0gw/tSHleFtpjn9UrKSbe3u2ow19uqV+
LmecijV3bvyhz0ZDfzyZs3/6qPjMJ85L02o0VO6CN1R8pWKPh79z9uvQUOSZ
PJjwhYpfXa2B7oCGFCxDo3TpVNx6sWSD0QkastBXkb9eTcUhfEGCKkE0JKsj
cuB4BRXLfN7zVz+chsbUF12VP1Oxjs0qULtHQzcUW4vqS6jYvUS7NDaNht6s
8zcSzafivVasiaufaCiU84z7cC4V11f7qh+roSHTlUOx77OJek+NLa820xBr
Qq77VAYVL3yhjQz20JB4V41n1gMqvvvfiMKHORrCW57eiYih4p9lgvFqqzTk
GXYt2+UeFYe6vHLz5qKjWhWtXrVbVExZ7ZuMEqEjn6vr5wXDifnThK/aSdAR
pfWH+N9QKmZ8XhHlkqWjq36Zh98GUvG2oG1KfSp0tKkh2DXJj4ov+Q34Cm2l
o05Zm5sB3lQstnn7HfIOOlKvFvqg70nFfmYXXxTo0RFLLFit2pGKJ90+d04f
pqNYF+uDOfZUHG+zd+fQUToyKN/hdOcUUf8njebsE3SUfHbskdkJKj4dl29V
ZEtHB95XvVe3oGLmFn21RQc6muB7Qhcxp+KcycMz0mfpyLTQah3jIBW3P1/T
7nehoznOHRtLDlBxdkrC/XA3Osq2Edz3CFLx2Y33slc86OhY/nf74D1UPHOq
wfOoFx2trlYGOuhRsZlbbHfAZTrKP56RCHQJ/a3X+v296ehkTlAhVZuKt9+J
vWTmS0fci5bNnDuouHOL8o15Pzp6Y64x9m0bFT/ZMMsbHEBHjk8FuOrVqFj7
rcJCRyAdCc6MKuRtouIKZxlTzqt0VGZSqR+tTMV3vn+e4AumI5e0dBsvKhVr
nTAaHiFYfCLQx0KeincdM5JKuUZH+IBlrOYGKh7UK45UCKGjiynb80lSVLy8
5+/GUIJlfvLXzZKouDgg9/cbguv2jrK6RKk4YOMs4xPBvvEVq+Xrqdiw5PiX
DIKpo2ky6QJEHmcTx60Ibt0duDOMj4rHN87wDRPrBd8/cfwsNxU7bBDcepBg
1SF1rwMcRH/PdJiHEfUxtPmjNq5R8A3T5xdiCD3hd749512m4E0KewJ8guho
ey+u+DFP8OYSX3VCf+/2tL6mGQpubYuzR/50dPdmwMKrSQoef/dCTYXwb+eX
4+S4vxSs2Li3x8mHjobV1Hd4/6JgM69pd78rdBQXus7c8gcFuwY2Mx0u0dH4
RhwhNUzBVzZ/2VXoTkcpQamZiwMUHPxpTk3mAh0Ztvh/7O2lYE0k8e/UeTrK
8N02ncmkYDelMzO2jnR0uJ5P5GYHBRvfvq0pa09H8xtGtpynEXqCcve9PUlH
x6sen9vcSMHeGzm6nI7RkXLnSH9dLQVv8W8qVzano9kRdVuXKgq+KZzI9t6E
jh7xVFk8+0jB1b9EMAR05C4p1LyvjIKVy+OgAZF/A1Ub48H3FOw8n7ODR4eO
Bg/93CP3moLb760L4lYj8mOrU/Yhn4LZTjl/1VOmo5seYdq2Lyj43QPvyr3y
dKRyX3xLylMKPnnu2f43okT/afpSookUfCiB/5vJLA3tHbqV8DqOggslFk5N
/aEhkcm29UfuU7DhR89Uz+809E7cmfteJAVrf/hd2PSFhhatoye5gii4+btv
2J5iGrrT19s870DBD6ZSNJfdaMj2j4pJii3x/IY6/ZEjDW1du1ylY0PBx9tU
1XmtaKiNwl3ubUHBGT0W3seI81DCeVvur/0UTDql454jSkPPxkNuDG4i/GK9
EWm2bUO+S3XLocoU/Jh/V6s4bEMHBcUC5agUHMr/dnFFuQ2Nb8vxspWh4Ls3
s26U/25FGlda7ToFKTj+49yLr1dbUfDfPZ5xwwpYxa+n4ffNFpR2VncM9ilg
7fSmfTnnW9DHDg3nf0wFnNXO+E/EuAWtlijZH29UwNwNEyeW+VpQ+PV1ZqQi
Bezf0O+ic7cZRYkytjwMJZ673lnvEtyEHmt5/nwirYB1Ig6eeabagD48P+9q
Ia6A0xVimmXYG1CvpOMwm5AClt1sM2vWXY/kl4/1nGVTwPppDU2sO/Uoq1q3
Sem7PC5LvpnTN1KHXlpx5ue+k8eG45LpdnG1qDTgsfvro/JYPTDj1VxJFVJ0
vvK8y0Qey4kacvtHVKH7FiaD7PvlcbNQV3ahRRVy2jxrZaktj5/M5TbYj1Ui
gZ5j+xak5HGC4LbdT0iV6PTedVIHWHJY9sg0/cBZjDi5A2uYvnI4PHJ/XE96
GToSb0VZfSSLdQRG3B/5ZiPj9E9HTH7J4Ks7Xh8eFigGE/d7l7lGZXDGZy2h
UxHF4HHoUl7FgAwGK8zed8vF4Jfjbl79DhkcPElWlfldAuIV36Nt5TLY6rXh
UnBzGejPLdAQvyODYzQCtj6N+AT836SK9SvJYPNVG9cjbpWA8qwcP5aTwT1F
pu6dWZWgIaHby0ZSBr/zTErR760Esn6STTR+Gaz6W3ZP/pEqUKmbcLPqnzSu
HFixYNOsBus/RU2/QNI4PWSLIu9kDcipC2L62Enjfmq6CDrRAB5p+h94aSmN
NdNdNzRFN4DodO/CfnNp/NDj1aOMmgbg7eMRdQhKY8x3+9CjnY1gj4LDXoWN
0vh6KmulkdwEOv1hTuMfKeL/gMCt+/XNgEOF158aLoVljzm/l1pqAzNxnMPW
wVI4PeVlxw8yDYwtrR2N9pXCitmqYxR1Gmilz2+ec5HCW/Mr3sqcpoFHIeN9
zYel8FMds4faH2lAg9FiFEiWwrEW7HR8mQ5ORySS215IYtmNFTwmZe2gFczy
BmZJ4hs3PrnyN7UDsGSzSEmTxJTtbnnPetsBxXvDgHesJFZII3PbrrUDlmPW
Cwl/STwgKe1L298BXPQL9U8fkMTsQS99Sys6AHNWVJ13jySud446RKd1AOM3
PpTCnZJYe4/62KeBDqC6WZebQ00SX18/VC+60gHGJT63PheRxE7myxJPdDqB
12TT2d99Engz+wORzRmdoP/VNsvkLxL4SfLGq255neCoW+xBQJfAzNjLE1eL
O4HG4PEtD6ol8Ohj7rMirZ1gsqV7WjtfAucM0OfZljqB0139733ZElizTNyz
hpsBOgzTuyMzJPDeoJ6iUyIM8O7Dmc9dDyTwF81TCv+UGcD/5ffb1wIlcOGB
n9e/HGaAUedDVzd6E2wfECFhxQA2lHzPVg8J3FlasFv5NAPsSvE6RnGUwPUl
lhr5lxhgMWJGptpIAl9b7/TiXBwDuEMboYtAAgcYqcaRHjJAz1LpGnm3BP4g
066Y8IQBPnpfG3HdKoGVIyxb5l8xQOgZzv8ExCXw8nuTP071DFDYZhzTKSiB
w3JeZzq2MgBrb7RXOo8E5osuEt3SyQAH5cjbty+S8W3DibptAwwQGH1KeH6K
jPc/O/PVeYQB8pbS/+LfZJz4uMPI/QcDrP+qUnh8iIxzNWJqByYZAB7yiNvQ
Q8ZW/nsKjs4xgHfp68sjncT4zeje/SUGYCbv2uFfT8ZOd6/2eXMyAR9PiCio
JGN/u5NKMrxMoOdX8Y/3Ixn/PHeMP5afCTJOmL559JqM2WinXIdEmIBWGRPv
9JKMOZqPvfsszgQcmh3eW56RsVbuTgs3CSbQfip5YjqNjFPnbm4akmICFxF7
rU/JZHxQSGGTygYmeBiWKR4ZR8Y6W2wMdskxQeOfkakjUWR8CH+zlFRggmWH
zZ2SEUR9GX9OV1GYQL3l4rvBEDJW2MF2yECRCc4YvEl8GUDGB96Kc4QrMUF8
/qyv9xUyXj53PyhRmQmqZfSt9D3I2KLc4InPRiaYvRumw3WejEMe2p9TUGEC
1YUqcstpMpYLTShOIdj2At9s0kkyXl82dbeX4OgvZszTx8k4P3mp9TfB6OCD
4k1mZGwWnxTQRPDke0byhBEZG0dI+fsRrLxRJqAMkHFvm/Gnn8R61omnbcJ3
k/Gr2BNQneA7nM90D2uRcUNF16QBUV+593dJ0jYyjvAeqpck6v81tGW+V4WM
K0ZHij9TmUD+2OWu5xQy/lpdV7SD0G+B35V6yZAxeU/vf5flmSB8+8JDXRKx
/g7Ws2BZJniXsSeIbT3RP1ve28dlmGBUKPxUAy8ZG176fmRGkgmkQmp3x7OT
8Ypx9OQ5MhOY/uKXsVsi4XMcXm4ZYkxwze7ootIMCc8q++RnCzPB4O6u8vdj
JJwWk+dNWscEYi9lU0NZJCwi1fEjhJsJDKXOBhv3krB8i4DIW3YmeDH7Q7+7
jYQlak4fv77AAF/Pq8tmNZAwvPP9nNQMAwgyvJfdq0h48D8H4WsTDHD57dLH
5WISvvmgVClnlAGyFGF6TSEJ10fevuU5xACdDyJCYvJIODJcyme1h9iPl4X2
UjJI+Hie4lgEjQHYtimgA7dIWFa8TkS2hAGuSew7fSuUhDeOszpzXjPA3JrT
Sm0ACa/X3UmbymWAP+05+qbuJKyq3uzdmULs10D1UoujJEypbn9f6MsA1k4W
NvEmJCxFvRVi7sEA7Ye9Zzv2kfCvDV8fFpxlgHr5Ym0bbRI+Zr57pMicAYqr
9xQ5SJNwN8eT7G5FBtD8z9HiiRgJ346Y7LkryQCvUm78HRQg4dY75/OWBRgg
271mm/OqOM515dJTm+4E8SLmee7D4thktf1mTkUnuGhv/yzglTg+9q0faRzr
BGNGofvLcsRx3ZGjKyL7O4Hz9syhxSfieE1NtPWdZiew5RhRCI0Xx3m7v4UY
i3cCkxceaREB4jjmp/HtVHoHUJ6+mvRgnzj2fF2OxQ90gMy+NO0OPXGcPfrJ
epdGB9hQ97mDpC2OX5xPlVSU6wBijznEHqqIY4HytkSj2XawBqJiMgTEMQ76
ttj2vB18vffodj5DDLd2K1iLLNJBRw2l4EybGJ5P812Q/kYHzWu5NHKDGF78
deHQZBsdfPYplr7+UQzrHQ24IvycDrLsOvItn4lhd7WSqDUzOnDfIkRbuSyG
ZdgaEhkJNLDUeF3KQlAMX1mXdqVxuQVMc/Ht4eYRw+rkUz6SdS3gz97Ys+Vr
ovgo13CywIMWMPgmPU95ShTvc4t/N67UAqoflxssdIvia55ScTFGzSDaffpM
Vq4ovrjVNakisBHI8l94Ob1fFO89f9Iq+2ktOP25OVrRQBQ/MreT1bKvBU+9
d1y20BHF5lIj7RckaoFKz+LOgk2i+FILv1PT3RqwveB+9TlBUWy2VfhOiGc1
2H/k7UA7QwTzlQST5RQrgVv8KrnogggO++cyfP55OfDQUePukRXGnJo/Mp9c
TQHndPtfVFUJYCMjIf2szVVILVBvzSubD9s+X40OQR0I9x1RG07mw6H97R9M
f3Qg6wPnrGzu8uGLJw/3L4l1ovD10fnAiw+3nNvsxOfSibqz+2xEdvHhc1U7
tiF+BrpDv15Y1MSLB9Nv1JgeYaJRtbqz05M8+Njo5CX5D13oWlxP9IVvPPj6
tMC3nMEuJDb7t6T3Cw+OKpce4eHpRnsrpNbXfOTBde+Y3GYW3SjJxr08KZIH
Z1Umxg+yupFhhJC4rgwP/pQ1VD209hU97TtRHbSPG9/4pKDRJtGHNEc0Fzu1
ubFqpGxTsHYfqh4X1dBQ5caf+G8FLh3rQ6Nzbamj67nx5tbgVe/oPqQmZuZz
opcLF+bQffXX+tCbg4aK2wK48NcwCcmFnn50wFzp5B13Lrze+BaldLYfdZ7g
iBl24MLv6q9pHRQdQLNn8MIjQy586umm661GA0g/2IDOI0bM9+2P8N2CAVT9
Wvv6YAEnXpgdEN69axBZFYsX62dy4r2Fj3o4DAfR6MfJn8kJnFhEV8n6zdFB
xNdYaGN+lRPf8/g5VuEyiMxHtm4vN+bElVrudzMTBhFTamN/AosDr/vucMNw
bBC5KnCR/jI48MVil3z7yUE0v3H4kGkDB97BOzF4cnkQyWg9fc9WyIG3Di4K
rggPodPmcvcvhnDgoCaNxn86Q+j7DbKBsRQHZmTZPwq8NoT4Q17/TeDnwCdf
tTP9bw0h9cBDzwaX2bFpv1TC8Zgh5O8Vwn91iB2/cxGWz3oyhHjsvnUV5LHj
N6UcLzPwEFKzDoteSGPHBru28kTWD6Ejx6ThwVh2XC1+UMKUNoSSjM1zB3zY
sdlup7+uA0NIWfu9n9gedkyLGZqbWxpCJtuPbnbczo7Tjs3bV3KwkKfaj958
Kjt+Nffg04V1LPSOImdoxMOOHR1rNhySYKEDQrfEAtvY8C+/AV5rdRZy4VOo
ra5gw+elAzhWtVgoirMsSPQdG/5GlbC+sZuF2hd+DeY9ZMPs30M+SRuykNOo
5eu+s2zYQtA8IdaGhSKH/jipWbJh+S+KtiL2LJTXe0ci4CAbFlD88cvjDAtN
tn8MEdnChjO3b9359gILSbRa73CQY8Ojq34tGZ4spNcwMfJSmA0XVppOOl9m
IY6wQw8jx9ZQDJ5+eT2AhUz9QtYUWtbQLXFrCvMqCz3wKHIpK1pDPEO2P7lD
WYhyUlrn19U1tHlSy3T6JgtdOGKedstxDaVnnKx+E8lChYY3OBUM11D0SIXj
4bssBHb8oB8TWkMKmcxG/hii/k1yu3/+W0V7nqXe3BHHQq1yxzIjmKtI/mnX
ds14ol7SLV75D6uI89RitWAiC53mL/MqebKKVu3rdlUksVAO22+GRcQqWq95
5sbRFBb6PUvZM35hFRlcAkklD1lI+7dl9k1zYnzvbo+FRyx0bfiOgJzmKsq9
H7pISmWh6u6P3sUSq6iLM0WPP42FBGkT3UeXVtBeQ1elboIta5X3/RhYQUdm
tr26kc5CqR9PvgivXkHKgRE0zgwWYr2JFpZ9uYLC2B0jHQlWe4n9399fQV1F
gvWJBHs/me474r2CHhToxj4juDxJ1WjMegUZqX9j3COYz+77OXaDFXQ+uE7k
KMHWlJxwGeoKGq9yV/5NrJf9zfmpFs8KapXZJOhC8GSeEjb7uYzu3HhZVUbU
By+z+s/TltGZ+amDY4SeGJ2nK6Hvl1HPfYf4f49ZqHfRUfbh42V09WJ8FoPQ
vxnL6xeFLaNbvxN8Ewl//G/1nWp0XkZqaaXc6oR/1aZpgcOHllHO4YITWYS/
YiJ2Kcvqy4gmd9n+XwILnWFIF5NJyygjxlZ+A9Gf/x53daovLKH1oZIPFYj+
LTumTBn3LyHp3S/qV++z0MNx0o6rL5aQUsrMYXOi/6OvO44m3F9CJXpnMj4S
+dD2i/cq8F5CtiWLOTwRLNS2JlzQb7CEhDTq+9SIfMnWtDbOUZfQpWSr9dzB
LOQedf+HCO8SsiusWygj8slDFth0gL6IDBw+rntH5Nfya4ORffEiMqce1Fog
8p315I6zX+oiurBYSZV2Y6G9ajxZuecXkejAMbsfxP7wA+xygosLaFgw823T
ERaq5ML6GwcWUGjpQb/vh1hIpDHUdm/1AirP4aP0E/uvwHI55XLMApp+bnrI
Xo+FRtzmxBiKC+j7Q7cXaUospLm9eMcf3gX0wHGnV5wcC12f9rXg/T2PSEJP
rR0lWWhD2OT93SXzSLvq3JsYfhY6nvibL+PwPMou+Jiu/XcIZZ4q2FSiMY88
Pu4P5RgbQn/kPQ7SyPPok9lWWv7gEIp6OXaTY3AOlRkyZuLoQ6ji8/Cqi+8c
Yr188jinaAhp/Oie3p4+i4zDq//wewwh34ltmyUjZtHgjZRru52GUOncDYdV
91lU7ZQ7b3JqCO3jUatt3jWLzk25/+M3HkLHla6muHXOIJ6fLzxlqUPIz0FG
75nADAJNWrHhbYOo3NnLK2pyGt0+G9RRWz2IVj0qs650T6Mpf+KkKhtEkVfd
BWDuNLJtktUceDaIHqaU9/bun0ZLwaMHHPyJ8XTbMImrU+h5WLQJjUyM7/rv
7cqZKbR35vth/XWDaP8gx9iI8RQKE5OuFlsYQE1/8izekqdQnfS8TkbNAOoV
WKJaFE0iDCO1eewH0JpRavXdsX9oPoS9Zl9oPzIs71m3Yj2B6vbuf1/yqBf9
l/d8d53+BHLx0zs/59+LpFIvuT2gTKCr6JrJ4olexJzjiT/c+Rd1ac7Vmgr1
oo3B1iLpi39QbNifJPmQHlR5Y0YQGv9G4/EcA+3HvqLlGC2eyMEfaMBr/aUk
+hd0+eXreVHxYVSTnvDz7J52pLHe6+b+QRaSFBhSlRVtR/+8t673ecVC/IpM
13cjdORt8FKp05iF6v/e0bl+j4782rKOJBP3mEqsxJaYLzQ0Nb7lkE7zAHq0
2c79cUcr4rk5n3nQuxtpywpPOU/WI2sXpaft1xqQr//Cu7v2ZaiuuTtK60Q9
OMVl+ImqWwouBH6ts9vSAL7a5kJDwTLAp9zDFcHZCLKOJO7aMVQGTIN7Qzvf
NgF3+qzHuagPoHnzgLcfqQ2o3Fg2nuv+DC4c8H7VM94ODrM9WFItrgSemQFJ
cgXdoMXSXISm2gD0tlW8sUgZBqTR8ubF1+1Ap5OZ/LlhGNT7a4Zc6mkHGsG/
rm5dHgYKMcN7K3g6gEqD5AG+syOArn2obNG+A4if9+pAat/AKcHYfx95O8Gv
tA3T6p9Hwdv84iw9awZ4IuivI/TtB6D/EuwWZHwBj9/ekw6WHAfdmRmccUtf
QLLt05WxQ+OgbCx/YpTaBaJfNNdU/zcO7Bzera736gKBhkrW1wJ/gpdxPP6Q
qxscv0bz/ynwGwQ3b3P6s+kr4PAn9zpLT4DIL5mZxaa9wPZMXnup9gTYojR5
cfxiL3hjChoELSbA2jHlxcG4XuCk4Fb8LnICUKR1NMjMXlBZ/zGOa3oCGGv+
sI136AM3NzgbZbf+A8HKd7qfnekHvdwL+vM//oGdkd+3DIf1A+2J+5pm3JOg
TXyGeyijH4xUlyhM60+CNc2Ak5K9/cDQS2DxwMtJ4NJ3qsX1xADgqnjz3/DN
KeD+9qXdG5lBYJ9v/Fz3yRR4H+VhvUt1ELxL6k29Vz4FrN5trU/VGQTO7jx3
tf5NAXmf5y8Wjw6CGnHbczdPT4M35tdSyDcHQaQLu5TS7hlw49xO0XzWIOi3
SF4fYDkDpBuG55d/D4Kd+lu4my7NgFdmT/vUFgbBqLDVpHfODLiGrx2WER4C
B8teNFeKz4Kru5ZuG+0eAryCFjec/swC4Xtusp8ih8DJTbZ457o5cDHz3b/U
2CGQt995jV95DtzoKZm3fjgEjgQFhrw9NQd6/fc5nX05BJJHM4O4aubASM8U
tbZhCIyx55d2DcwBfu7j7LfoQ0BP7v1cweIcsD95O1ehewj0n2jws9KYBw4c
mtJj34eASsW/Kzmp8wB8HDlZzckCgb1LhVeL58Fthpj2GX4WaJzjnjhCnwfs
PvzXv4iwgJe6jNcczwI4FX3b6KQcCxSn7nc38V4AUdIBKU+1WYCvxOyl7P0F
oNZ1jldKjwVs263HJnIXQNIjvlw3wAKrfB4uj/oWwM1hTbuMQyxg5J/gNG6y
CJY14v+Z2bNA8oP0p5/PLQIn3kDdtDMsMFaQOxgfugjYE2Rv1DqzQPTwh9P6
7xbBX41fwgWeLNC/WpMu3LYIlKRFjrheZgENGVrv8I9FwH1h5MaKDwt0WozY
RissgXBTLVx+lQVUPP88OqO3BNqlzWqHQgi9t+e7tK2WQFDtsbLh6ywg+1nQ
pi9qCfg+4jwbGEno7ZZILnq+BH5YTokL3GUBPE1h3MJLoEbEpjDwHgs4b9E5
oT67BB4kZz8fiSX8OAjiOUSXgUyv/xrrAeGH0yE6c8syeCoQY/gxgfAj5IRI
/sFloFS6w/9yEgsUPHQ4GnZ2GQj9WUlaSyb8eesac+LaMsjaPPzc7SELWLRd
admUsgxemqm8+O8RC2SNBwsuFy2DTQlnnrQ+ZoFp7sjDtOZlEHA7LKYhlQUO
UuOisr8vg9CZ6sAnaSzw0OBxQyDHCuDvqz1rkc4C4zbZfOZyKyDx3CXzXoIN
fP4zpu5aARPVy+BABgvExJRGzhxfAUEH2PfeInjwZWVNw8UVoC95ziyLYM2a
Zq6MOysg3N7+8mOCbw4yD3g/WwGO7MGvLxLcX3b4YuDHFfD4Z9h7RYL1EnBy
KGMFZFb/Kigh1kvy1MERf1bAEQ2+1K0ETxjl/YjiXQVJvCdv3SDqNVNQEH9A
WQUDJk+vFBN6cucTDFJ2E8w7dr6J0MvRzueSfnwVLNpfuoAJP07nh8Q+8yD4
RFlYEuFXecRk6cuIVRD8NfKNaQoLkE+7sl6nr4LcV194Bwm/L+v2ChQXr4LL
xuORVoks0CxyTOdj2yrwatLXzY9nAdXxmtOVY6uAa+o2ZSiO0Feld6eefQ1o
LtSbzsUQevyVezq11sDfFNOb1VFEXo8+4uoxWwMVl0uygu+wwD/V9epD59dA
1rUrG8WJ/Lzombv+O2UNNKjTg/6XL673nnlThWtAqCThtGwoCzjGDHUsNKwB
NZ6+Zp1gFpDY16TCs7wG9qh+8+L3Y4FdQhTVSH42aHHtv5KaKywwGvTVYJ0k
GzQ5L/7urBcL7D9x1EVYgw0emXGd1ndlgQXu3WUbnNigUHhm91UbFsjxnmrJ
8GKDJP4Vzj0nWMBy4BWLGswGz3Qn7Rs8wgKFpYqCqols0LqjWa3RiAVcPAQd
tWvZoGJhvsY2TRYgddX6lLSzQTaTDK+FrSxQaXjjjt4AG+Rbu6Weu4kF5ORn
i+A8G+xzXb2UK0vsN9oAl7kaO+Sq53hpwM0C4XseS9N2skNbv4vZEmtDQCPP
Uv3EAXYos9P+Sfv8ELh3s8HmlD07DLD8xpz4OQT273ybdz6GHc4xt2yvpw2B
wtRIi9BJdjj8istqMnEINIlHfhdm44AB+uWRB6OHwOi9W6FPhThgAkO9OfDm
EJC9FlFQrcoBk4V0FgOuDIE79uF8Ao4c0HYovHH48BA4IxeKU5o44LerLVfu
Lg6C4KQQm83dHPDyU8qLpr+DIFko5E/5KAfc/gW//T0yCJpXgmX72Tkh/ym7
GnrrINjVHxSovIsTPvqL9OSeDgKRJ34aRdmcMPFFZmofGARbJP3q9r/hhL4u
8WJbtQbBwVjf052IE1o5eV2wVxkE18J8oue+csLtCzkG5wQHwZjjlbE9olxw
6sjbNpn/BgCmXMxsDOGCCu5Uk+8t/eBSlrPIiDU3XArLLlUZ6QUxQY/SYs5x
QyPHh8+ma3rBfxatqrsvc8MJs88+ybm94M+q7r6Yu9zQPXfii7V7L/C0E/De
9ZEbJv43dLT9dw9wJ73piKbywMIkK/bJX1+BS+Rass4vHhjlZjvb0dIFTrs/
lrt9gw8q2XYoLql1grvH/HdrpQlAWfP0wnrNasBFShoNW1wPJ1J5QVtuHBL7
E7pejFcYtpp8/8emmoCo9Rd2ZosLw0Wp0VOcuUlo7zWDyPqtwpB/v0Oby9PH
KGhkeKOoozDMEuV0iDuQhf680zyfVSUMfzEdPkiuK0C/1MauOB0UgUO313mH
3ChB05J9t/LNROC69H7+GnIpWuJqfzR9XASu/teVm/qyFPEPfKiIdBSBSx9z
Y/61laFNCbGi+YEiMNau6w1V8iNyWtpZNJUnAvlz9ygfN8boS9OtiQhhUcit
ec4o5H41StybbmQlIQq/ecw0STKq0fGid483yonCvQ1db+xla1Br8rBhrZoo
zK3aAodf1qDas/se8R4UheQOs2/tuBYVzy3vi7omCvN2B8586KtHyUq+CbE/
ROEppqbJ97ZmZJl8b8xxQhQmchncLRNoQWLrnu3RmBOF2+V2C200bkExf+jf
aVxi8HhpFHvtxxYUWbbdQIwiBluMLdsVn7Ui/6M/RxKtxeCdnHufJ7fRkFWw
087HVWKQbP7QyO4THSWnk3jmGsQg79368+PtdMREtYwTNDFoaSKqbTxGR9Zc
W/yE+sRgzrSHlZtYOzp5f+rt9Vkx+KA7S97MuR3ZPonY4bpZHEoIHfp1ebUd
Pa7YyV69XRyuvza4t1mkA/UMj9EoO8Xh0w83HKcUO5C9qvnlr/vFYV2lybPs
gx3IoYj82txeHG61gVfj7nWgM1U5W7VjxeGvXd8VggQ6Uea3k8txSeLQUHpc
LVKmEw3xCjT/ThWHJuk4zWFzJ3Iyu+SR+0Icloh2eXgc7ETnGLp5MpXikDdt
awdbaCfKnvsRFFAvDhtNfm11vNeJRqTTDnW2isOlMyzX2w87kfNpth/3e8Rh
rmyzsc6bTuTyvX4T+4w4PD8no8s93Ily1gXPOSyJQxj+Rr7oTyf6vmVbXTk7
CY49qbmustiJLlx+4OK7ngRLX+yIuijCQG4Lp55/30SCiVs5cjz0GChvg6Cf
oToJ/jw6fczJkIHG93w2fKpNgiPeGRqKRxjIPVxxxHYfCYJOD4+VMwzkKfBT
sdWWBLPu79GlRjDQz6ByLoGzJPiu2XReN5p4f+zuqLErCar03f8mnchArjWq
eRU+JNjhJ6EHnjHQqNb8vdUgEhyUVEsPz2Mg56y6i/rXSdAoR1j5QREDOYW5
7HgfTYLOBzofCSMGGvqtIz4ZT4LaQOxOWA0DnbHnnlF/RIKGQwMPy5sY6PTu
7NIXz0lwV2vzxvgvDHRqagikfSbBe9lAoe4XA3WdLaJ2V5Pgjtvbj8X9YyBr
2nVOiSYSXNsfWqo8y0CWrxTqYr+QoObwut2vVxmoY8PfF819JKi00dT+OQcT
HY/6HLVuhAStqv/Wu/AwkYWrw5GbEyR4rcw05bAQE7UxtmrgWRKMMbvLc0mE
iY4YLouuLJPgcgD46iDORM1vmqZ2c5LhujJTGSkJJjpMTWX4ryPD8pfzrelS
TNQY617yVpgM8/t52P/KMJHJ6u5HE2Qy/F6ZVSYgx0R1nuuCt8mSIcnXjWNa
nokO9nTZuyuS4VSq67dcChPVHHqxN1eVDKNMpS9uUmQiw9IAyog6GRa2umV7
KzFRpYoxB1WHDE3vv02+q8xE+5IkRhz0ybCoCx313MhEmHO05vE+MvxcU9sj
o8JEe73f534xJkMd9kvGSQR/Goy4SzpChmXPWp70EGxw1NLjmCUZmnG5TP4m
+MMnJfMYWzLUurfZvJlgva1T6k1nyPBueMBnf4JLH1eK8LmSYcWorNVvYj3d
dfGThhcJfTqWFA2CiwPOdt7wIcOde2u2A6I+7VGN4s9BZPj2Z0SCDFH/W0u2
h0thZPiIRLavpDKRZlVb0K5IMpQ2cn68k9BftOOJnV80GZ6IanEMIPzRyPTa
8yaeDNkNpD5HyDLRf+v3Kvx9SIZ/awLqThP+bgsRYt/6hAx9Lt2L4Sb8L/jZ
y7rwnAy3KJ1WCSIzkZptQfXzfDJ00nHJKhNjIlXdw3cUSsmw1oc35akgE+U+
l3G3/0z4dSB716F1TKRCGj/8qJoMDWGIyGduJlL+d0dYnE6G141DyoSJPD1z
PPnv6Bcy7GtdKP61wECKrZs6ovvI8NiS/YGUGQZSyK9N5hknw29317lYEXm1
fFJa1jhBhhEL1tTlUQaKSsjrjZkjQ0vywozrEANNB8coSnJLQB4Pmnssg4HU
Ll836hGQgBHqumaH2xjI0dn7whMxCajTY9nQXM9AjWbW/22iSMAgHz0F6gcG
YttnQv+pIgF/d+fumX7LQDo6etOvt0nAnj0SN+8XMFCmnLzeLn0J+FzVgiSe
zkD+f77VmFhLwPlEowtewQxUwPoyJuggATVdf7b7exP7k9kgQD8nAbfWeiQd
dGMgM/Tq2KkrErBxLKfawJrQG+fX5xYtAdPTL9nf2cZALTu4Z6IqJWDKI5NX
lfROxKEyJ3m0QQJubg38aFnTiXbJ/NATp0lAHM4aLyztRFkcLddT+yTgpxsq
bvUZnSiwI1GwYF4CdkZnnw260ImU/ZSVW9QlYdCzoFiRyQ5k6yZh/EBHEm5M
Kr9tz+pAsQ587lYGkrCf+n3Ur70DLRr9et13SBLuBAkfRd90IJrEO/0/zpKw
s4UhMu3VgYJLD5wQTpWEv99RtFMG2pGmPW3C8akk1DjSTZdobUfja/YxhbmS
MM8pL/XiR+J+MfZvOPZOEsa8uBf+9GE70mO+AIktkhB5FdqoHm1H81NCW6XZ
pOCSUOjs4Ds68t/exaV0XgoynMHRCGcaUu9wzvLxkIJhV3a6nDhCQ6P+/0D1
FSlodptWxLaLuA8/8wefD5WCw/ynv87y05C2+Z5/uSlS8IJhinnh6TY05Z7V
t7VRCs7/UDMzHWlBl3M8i3dul4Z2NvzVFlWNqL9tQ9L6ndIw6UuLueS9RmS+
0OgzaiANa6MFXJ8eb0RqZpt3JJtKE/eL9gLHUAMa+fctf+a8NMwJOhm7fqke
2exxfPouTRreub0lcVC5Du3tPBatyS8D2+1QprllFRLk0HVS/yYDP9uc/uif
WIyMLlomqSXIwv/Uzz876/cM+MZ/YLv0SBYayUQNFjtmg+wSRc+3T2RhHJOz
JvfQc8DB8W+/QYEsDOn6Z2Apmwtw8v0J8xpZqJUWvz/jYx7Qw7WHr8zJws5O
J86UqUKgLr6bo9RODraaFyso/SwBDrsyLy6flYNFJ3kLSSdLQbQDbze8IAc/
vMt3flddCn7mMl43+MpBdkPukMW0MvDCwNuh574cVA8d8rx96ANQcskvXUVy
8Iv9QsSXB5+BVJncJSNleZhywz8x1rMSrJ7L3SC6RR5OVejVKTytBCPrd9T3
7pCHdzcY2lxiVIJCZ0OqL5CHayVzN0z3VAFjEY+OLFt5+Cc4pZ21rhr4u5bq
sj2Qhztfvk/amlwD7MX2jzSlyMNNvpIV/rU1YP+npriUDHlo92q/b+BsDVgv
PvBDvUAe7qnZ9jjTqhbkfOZOc6iTh+F/R9UDROoAg3yC7cOKPIwPHyn/GlAP
ynFvQSSXAgw9WvHH9Vk9yPRwOXVcQAGa6Oa8ed5aDzwrgt78kFKAgxm3zHYo
NwCui5nOUtoKcFvR+vyQpgagXf273s9dAZ5p1jdM4m8C8d53Hmh8UYBW0Q5W
hiYtYLG5oPROnwLMVfYOZXNtAU6b6AODwwrwcFhr1cVbLUCrV1r9wYQCVDmd
W2pb0QLGs6y+zXNRoCpXsUCgTiuIFvx+45Q8BTYKm0zHrW8DeHdQ0i0qBf7b
EMFupNoGpl0EXhYpU+DWC297cva1AfuK7bR1WyhwLGxur49PG9jmHyhfrkuB
In9DRzd3tIHWgXUfZI5R4OgVtoN++2iAQyit9aAlBaJ9U5VvD9PATj11lrcN
BVYedP5WZ0UDGYnH1zU5UOCPHtx12Y0GLh1KtQl2p8AgX6vKqhgayPbf5pF7
kVgv8kjRqxQa6HqGQjsuU+Bm3kvNnpk0AFeHn28JoMAt1EPH3YtoQOTt1ume
mxTokHV+31k6DRgOfublu02BdVyftKa6aCBQ6NgG7SgKNJbdNXVqkAYGXf32
R8dR4IfR30XP/9BAkeznOIN0CmSU1W/XWUcHo4cssi9kUmBNUeNdT2E6kAlg
lSQ+o8CWNWvPQDIdhNN5Bn69pEDB1tRCISodHI88ui29mAIv6n1J2LaTDnJO
TRwqK6NAzrAzdyf06GBh6wMXxkcK7EjTjbsL6CCzo/2JUBUFfso3rdljQgdT
OT4fN9dS4MS2XX9OmtHBwaukbqMGCnRPYcqZWtDBb4q1WGgbBSp9LIv6z4YO
4PSs+uN2Cixo+lBDtaODxLqUw8UMCjxv8YPD4zQdfH+860J7FwV6HCDtjzpL
B3pe3RF/eigwvevSzTBnOojZd/Up/wAF/r4YV2fqSgdDpA2fVVgUuObvIfzL
jQ7ufLCfOz1Ggc4DAoWFXnTQG7MiHvyTArvJTwU7L9PBdqcMjZQ/FDi3L863
xZvwQweYv/1HgQpWb8fTfOmAyTfo1jZNgS/7DL33+9PB5t7rkT/niPm4Btd/
DqCDa6+pz3iXKNDO9Xq1cBAd0MIrkdIqBYavD0/RvUoHStbnegE7FTrufxqt
E0wH/pu5Fuy4qPBr5OKLddfooHE5mxzIS4Vm3vyTbwmWoxlpJvJTIUfKq4va
IXRw+dnoEaIxcL0bRfEewdX+tz2aRahwSXaNXEqwpKnqnTFxKhR/YGTxgWB3
uYZsLkkqvLb5aFciwZ8n3CooMgS/Zr43JFismr/fQI4K9+2cnWgk1jufkr94
kkKFWssq8ZsILnU3k/RTokJ7vX1ZtkS9gnt/az1QocIu6WtqzoQeR9EYi1eb
qbDv6kVtQ0LvmxH1iw1bqTDy67rGRcIPntK2u9+2U+HA1uyZ24Rfp+5dzmHX
okL2N78rfhJ+FpwWrZLbSYXnumZ2q/jQAZvmm4Hdu6lwUkjNTfcKHZzgPrFs
ZUAlzhMrO4VLRP66pqS8ARVqXH8q2+9JB4v5iTox+6nwl3ZimY87HZiH6RzP
M6LCsymixF6gg+mNAfdYh6kw7aHQ7r1OdGCyIPli9QgVlm7f2LDdkQ5Sm0ur
ZY5TYRjPQuA8kbf9Posrx09Sof8Pdh9hKzpIOpgqc8mOCtVK3vY4HKODMWkD
3Xunifd/yTy9aU4HsTjkcpUz4QecCbcyogNWgvz9AVfCj/5KzL6PDna6opdL
7lTYcnYx/ZYBkTch9mGtK1QYdcMohKRFB2p2EVbZIVS4UdyDbiFP+HOlWIzr
BhUu/C5iQCkir7fH2s5FEPXmf+LmEKODb2/NTJXuEf1j/D02z0XsN0EyyHpI
hZdk1RNKxmigVdF4mT2NCmtUX4xrDdHAyq6gsrNPqNBO8Nfh8G4asD3fp0XN
oUJVfcazpAYaIH9+rpr5lgpN5IMEHucS50vnl29rxUS/ABDJy6AB7/F1zxzL
qXC6ZkrmfhIN0CS85BQqqNBdfa2+OZwGoi7tFMtopUIF7nmLnXY0wEatW0r9
QYXdvT6ddE4a2K67ULr0iwq/1CqMGU20gdPmW/ztJqgwQbmbHt/VBj4ExU7I
zFFhW97Gn9tetAH/dptvj7gUYXC7/DHvA23g582x1hQFRRgE5+6GubcCmccy
0XOKivCR9aDntHkrMCk0O2SjQjwvuuYrvaMV5PQWVklsU4TVmS2efrMt4IxO
UGmSniIsPJ8VFRbSApij67ISrBTh5pAQY62QZlBreTet7KQipM7P1ZNPN4Pi
Sr6UATtFGLBXYkfp3maQnMEbvcVJEeby8ojsXWsCVtbc/lVeivAy26Esm5Am
0FnDZjp1WxHu/R78RMSrEbRnz/07Xq4If4GrRarK9aDV6ds+MQUl+GOi7P73
+UowxJU7n6SoBLmTY4aT6yrBdM6F19IqSpDNed8/cnIlkP75U5a6TQkyleRf
3dKsBM4+k3Pb9ZWgse49oT1uFWDx5torcxslKDeTKqyRjoDKc2mZu7FKcIin
Ff5ZLAW7jXtogglKsGuENvhfTCkw+5F2Oy5ZCUZ/lfupq1gKrmyjzKSkK8FV
adKtFyYl4ON7FVpOvhK8UElpV014D47XakVW1ynBAPKaaJvCG3D+woyBSZMS
PNdAt3lfWAQC+UummlqV4MVo4UNB+4pA+hG9sx0MJXjr8lLkE6dCMMaEBqxh
Yvy5Y+1k41dgMZBj6vx3JagnSObkcy0AQhuqX/4YV4KSLdtmGyPzgaajseS/
f0pw57hfb0vNS2DEvq7Vd0YJ5gvYbRX/9gKcfNYYMT+vBCcjJua0uF4Ad6No
/WvLSrDCK+W3plIu+P/v++D/f98H/g/woA09
       "]]},
     Annotation[#, "Charting`Private`Tag$36487#1"]& ], 
    TagBox[
     {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
       "]]},
     Annotation[#, "Charting`Private`Tag$36487#2"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-0.5818651005951258, 0.5818644992766403}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.707502783717319*^9, 3.707502793094507*^9}, {
   3.707502855404072*^9, 3.707502876885373*^9}, {3.707502909433444*^9, 
   3.70750291146299*^9}, 
   3.7075031508632593`*^9},ExpressionUUID->"c98803f2-6b3e-4b7d-8b97-\
ca155feee5ef"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"LinearLayer", "[", "10", "]"}], ",", "Tanh", ",", 
      RowBox[{"LinearLayer", "[", "10", "]"}], ",", "Tanh", ",", 
      RowBox[{"LinearLayer", "[", "10", "]"}], ",", "Tanh", ",", 
      RowBox[{"LinearLayer", "[", "1", "]"}], ",", "Tanh"}], "}"}], ",", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", " ", "\"\<Real\>\""}], ",", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", " ", 
     RowBox[{"NetDecoder", "[", "\"\<Scalar\>\"", "]"}]}]}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.707502311278824*^9, 3.707502395447391*^9}, {
  3.707502592759735*^9, 3.7075025936617193`*^9}, {3.7075026311494837`*^9, 
  3.70750270744456*^9}, {3.7075028424293547`*^9, 3.707502846413722*^9}, {
  3.707503098742947*^9, 3.707503099949152*^9}, {3.7075032497425528`*^9, 
  3.707503255421386*^9}},ExpressionUUID->"b5c3ba0e-c2b7-4e05-be4f-\
d830341f5959"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = Association[
        "Type" -> "Chain", "Nodes" -> 
         Association[
          "1" -> Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{10, 1}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 
               1, "$InputDimensions" -> {}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
               "$Dimensions" -> {10}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "3" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{10, 10}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 
               10, "$InputDimensions" -> {10}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "4" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
               "$Dimensions" -> {10}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "5" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{10, 10}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 
               10, "$InputDimensions" -> {10}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "6" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
               "$Dimensions" -> {10}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "7" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{1, 10}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 
               10, "$InputDimensions" -> {10}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]],
            "8" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
               "$Dimensions" -> {1}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"]}, 
         "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
         "Outputs" -> Association["Output" -> NetDecoder["Scalar", 
             Association[], 
             NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
        NeuralNetworks`Private`NetChain`opart, 
        NeuralNetworks`Private`NetChain`part, 
        NeuralNetworks`Private`NetChain`selected = Null}, 
        DynamicBox[GridBox[{{
            NeuralNetworks`Private`NetChain`MouseClickBoxes[
             TagBox[
              GridBox[{{
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Input\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"real\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Output\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"scalar\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 ItemBox[
                  StyleBox["\"(uninitialized)\"", 
                   RGBColor[0.66, 0, 0], Small, StripOnInput -> False], 
                  Alignment -> Center, StripOnInput -> False], 
                 "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
             If[
              ListQ[NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
               If[NeuralNetworks`Private`NetChain`opart === 
                NeuralNetworks`Private`NetChain`part, 
                NeuralNetworks`Private`NetChain`selected = Null; 
                NeuralNetworks`Private`NetChain`opart = Null, 
                NeuralNetworks`Private`NetChain`selected = 
                 Part[NeuralNetworks`Private`NetChain`assoc3, 
                   Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                NeuralNetworks`Private`NetChain`opart = 
                 NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
           NeuralNetworks`Private`NetChain`fmtSelected[
           NeuralNetworks`Private`NetChain`selected, 
            NeuralNetworks`Private`NetChain`part]}, 
          GridBoxSpacings -> {"Columns" -> {{1}}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{158., {76.9169921875, 82.0830078125}},
         TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
        Initialization:>{NetChain}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{{3.7075023776552467`*^9, 3.70750239616991*^9}, 
   3.7075025943105803`*^9, {3.707502632797193*^9, 3.707502707890807*^9}, 
   3.707502846917511*^9, 3.7075031003423243`*^9, 
   3.707503258806217*^9},ExpressionUUID->"d9bc93b8-629b-43b1-bcc2-\
27d8f866960b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trainedNet", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", " ", "trainset", ",", 
    RowBox[{"ValidationSet", "\[Rule]", "validationset"}], ",", 
    RowBox[{"MaxTrainingRounds", "\[Rule]", "100"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.707502587653557*^9, 3.707502614324967*^9}, {
   3.707502722315357*^9, 3.707502755168301*^9}, 
   3.707502895185603*^9},ExpressionUUID->"d0a29ce2-f619-4e88-a2b6-\
f3e3649581d8"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = Association[
        "Type" -> "Chain", "Nodes" -> 
         Association[
          "1" -> Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`Private`DummyRawArray[{10, 1}], 
               "Biases" -> NeuralNetworks`Private`DummyRawArray[{10}]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 
               1, "$InputDimensions" -> {}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
               "$Dimensions" -> {10}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "3" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`Private`DummyRawArray[{10, 10}], 
               "Biases" -> NeuralNetworks`Private`DummyRawArray[{10}]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 
               10, "$InputDimensions" -> {10}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "4" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
               "$Dimensions" -> {10}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "5" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`Private`DummyRawArray[{10, 10}], 
               "Biases" -> NeuralNetworks`Private`DummyRawArray[{10}]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {10}, "$OutputSize" -> 10, "$InputSize" -> 
               10, "$InputDimensions" -> {10}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "6" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
               "$Dimensions" -> {10}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "7" -> 
           Association[
            "Type" -> "Linear", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`Private`DummyRawArray[{1, 10}], 
               "Biases" -> NeuralNetworks`Private`DummyRawArray[{1}]], 
             "Parameters" -> 
             Association[
              "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 
               10, "$InputDimensions" -> {10}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]],
            "8" -> Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
               "$Dimensions" -> {1}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"]}, 
         "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
         "Outputs" -> Association["Output" -> NetDecoder["Scalar", 
             Association[], 
             NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
        NeuralNetworks`Private`NetChain`opart, 
        NeuralNetworks`Private`NetChain`part, 
        NeuralNetworks`Private`NetChain`selected = Null}, 
        DynamicBox[GridBox[{{
            NeuralNetworks`Private`NetChain`MouseClickBoxes[
             TagBox[
              GridBox[{{
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Input\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"real\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Output\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"scalar\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
             If[
              ListQ[NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
               If[NeuralNetworks`Private`NetChain`opart === 
                NeuralNetworks`Private`NetChain`part, 
                NeuralNetworks`Private`NetChain`selected = Null; 
                NeuralNetworks`Private`NetChain`opart = Null, 
                NeuralNetworks`Private`NetChain`selected = 
                 Part[NeuralNetworks`Private`NetChain`assoc3, 
                   Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                NeuralNetworks`Private`NetChain`opart = 
                 NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
           NeuralNetworks`Private`NetChain`fmtSelected[
           NeuralNetworks`Private`NetChain`selected, 
            NeuralNetworks`Private`NetChain`part]}, 
          GridBoxSpacings -> {"Columns" -> {{1}}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{158., {69.9169921875, 75.0830078125}},
         TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
        Initialization:>{NetChain}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.707502618927853*^9, 3.7075026515099993`*^9, {3.707502716451316*^9, 
   3.7075027570061913`*^9}, 3.70750285252354*^9, 3.707502907610116*^9, 
   3.7075031478762207`*^9, 
   3.707503279658074*^9},ExpressionUUID->"7d620feb-5afc-41a5-b6f6-\
b9befdf2e3e7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"BesselJ", "[", 
      RowBox[{"1", ",", "x"}], "]"}], ",", 
     RowBox[{"trainedNet", "[", "x", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.707502758824851*^9, 3.707502792728901*^9}, {
  3.707502870483139*^9, 
  3.707502876538216*^9}},ExpressionUUID->"fd0ff166-a6b8-4bcd-8fc2-\
60fd9822b736"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJwtm3k4lN//xu1kyTZjyzKDJJVkSaHOqYhEqSxlSUlkSWWXUJJKQtbKkiQK
faLF1nKOfWcGM5F9SNIm++73fK/r99dcr+t5zjnv+37f55z556E6XTp+noON
jS2Mk43tf78h380n19aUcKlp9gex/TloNFhipmdZCc+3hD+GArnoiMjAXMmC
Eubs+t1u1ZmLKLsvr1yaUsLZPW4v1V1eosqoeL7BUSUsPEi1c75TgPjUv8jj
FiUcecruzSOnIpToe+bw9VQlPJmibhJ+twSt8G0+Yv9QCXOlZh1+P16CXNL/
WexKUsIarx7f/HS4FOnWhltPxChh1V1HWw4JlaGvks/PnglXwrYSldd0Y8oR
5cOPAOimhIdXZiaTIj+hfHafbDZdJUwv/v7M53kF2nUij+eRlhJm3L8ovJ9Z
gWqzhy7s0CDG/+1f/sZTiQaNLbY5bVbCHTc/ShW4ViKJmG3FVRuU8Lip5x3q
pioULjNWF8mmhFdOZuprp1ejk1oOPwUbFbG5Oh9zk1MdGo1INH9eq4g7Yrdr
JUXXIR9m0+s9VYp4IPFSVW1xHYoJ0vP1+qiIBZ5Z+/ny16MqJLnS9p8iZvPk
5Pv1Xz1SN2tfn5CgSFh0cXPfzwbEfd5YU9pBEX8L4c701mxG7ad32Pw8pYi5
2g8G6R5vRhknN1z7ZK2ItfcfkPpwpRntNPtbc9ZCEc8fHDNced2MXLRSTuUd
UMRw96G6c5tbUD379+v6asR8RiUtXsKtKHGJ9lxokyImne7Om1NrRWdmyhsH
lAhWieXVO9iKFsZiSBFyivjIpqOc48GtSI2280WzCDFfqvv1P8OtKDojss1h
jorFuc9FGee0oZMPL09vn6biHweW0gw/tSHleFtpjn9UrKSbe3u2ow19uqV+
LmecijV3bvyhz0ZDfzyZs3/6qPjMJ85L02o0VO6CN1R8pWKPh79z9uvQUOSZ
PJjwhYpfXa2B7oCGFCxDo3TpVNx6sWSD0QkastBXkb9eTcUhfEGCKkE0JKsj
cuB4BRXLfN7zVz+chsbUF12VP1Oxjs0qULtHQzcUW4vqS6jYvUS7NDaNht6s
8zcSzafivVasiaufaCiU84z7cC4V11f7qh+roSHTlUOx77OJek+NLa820xBr
Qq77VAYVL3yhjQz20JB4V41n1gMqvvvfiMKHORrCW57eiYih4p9lgvFqqzTk
GXYt2+UeFYe6vHLz5qKjWhWtXrVbVExZ7ZuMEqEjn6vr5wXDifnThK/aSdAR
pfWH+N9QKmZ8XhHlkqWjq36Zh98GUvG2oG1KfSp0tKkh2DXJj4ov+Q34Cm2l
o05Zm5sB3lQstnn7HfIOOlKvFvqg70nFfmYXXxTo0RFLLFit2pGKJ90+d04f
pqNYF+uDOfZUHG+zd+fQUToyKN/hdOcUUf8njebsE3SUfHbskdkJKj4dl29V
ZEtHB95XvVe3oGLmFn21RQc6muB7Qhcxp+KcycMz0mfpyLTQah3jIBW3P1/T
7nehoznOHRtLDlBxdkrC/XA3Osq2Edz3CFLx2Y33slc86OhY/nf74D1UPHOq
wfOoFx2trlYGOuhRsZlbbHfAZTrKP56RCHQJ/a3X+v296ehkTlAhVZuKt9+J
vWTmS0fci5bNnDuouHOL8o15Pzp6Y64x9m0bFT/ZMMsbHEBHjk8FuOrVqFj7
rcJCRyAdCc6MKuRtouIKZxlTzqt0VGZSqR+tTMV3vn+e4AumI5e0dBsvKhVr
nTAaHiFYfCLQx0KeincdM5JKuUZH+IBlrOYGKh7UK45UCKGjiynb80lSVLy8
5+/GUIJlfvLXzZKouDgg9/cbguv2jrK6RKk4YOMs4xPBvvEVq+Xrqdiw5PiX
DIKpo2ky6QJEHmcTx60Ibt0duDOMj4rHN87wDRPrBd8/cfwsNxU7bBDcepBg
1SF1rwMcRH/PdJiHEfUxtPmjNq5R8A3T5xdiCD3hd749512m4E0KewJ8guho
ey+u+DFP8OYSX3VCf+/2tL6mGQpubYuzR/50dPdmwMKrSQoef/dCTYXwb+eX
4+S4vxSs2Li3x8mHjobV1Hd4/6JgM69pd78rdBQXus7c8gcFuwY2Mx0u0dH4
RhwhNUzBVzZ/2VXoTkcpQamZiwMUHPxpTk3mAh0Ztvh/7O2lYE0k8e/UeTrK
8N02ncmkYDelMzO2jnR0uJ5P5GYHBRvfvq0pa09H8xtGtpynEXqCcve9PUlH
x6sen9vcSMHeGzm6nI7RkXLnSH9dLQVv8W8qVzano9kRdVuXKgq+KZzI9t6E
jh7xVFk8+0jB1b9EMAR05C4p1LyvjIKVy+OgAZF/A1Ub48H3FOw8n7ODR4eO
Bg/93CP3moLb760L4lYj8mOrU/Yhn4LZTjl/1VOmo5seYdq2Lyj43QPvyr3y
dKRyX3xLylMKPnnu2f43okT/afpSookUfCiB/5vJLA3tHbqV8DqOggslFk5N
/aEhkcm29UfuU7DhR89Uz+809E7cmfteJAVrf/hd2PSFhhatoye5gii4+btv
2J5iGrrT19s870DBD6ZSNJfdaMj2j4pJii3x/IY6/ZEjDW1du1ylY0PBx9tU
1XmtaKiNwl3ubUHBGT0W3seI81DCeVvur/0UTDql454jSkPPxkNuDG4i/GK9
EWm2bUO+S3XLocoU/Jh/V6s4bEMHBcUC5agUHMr/dnFFuQ2Nb8vxspWh4Ls3
s26U/25FGlda7ToFKTj+49yLr1dbUfDfPZ5xwwpYxa+n4ffNFpR2VncM9ilg
7fSmfTnnW9DHDg3nf0wFnNXO+E/EuAWtlijZH29UwNwNEyeW+VpQ+PV1ZqQi
Bezf0O+ic7cZRYkytjwMJZ673lnvEtyEHmt5/nwirYB1Ig6eeabagD48P+9q
Ia6A0xVimmXYG1CvpOMwm5AClt1sM2vWXY/kl4/1nGVTwPppDU2sO/Uoq1q3
Sem7PC5LvpnTN1KHXlpx5ue+k8eG45LpdnG1qDTgsfvro/JYPTDj1VxJFVJ0
vvK8y0Qey4kacvtHVKH7FiaD7PvlcbNQV3ahRRVy2jxrZaktj5/M5TbYj1Ui
gZ5j+xak5HGC4LbdT0iV6PTedVIHWHJY9sg0/cBZjDi5A2uYvnI4PHJ/XE96
GToSb0VZfSSLdQRG3B/5ZiPj9E9HTH7J4Ks7Xh8eFigGE/d7l7lGZXDGZy2h
UxHF4HHoUl7FgAwGK8zed8vF4Jfjbl79DhkcPElWlfldAuIV36Nt5TLY6rXh
UnBzGejPLdAQvyODYzQCtj6N+AT836SK9SvJYPNVG9cjbpWA8qwcP5aTwT1F
pu6dWZWgIaHby0ZSBr/zTErR760Esn6STTR+Gaz6W3ZP/pEqUKmbcLPqnzSu
HFixYNOsBus/RU2/QNI4PWSLIu9kDcipC2L62Enjfmq6CDrRAB5p+h94aSmN
NdNdNzRFN4DodO/CfnNp/NDj1aOMmgbg7eMRdQhKY8x3+9CjnY1gj4LDXoWN
0vh6KmulkdwEOv1hTuMfKeL/gMCt+/XNgEOF158aLoVljzm/l1pqAzNxnMPW
wVI4PeVlxw8yDYwtrR2N9pXCitmqYxR1Gmilz2+ec5HCW/Mr3sqcpoFHIeN9
zYel8FMds4faH2lAg9FiFEiWwrEW7HR8mQ5ORySS215IYtmNFTwmZe2gFczy
BmZJ4hs3PrnyN7UDsGSzSEmTxJTtbnnPetsBxXvDgHesJFZII3PbrrUDlmPW
Cwl/STwgKe1L298BXPQL9U8fkMTsQS99Sys6AHNWVJ13jySud446RKd1AOM3
PpTCnZJYe4/62KeBDqC6WZebQ00SX18/VC+60gHGJT63PheRxE7myxJPdDqB
12TT2d99Engz+wORzRmdoP/VNsvkLxL4SfLGq255neCoW+xBQJfAzNjLE1eL
O4HG4PEtD6ol8Ohj7rMirZ1gsqV7WjtfAucM0OfZljqB0139733ZElizTNyz
hpsBOgzTuyMzJPDeoJ6iUyIM8O7Dmc9dDyTwF81TCv+UGcD/5ffb1wIlcOGB
n9e/HGaAUedDVzd6E2wfECFhxQA2lHzPVg8J3FlasFv5NAPsSvE6RnGUwPUl
lhr5lxhgMWJGptpIAl9b7/TiXBwDuEMboYtAAgcYqcaRHjJAz1LpGnm3BP4g
066Y8IQBPnpfG3HdKoGVIyxb5l8xQOgZzv8ExCXw8nuTP071DFDYZhzTKSiB
w3JeZzq2MgBrb7RXOo8E5osuEt3SyQAH5cjbty+S8W3DibptAwwQGH1KeH6K
jPc/O/PVeYQB8pbS/+LfZJz4uMPI/QcDrP+qUnh8iIxzNWJqByYZAB7yiNvQ
Q8ZW/nsKjs4xgHfp68sjncT4zeje/SUGYCbv2uFfT8ZOd6/2eXMyAR9PiCio
JGN/u5NKMrxMoOdX8Y/3Ixn/PHeMP5afCTJOmL559JqM2WinXIdEmIBWGRPv
9JKMOZqPvfsszgQcmh3eW56RsVbuTgs3CSbQfip5YjqNjFPnbm4akmICFxF7
rU/JZHxQSGGTygYmeBiWKR4ZR8Y6W2wMdskxQeOfkakjUWR8CH+zlFRggmWH
zZ2SEUR9GX9OV1GYQL3l4rvBEDJW2MF2yECRCc4YvEl8GUDGB96Kc4QrMUF8
/qyv9xUyXj53PyhRmQmqZfSt9D3I2KLc4InPRiaYvRumw3WejEMe2p9TUGEC
1YUqcstpMpYLTShOIdj2At9s0kkyXl82dbeX4OgvZszTx8k4P3mp9TfB6OCD
4k1mZGwWnxTQRPDke0byhBEZG0dI+fsRrLxRJqAMkHFvm/Gnn8R61omnbcJ3
k/Gr2BNQneA7nM90D2uRcUNF16QBUV+593dJ0jYyjvAeqpck6v81tGW+V4WM
K0ZHij9TmUD+2OWu5xQy/lpdV7SD0G+B35V6yZAxeU/vf5flmSB8+8JDXRKx
/g7Ws2BZJniXsSeIbT3RP1ve28dlmGBUKPxUAy8ZG176fmRGkgmkQmp3x7OT
8Ypx9OQ5MhOY/uKXsVsi4XMcXm4ZYkxwze7ootIMCc8q++RnCzPB4O6u8vdj
JJwWk+dNWscEYi9lU0NZJCwi1fEjhJsJDKXOBhv3krB8i4DIW3YmeDH7Q7+7
jYQlak4fv77AAF/Pq8tmNZAwvPP9nNQMAwgyvJfdq0h48D8H4WsTDHD57dLH
5WISvvmgVClnlAGyFGF6TSEJ10fevuU5xACdDyJCYvJIODJcyme1h9iPl4X2
UjJI+Hie4lgEjQHYtimgA7dIWFa8TkS2hAGuSew7fSuUhDeOszpzXjPA3JrT
Sm0ACa/X3UmbymWAP+05+qbuJKyq3uzdmULs10D1UoujJEypbn9f6MsA1k4W
NvEmJCxFvRVi7sEA7Ye9Zzv2kfCvDV8fFpxlgHr5Ym0bbRI+Zr57pMicAYqr
9xQ5SJNwN8eT7G5FBtD8z9HiiRgJ346Y7LkryQCvUm78HRQg4dY75/OWBRgg
271mm/OqOM515dJTm+4E8SLmee7D4thktf1mTkUnuGhv/yzglTg+9q0faRzr
BGNGofvLcsRx3ZGjKyL7O4Hz9syhxSfieE1NtPWdZiew5RhRCI0Xx3m7v4UY
i3cCkxceaREB4jjmp/HtVHoHUJ6+mvRgnzj2fF2OxQ90gMy+NO0OPXGcPfrJ
epdGB9hQ97mDpC2OX5xPlVSU6wBijznEHqqIY4HytkSj2XawBqJiMgTEMQ76
ttj2vB18vffodj5DDLd2K1iLLNJBRw2l4EybGJ5P812Q/kYHzWu5NHKDGF78
deHQZBsdfPYplr7+UQzrHQ24IvycDrLsOvItn4lhd7WSqDUzOnDfIkRbuSyG
ZdgaEhkJNLDUeF3KQlAMX1mXdqVxuQVMc/Ht4eYRw+rkUz6SdS3gz97Ys+Vr
ovgo13CywIMWMPgmPU95ShTvc4t/N67UAqoflxssdIvia55ScTFGzSDaffpM
Vq4ovrjVNakisBHI8l94Ob1fFO89f9Iq+2ktOP25OVrRQBQ/MreT1bKvBU+9
d1y20BHF5lIj7RckaoFKz+LOgk2i+FILv1PT3RqwveB+9TlBUWy2VfhOiGc1
2H/k7UA7QwTzlQST5RQrgVv8KrnogggO++cyfP55OfDQUePukRXGnJo/Mp9c
TQHndPtfVFUJYCMjIf2szVVILVBvzSubD9s+X40OQR0I9x1RG07mw6H97R9M
f3Qg6wPnrGzu8uGLJw/3L4l1ovD10fnAiw+3nNvsxOfSibqz+2xEdvHhc1U7
tiF+BrpDv15Y1MSLB9Nv1JgeYaJRtbqz05M8+Njo5CX5D13oWlxP9IVvPPj6
tMC3nMEuJDb7t6T3Cw+OKpce4eHpRnsrpNbXfOTBde+Y3GYW3SjJxr08KZIH
Z1Umxg+yupFhhJC4rgwP/pQ1VD209hU97TtRHbSPG9/4pKDRJtGHNEc0Fzu1
ubFqpGxTsHYfqh4X1dBQ5caf+G8FLh3rQ6Nzbamj67nx5tbgVe/oPqQmZuZz
opcLF+bQffXX+tCbg4aK2wK48NcwCcmFnn50wFzp5B13Lrze+BaldLYfdZ7g
iBl24MLv6q9pHRQdQLNn8MIjQy586umm661GA0g/2IDOI0bM9+2P8N2CAVT9
Wvv6YAEnXpgdEN69axBZFYsX62dy4r2Fj3o4DAfR6MfJn8kJnFhEV8n6zdFB
xNdYaGN+lRPf8/g5VuEyiMxHtm4vN+bElVrudzMTBhFTamN/AosDr/vucMNw
bBC5KnCR/jI48MVil3z7yUE0v3H4kGkDB97BOzF4cnkQyWg9fc9WyIG3Di4K
rggPodPmcvcvhnDgoCaNxn86Q+j7DbKBsRQHZmTZPwq8NoT4Q17/TeDnwCdf
tTP9bw0h9cBDzwaX2bFpv1TC8Zgh5O8Vwn91iB2/cxGWz3oyhHjsvnUV5LHj
N6UcLzPwEFKzDoteSGPHBru28kTWD6Ejx6ThwVh2XC1+UMKUNoSSjM1zB3zY
sdlup7+uA0NIWfu9n9gedkyLGZqbWxpCJtuPbnbczo7Tjs3bV3KwkKfaj958
Kjt+Nffg04V1LPSOImdoxMOOHR1rNhySYKEDQrfEAtvY8C+/AV5rdRZy4VOo
ra5gw+elAzhWtVgoirMsSPQdG/5GlbC+sZuF2hd+DeY9ZMPs30M+SRuykNOo
5eu+s2zYQtA8IdaGhSKH/jipWbJh+S+KtiL2LJTXe0ci4CAbFlD88cvjDAtN
tn8MEdnChjO3b9359gILSbRa73CQY8Ojq34tGZ4spNcwMfJSmA0XVppOOl9m
IY6wQw8jx9ZQDJ5+eT2AhUz9QtYUWtbQLXFrCvMqCz3wKHIpK1pDPEO2P7lD
WYhyUlrn19U1tHlSy3T6JgtdOGKedstxDaVnnKx+E8lChYY3OBUM11D0SIXj
4bssBHb8oB8TWkMKmcxG/hii/k1yu3/+W0V7nqXe3BHHQq1yxzIjmKtI/mnX
ds14ol7SLV75D6uI89RitWAiC53mL/MqebKKVu3rdlUksVAO22+GRcQqWq95
5sbRFBb6PUvZM35hFRlcAkklD1lI+7dl9k1zYnzvbo+FRyx0bfiOgJzmKsq9
H7pISmWh6u6P3sUSq6iLM0WPP42FBGkT3UeXVtBeQ1elboIta5X3/RhYQUdm
tr26kc5CqR9PvgivXkHKgRE0zgwWYr2JFpZ9uYLC2B0jHQlWe4n9399fQV1F
gvWJBHs/me474r2CHhToxj4juDxJ1WjMegUZqX9j3COYz+77OXaDFXQ+uE7k
KMHWlJxwGeoKGq9yV/5NrJf9zfmpFs8KapXZJOhC8GSeEjb7uYzu3HhZVUbU
By+z+s/TltGZ+amDY4SeGJ2nK6Hvl1HPfYf4f49ZqHfRUfbh42V09WJ8FoPQ
vxnL6xeFLaNbvxN8Ewl//G/1nWp0XkZqaaXc6oR/1aZpgcOHllHO4YITWYS/
YiJ2Kcvqy4gmd9n+XwILnWFIF5NJyygjxlZ+A9Gf/x53daovLKH1oZIPFYj+
LTumTBn3LyHp3S/qV++z0MNx0o6rL5aQUsrMYXOi/6OvO44m3F9CJXpnMj4S
+dD2i/cq8F5CtiWLOTwRLNS2JlzQb7CEhDTq+9SIfMnWtDbOUZfQpWSr9dzB
LOQedf+HCO8SsiusWygj8slDFth0gL6IDBw+rntH5Nfya4ORffEiMqce1Fog
8p315I6zX+oiurBYSZV2Y6G9ajxZuecXkejAMbsfxP7wA+xygosLaFgw823T
ERaq5ML6GwcWUGjpQb/vh1hIpDHUdm/1AirP4aP0E/uvwHI55XLMApp+bnrI
Xo+FRtzmxBiKC+j7Q7cXaUospLm9eMcf3gX0wHGnV5wcC12f9rXg/T2PSEJP
rR0lWWhD2OT93SXzSLvq3JsYfhY6nvibL+PwPMou+Jiu/XcIZZ4q2FSiMY88
Pu4P5RgbQn/kPQ7SyPPok9lWWv7gEIp6OXaTY3AOlRkyZuLoQ6ji8/Cqi+8c
Yr188jinaAhp/Oie3p4+i4zDq//wewwh34ltmyUjZtHgjZRru52GUOncDYdV
91lU7ZQ7b3JqCO3jUatt3jWLzk25/+M3HkLHla6muHXOIJ6fLzxlqUPIz0FG
75nADAJNWrHhbYOo3NnLK2pyGt0+G9RRWz2IVj0qs650T6Mpf+KkKhtEkVfd
BWDuNLJtktUceDaIHqaU9/bun0ZLwaMHHPyJ8XTbMImrU+h5WLQJjUyM7/rv
7cqZKbR35vth/XWDaP8gx9iI8RQKE5OuFlsYQE1/8izekqdQnfS8TkbNAOoV
WKJaFE0iDCO1eewH0JpRavXdsX9oPoS9Zl9oPzIs71m3Yj2B6vbuf1/yqBf9
l/d8d53+BHLx0zs/59+LpFIvuT2gTKCr6JrJ4olexJzjiT/c+Rd1ac7Vmgr1
oo3B1iLpi39QbNifJPmQHlR5Y0YQGv9G4/EcA+3HvqLlGC2eyMEfaMBr/aUk
+hd0+eXreVHxYVSTnvDz7J52pLHe6+b+QRaSFBhSlRVtR/+8t673ecVC/IpM
13cjdORt8FKp05iF6v/e0bl+j4782rKOJBP3mEqsxJaYLzQ0Nb7lkE7zAHq0
2c79cUcr4rk5n3nQuxtpywpPOU/WI2sXpaft1xqQr//Cu7v2ZaiuuTtK60Q9
OMVl+ImqWwouBH6ts9vSAL7a5kJDwTLAp9zDFcHZCLKOJO7aMVQGTIN7Qzvf
NgF3+qzHuagPoHnzgLcfqQ2o3Fg2nuv+DC4c8H7VM94ODrM9WFItrgSemQFJ
cgXdoMXSXISm2gD0tlW8sUgZBqTR8ubF1+1Ap5OZ/LlhGNT7a4Zc6mkHGsG/
rm5dHgYKMcN7K3g6gEqD5AG+syOArn2obNG+A4if9+pAat/AKcHYfx95O8Gv
tA3T6p9Hwdv84iw9awZ4IuivI/TtB6D/EuwWZHwBj9/ekw6WHAfdmRmccUtf
QLLt05WxQ+OgbCx/YpTaBaJfNNdU/zcO7Bzera736gKBhkrW1wJ/gpdxPP6Q
qxscv0bz/ynwGwQ3b3P6s+kr4PAn9zpLT4DIL5mZxaa9wPZMXnup9gTYojR5
cfxiL3hjChoELSbA2jHlxcG4XuCk4Fb8LnICUKR1NMjMXlBZ/zGOa3oCGGv+
sI136AM3NzgbZbf+A8HKd7qfnekHvdwL+vM//oGdkd+3DIf1A+2J+5pm3JOg
TXyGeyijH4xUlyhM60+CNc2Ak5K9/cDQS2DxwMtJ4NJ3qsX1xADgqnjz3/DN
KeD+9qXdG5lBYJ9v/Fz3yRR4H+VhvUt1ELxL6k29Vz4FrN5trU/VGQTO7jx3
tf5NAXmf5y8Wjw6CGnHbczdPT4M35tdSyDcHQaQLu5TS7hlw49xO0XzWIOi3
SF4fYDkDpBuG55d/D4Kd+lu4my7NgFdmT/vUFgbBqLDVpHfODLiGrx2WER4C
B8teNFeKz4Kru5ZuG+0eAryCFjec/swC4Xtusp8ih8DJTbZ457o5cDHz3b/U
2CGQt995jV95DtzoKZm3fjgEjgQFhrw9NQd6/fc5nX05BJJHM4O4aubASM8U
tbZhCIyx55d2DcwBfu7j7LfoQ0BP7v1cweIcsD95O1ehewj0n2jws9KYBw4c
mtJj34eASsW/Kzmp8wB8HDlZzckCgb1LhVeL58Fthpj2GX4WaJzjnjhCnwfs
PvzXv4iwgJe6jNcczwI4FX3b6KQcCxSn7nc38V4AUdIBKU+1WYCvxOyl7P0F
oNZ1jldKjwVs263HJnIXQNIjvlw3wAKrfB4uj/oWwM1hTbuMQyxg5J/gNG6y
CJY14v+Z2bNA8oP0p5/PLQIn3kDdtDMsMFaQOxgfugjYE2Rv1DqzQPTwh9P6
7xbBX41fwgWeLNC/WpMu3LYIlKRFjrheZgENGVrv8I9FwH1h5MaKDwt0WozY
RissgXBTLVx+lQVUPP88OqO3BNqlzWqHQgi9t+e7tK2WQFDtsbLh6ywg+1nQ
pi9qCfg+4jwbGEno7ZZILnq+BH5YTokL3GUBPE1h3MJLoEbEpjDwHgs4b9E5
oT67BB4kZz8fiSX8OAjiOUSXgUyv/xrrAeGH0yE6c8syeCoQY/gxgfAj5IRI
/sFloFS6w/9yEgsUPHQ4GnZ2GQj9WUlaSyb8eesac+LaMsjaPPzc7SELWLRd
admUsgxemqm8+O8RC2SNBwsuFy2DTQlnnrQ+ZoFp7sjDtOZlEHA7LKYhlQUO
UuOisr8vg9CZ6sAnaSzw0OBxQyDHCuDvqz1rkc4C4zbZfOZyKyDx3CXzXoIN
fP4zpu5aARPVy+BABgvExJRGzhxfAUEH2PfeInjwZWVNw8UVoC95ziyLYM2a
Zq6MOysg3N7+8mOCbw4yD3g/WwGO7MGvLxLcX3b4YuDHFfD4Z9h7RYL1EnBy
KGMFZFb/Kigh1kvy1MERf1bAEQ2+1K0ETxjl/YjiXQVJvCdv3SDqNVNQEH9A
WQUDJk+vFBN6cucTDFJ2E8w7dr6J0MvRzueSfnwVLNpfuoAJP07nh8Q+8yD4
RFlYEuFXecRk6cuIVRD8NfKNaQoLkE+7sl6nr4LcV194Bwm/L+v2ChQXr4LL
xuORVoks0CxyTOdj2yrwatLXzY9nAdXxmtOVY6uAa+o2ZSiO0Feld6eefQ1o
LtSbzsUQevyVezq11sDfFNOb1VFEXo8+4uoxWwMVl0uygu+wwD/V9epD59dA
1rUrG8WJ/Lzombv+O2UNNKjTg/6XL673nnlThWtAqCThtGwoCzjGDHUsNKwB
NZ6+Zp1gFpDY16TCs7wG9qh+8+L3Y4FdQhTVSH42aHHtv5KaKywwGvTVYJ0k
GzQ5L/7urBcL7D9x1EVYgw0emXGd1ndlgQXu3WUbnNigUHhm91UbFsjxnmrJ
8GKDJP4Vzj0nWMBy4BWLGswGz3Qn7Rs8wgKFpYqCqols0LqjWa3RiAVcPAQd
tWvZoGJhvsY2TRYgddX6lLSzQTaTDK+FrSxQaXjjjt4AG+Rbu6Weu4kF5ORn
i+A8G+xzXb2UK0vsN9oAl7kaO+Sq53hpwM0C4XseS9N2skNbv4vZEmtDQCPP
Uv3EAXYos9P+Sfv8ELh3s8HmlD07DLD8xpz4OQT273ybdz6GHc4xt2yvpw2B
wtRIi9BJdjj8istqMnEINIlHfhdm44AB+uWRB6OHwOi9W6FPhThgAkO9OfDm
EJC9FlFQrcoBk4V0FgOuDIE79uF8Ao4c0HYovHH48BA4IxeKU5o44LerLVfu
Lg6C4KQQm83dHPDyU8qLpr+DIFko5E/5KAfc/gW//T0yCJpXgmX72Tkh/ym7
GnrrINjVHxSovIsTPvqL9OSeDgKRJ34aRdmcMPFFZmofGARbJP3q9r/hhL4u
8WJbtQbBwVjf052IE1o5eV2wVxkE18J8oue+csLtCzkG5wQHwZjjlbE9olxw
6sjbNpn/BgCmXMxsDOGCCu5Uk+8t/eBSlrPIiDU3XArLLlUZ6QUxQY/SYs5x
QyPHh8+ma3rBfxatqrsvc8MJs88+ybm94M+q7r6Yu9zQPXfii7V7L/C0E/De
9ZEbJv43dLT9dw9wJ73piKbywMIkK/bJX1+BS+Rass4vHhjlZjvb0dIFTrs/
lrt9gw8q2XYoLql1grvH/HdrpQlAWfP0wnrNasBFShoNW1wPJ1J5QVtuHBL7
E7pejFcYtpp8/8emmoCo9Rd2ZosLw0Wp0VOcuUlo7zWDyPqtwpB/v0Oby9PH
KGhkeKOoozDMEuV0iDuQhf680zyfVSUMfzEdPkiuK0C/1MauOB0UgUO313mH
3ChB05J9t/LNROC69H7+GnIpWuJqfzR9XASu/teVm/qyFPEPfKiIdBSBSx9z
Y/61laFNCbGi+YEiMNau6w1V8iNyWtpZNJUnAvlz9ygfN8boS9OtiQhhUcit
ec4o5H41StybbmQlIQq/ecw0STKq0fGid483yonCvQ1db+xla1Br8rBhrZoo
zK3aAodf1qDas/se8R4UheQOs2/tuBYVzy3vi7omCvN2B8586KtHyUq+CbE/
ROEppqbJ97ZmZJl8b8xxQhQmchncLRNoQWLrnu3RmBOF2+V2C200bkExf+jf
aVxi8HhpFHvtxxYUWbbdQIwiBluMLdsVn7Ui/6M/RxKtxeCdnHufJ7fRkFWw
087HVWKQbP7QyO4THSWnk3jmGsQg79368+PtdMREtYwTNDFoaSKqbTxGR9Zc
W/yE+sRgzrSHlZtYOzp5f+rt9Vkx+KA7S97MuR3ZPonY4bpZHEoIHfp1ebUd
Pa7YyV69XRyuvza4t1mkA/UMj9EoO8Xh0w83HKcUO5C9qvnlr/vFYV2lybPs
gx3IoYj82txeHG61gVfj7nWgM1U5W7VjxeGvXd8VggQ6Uea3k8txSeLQUHpc
LVKmEw3xCjT/ThWHJuk4zWFzJ3Iyu+SR+0Icloh2eXgc7ETnGLp5MpXikDdt
awdbaCfKnvsRFFAvDhtNfm11vNeJRqTTDnW2isOlMyzX2w87kfNpth/3e8Rh
rmyzsc6bTuTyvX4T+4w4PD8no8s93Ily1gXPOSyJQxj+Rr7oTyf6vmVbXTk7
CY49qbmustiJLlx+4OK7ngRLX+yIuijCQG4Lp55/30SCiVs5cjz0GChvg6Cf
oToJ/jw6fczJkIHG93w2fKpNgiPeGRqKRxjIPVxxxHYfCYJOD4+VMwzkKfBT
sdWWBLPu79GlRjDQz6ByLoGzJPiu2XReN5p4f+zuqLErCar03f8mnchArjWq
eRU+JNjhJ6EHnjHQqNb8vdUgEhyUVEsPz2Mg56y6i/rXSdAoR1j5QREDOYW5
7HgfTYLOBzofCSMGGvqtIz4ZT4LaQOxOWA0DnbHnnlF/RIKGQwMPy5sY6PTu
7NIXz0lwV2vzxvgvDHRqagikfSbBe9lAoe4XA3WdLaJ2V5Pgjtvbj8X9YyBr
2nVOiSYSXNsfWqo8y0CWrxTqYr+QoObwut2vVxmoY8PfF819JKi00dT+OQcT
HY/6HLVuhAStqv/Wu/AwkYWrw5GbEyR4rcw05bAQE7UxtmrgWRKMMbvLc0mE
iY4YLouuLJPgcgD46iDORM1vmqZ2c5LhujJTGSkJJjpMTWX4ryPD8pfzrelS
TNQY617yVpgM8/t52P/KMJHJ6u5HE2Qy/F6ZVSYgx0R1nuuCt8mSIcnXjWNa
nokO9nTZuyuS4VSq67dcChPVHHqxN1eVDKNMpS9uUmQiw9IAyog6GRa2umV7
KzFRpYoxB1WHDE3vv02+q8xE+5IkRhz0ybCoCx313MhEmHO05vE+MvxcU9sj
o8JEe73f534xJkMd9kvGSQR/Goy4SzpChmXPWp70EGxw1NLjmCUZmnG5TP4m
+MMnJfMYWzLUurfZvJlgva1T6k1nyPBueMBnf4JLH1eK8LmSYcWorNVvYj3d
dfGThhcJfTqWFA2CiwPOdt7wIcOde2u2A6I+7VGN4s9BZPj2Z0SCDFH/W0u2
h0thZPiIRLavpDKRZlVb0K5IMpQ2cn68k9BftOOJnV80GZ6IanEMIPzRyPTa
8yaeDNkNpD5HyDLRf+v3Kvx9SIZ/awLqThP+bgsRYt/6hAx9Lt2L4Sb8L/jZ
y7rwnAy3KJ1WCSIzkZptQfXzfDJ00nHJKhNjIlXdw3cUSsmw1oc35akgE+U+
l3G3/0z4dSB716F1TKRCGj/8qJoMDWGIyGduJlL+d0dYnE6G141DyoSJPD1z
PPnv6Bcy7GtdKP61wECKrZs6ovvI8NiS/YGUGQZSyK9N5hknw29317lYEXm1
fFJa1jhBhhEL1tTlUQaKSsjrjZkjQ0vywozrEANNB8coSnJLQB4Pmnssg4HU
Ll836hGQgBHqumaH2xjI0dn7whMxCajTY9nQXM9AjWbW/22iSMAgHz0F6gcG
YttnQv+pIgF/d+fumX7LQDo6etOvt0nAnj0SN+8XMFCmnLzeLn0J+FzVgiSe
zkD+f77VmFhLwPlEowtewQxUwPoyJuggATVdf7b7exP7k9kgQD8nAbfWeiQd
dGMgM/Tq2KkrErBxLKfawJrQG+fX5xYtAdPTL9nf2cZALTu4Z6IqJWDKI5NX
lfROxKEyJ3m0QQJubg38aFnTiXbJ/NATp0lAHM4aLyztRFkcLddT+yTgpxsq
bvUZnSiwI1GwYF4CdkZnnw260ImU/ZSVW9QlYdCzoFiRyQ5k6yZh/EBHEm5M
Kr9tz+pAsQ587lYGkrCf+n3Ur70DLRr9et13SBLuBAkfRd90IJrEO/0/zpKw
s4UhMu3VgYJLD5wQTpWEv99RtFMG2pGmPW3C8akk1DjSTZdobUfja/YxhbmS
MM8pL/XiR+J+MfZvOPZOEsa8uBf+9GE70mO+AIktkhB5FdqoHm1H81NCW6XZ
pOCSUOjs4Ds68t/exaV0XgoynMHRCGcaUu9wzvLxkIJhV3a6nDhCQ6P+/0D1
FSlodptWxLaLuA8/8wefD5WCw/ynv87y05C2+Z5/uSlS8IJhinnh6TY05Z7V
t7VRCs7/UDMzHWlBl3M8i3dul4Z2NvzVFlWNqL9tQ9L6ndIw6UuLueS9RmS+
0OgzaiANa6MFXJ8eb0RqZpt3JJtKE/eL9gLHUAMa+fctf+a8NMwJOhm7fqke
2exxfPouTRreub0lcVC5Du3tPBatyS8D2+1QprllFRLk0HVS/yYDP9uc/uif
WIyMLlomqSXIwv/Uzz876/cM+MZ/YLv0SBYayUQNFjtmg+wSRc+3T2RhHJOz
JvfQc8DB8W+/QYEsDOn6Z2Apmwtw8v0J8xpZqJUWvz/jYx7Qw7WHr8zJws5O
J86UqUKgLr6bo9RODraaFyso/SwBDrsyLy6flYNFJ3kLSSdLQbQDbze8IAc/
vMt3flddCn7mMl43+MpBdkPukMW0MvDCwNuh574cVA8d8rx96ANQcskvXUVy
8Iv9QsSXB5+BVJncJSNleZhywz8x1rMSrJ7L3SC6RR5OVejVKTytBCPrd9T3
7pCHdzcY2lxiVIJCZ0OqL5CHayVzN0z3VAFjEY+OLFt5+Cc4pZ21rhr4u5bq
sj2Qhztfvk/amlwD7MX2jzSlyMNNvpIV/rU1YP+npriUDHlo92q/b+BsDVgv
PvBDvUAe7qnZ9jjTqhbkfOZOc6iTh+F/R9UDROoAg3yC7cOKPIwPHyn/GlAP
ynFvQSSXAgw9WvHH9Vk9yPRwOXVcQAGa6Oa8ed5aDzwrgt78kFKAgxm3zHYo
NwCui5nOUtoKcFvR+vyQpgagXf273s9dAZ5p1jdM4m8C8d53Hmh8UYBW0Q5W
hiYtYLG5oPROnwLMVfYOZXNtAU6b6AODwwrwcFhr1cVbLUCrV1r9wYQCVDmd
W2pb0QLGs6y+zXNRoCpXsUCgTiuIFvx+45Q8BTYKm0zHrW8DeHdQ0i0qBf7b
EMFupNoGpl0EXhYpU+DWC297cva1AfuK7bR1WyhwLGxur49PG9jmHyhfrkuB
In9DRzd3tIHWgXUfZI5R4OgVtoN++2iAQyit9aAlBaJ9U5VvD9PATj11lrcN
BVYedP5WZ0UDGYnH1zU5UOCPHtx12Y0GLh1KtQl2p8AgX6vKqhgayPbf5pF7
kVgv8kjRqxQa6HqGQjsuU+Bm3kvNnpk0AFeHn28JoMAt1EPH3YtoQOTt1ume
mxTokHV+31k6DRgOfublu02BdVyftKa6aCBQ6NgG7SgKNJbdNXVqkAYGXf32
R8dR4IfR30XP/9BAkeznOIN0CmSU1W/XWUcHo4cssi9kUmBNUeNdT2E6kAlg
lSQ+o8CWNWvPQDIdhNN5Bn69pEDB1tRCISodHI88ui29mAIv6n1J2LaTDnJO
TRwqK6NAzrAzdyf06GBh6wMXxkcK7EjTjbsL6CCzo/2JUBUFfso3rdljQgdT
OT4fN9dS4MS2XX9OmtHBwaukbqMGCnRPYcqZWtDBb4q1WGgbBSp9LIv6z4YO
4PSs+uN2Cixo+lBDtaODxLqUw8UMCjxv8YPD4zQdfH+860J7FwV6HCDtjzpL
B3pe3RF/eigwvevSzTBnOojZd/Up/wAF/r4YV2fqSgdDpA2fVVgUuObvIfzL
jQ7ufLCfOz1Ggc4DAoWFXnTQG7MiHvyTArvJTwU7L9PBdqcMjZQ/FDi3L863
xZvwQweYv/1HgQpWb8fTfOmAyTfo1jZNgS/7DL33+9PB5t7rkT/niPm4Btd/
DqCDa6+pz3iXKNDO9Xq1cBAd0MIrkdIqBYavD0/RvUoHStbnegE7FTrufxqt
E0wH/pu5Fuy4qPBr5OKLddfooHE5mxzIS4Vm3vyTbwmWoxlpJvJTIUfKq4va
IXRw+dnoEaIxcL0bRfEewdX+tz2aRahwSXaNXEqwpKnqnTFxKhR/YGTxgWB3
uYZsLkkqvLb5aFciwZ8n3CooMgS/Zr43JFismr/fQI4K9+2cnWgk1jufkr94
kkKFWssq8ZsILnU3k/RTokJ7vX1ZtkS9gnt/az1QocIu6WtqzoQeR9EYi1eb
qbDv6kVtQ0LvmxH1iw1bqTDy67rGRcIPntK2u9+2U+HA1uyZ24Rfp+5dzmHX
okL2N78rfhJ+FpwWrZLbSYXnumZ2q/jQAZvmm4Hdu6lwUkjNTfcKHZzgPrFs
ZUAlzhMrO4VLRP66pqS8ARVqXH8q2+9JB4v5iTox+6nwl3ZimY87HZiH6RzP
M6LCsymixF6gg+mNAfdYh6kw7aHQ7r1OdGCyIPli9QgVlm7f2LDdkQ5Sm0ur
ZY5TYRjPQuA8kbf9Posrx09Sof8Pdh9hKzpIOpgqc8mOCtVK3vY4HKODMWkD
3Xunifd/yTy9aU4HsTjkcpUz4QecCbcyogNWgvz9AVfCj/5KzL6PDna6opdL
7lTYcnYx/ZYBkTch9mGtK1QYdcMohKRFB2p2EVbZIVS4UdyDbiFP+HOlWIzr
BhUu/C5iQCkir7fH2s5FEPXmf+LmEKODb2/NTJXuEf1j/D02z0XsN0EyyHpI
hZdk1RNKxmigVdF4mT2NCmtUX4xrDdHAyq6gsrNPqNBO8Nfh8G4asD3fp0XN
oUJVfcazpAYaIH9+rpr5lgpN5IMEHucS50vnl29rxUS/ABDJy6AB7/F1zxzL
qXC6ZkrmfhIN0CS85BQqqNBdfa2+OZwGoi7tFMtopUIF7nmLnXY0wEatW0r9
QYXdvT6ddE4a2K67ULr0iwq/1CqMGU20gdPmW/ztJqgwQbmbHt/VBj4ExU7I
zFFhW97Gn9tetAH/dptvj7gUYXC7/DHvA23g582x1hQFRRgE5+6GubcCmccy
0XOKivCR9aDntHkrMCk0O2SjQjwvuuYrvaMV5PQWVklsU4TVmS2efrMt4IxO
UGmSniIsPJ8VFRbSApij67ISrBTh5pAQY62QZlBreTet7KQipM7P1ZNPN4Pi
Sr6UATtFGLBXYkfp3maQnMEbvcVJEeby8ojsXWsCVtbc/lVeivAy26Esm5Am
0FnDZjp1WxHu/R78RMSrEbRnz/07Xq4If4GrRarK9aDV6ds+MQUl+GOi7P73
+UowxJU7n6SoBLmTY4aT6yrBdM6F19IqSpDNed8/cnIlkP75U5a6TQkyleRf
3dKsBM4+k3Pb9ZWgse49oT1uFWDx5torcxslKDeTKqyRjoDKc2mZu7FKcIin
Ff5ZLAW7jXtogglKsGuENvhfTCkw+5F2Oy5ZCUZ/lfupq1gKrmyjzKSkK8FV
adKtFyYl4ON7FVpOvhK8UElpV014D47XakVW1ynBAPKaaJvCG3D+woyBSZMS
PNdAt3lfWAQC+UummlqV4MVo4UNB+4pA+hG9sx0MJXjr8lLkE6dCMMaEBqxh
Yvy5Y+1k41dgMZBj6vx3JagnSObkcy0AQhuqX/4YV4KSLdtmGyPzgaajseS/
f0pw57hfb0vNS2DEvq7Vd0YJ5gvYbRX/9gKcfNYYMT+vBCcjJua0uF4Ad6No
/WvLSrDCK+W3plIu+P/v++D/f98H/g/woA09
       "]]},
     Annotation[#, "Charting`Private`Tag$39077#1"]& ], 
    TagBox[
     {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJxF23lcjNv/APCRNpVQKkWaypothVA6Q8gSkpQtjSSEEC0kBklSkaUsYYR2
ZIvSdYYWStpLy8z0zCOpbG0kWn6nz/m+Xr+/7n2/Pus5z/TM3D+uodteh21y
HA5nzkAOp/+fgV9WtPX1GYvIv3KqRRLUEKD9q7YbzLV9LUErh9Z1Pu+ifkbM
nbOvZ2879YU3EvQm9IIy00Btly1BylM/jhZ9AAuy3krQpYP85YLrYNGrQglK
HnDgLseCukosQQrbbM10XYz6zd/+T4JKN093/roeLPxIfHPdyCP/OVHbdkvQ
LLufOVvswZwJPRLkYR69PskGzP3SK0HvBnwRWJqAeZvlpCjsZnCRS6dhv5np
g6RIsypnd2wkmLtQW4pEk26HBEVQxxPvPnbkrsdZMG+QjhTljjMXm5wCiwqI
D/sIlz/xB/NX60oRqxFgku1KvXyUFD1eYdr4eQpY2GMoRa63VeXfmVCvNZIi
tV8NBknjab/7xB4xN5y9DKk3GkuR3leVt7+HgwWPx0jRiZDP95S6ufR+x0uR
Q9a1rRPzwbwxk6VoTHm99G0u9QHi3/VTN3hkUb8hvqqYZX8nE8x3mSJFzNKv
8/QfgpmzU6VoT7HliGGXwKJcUymylp26+PA8tcp0KRraVqS+MpzmryB+qumu
cDYYzCkl/usU1iZ/CCwsNpOiEIm44I8LWBA3Q4o2/Bi3JHoDtYR4ct++rJnO
NF9zphQVcRUyvO3pvCPE2u5T4r8toPNsZklR40E/o7OI7n+AOP3U6xsTrej8
WOJN8Wsvecyk+f+I7zQHHmfG0/PfsZCig//edh8dQ/PfEy9W0/DXN6TzWoib
p8R5bdCj+82dLUWZ1i1Nf7Rp3IU4fNXcbdGadN9jxKb7CzeWq9F9RMRyJ0Z8
9B5E50uJyy+4OQxTpPndxD92fI+M6TWA/BlzpCgy9HhIdSeYu5J4RorWMe1W
sHA7ccDPebvPfwLzoohjtlg08iQ0nkicWWbq3loJFmUSSxaZMLeLqQuJe58b
b3LIp/V1xAYm+lVy2bT+JzEvRtvxyX90fi/xFvWhxVufU6vOJZ83wSC74Y9o
Px3iO21y77KTwIwRcbZ7t43PXbBgCvHnyl947E3afxax4tKflpXR1NbE4182
Pg+OpPssIl4yhTW3OEvnLSPeeav24ZcgMGcVceiwiklXjtL61cTJJwvjl/jT
fdYQF/x6a9y1n8Ydib9vf30rcRd1f1y9JmPkhm10PwfiaXZPo1Vcqfv727+6
r/lyHZ2/nHi/afy5XQ403r/fhVih6ig7ug8ifjL82umCRTTfgrg8+OLAQET3
6T//rz9hx6bM+f/70d4V/E9iRs/bf38WkmN+EZPpfoOI16061G49jsb/kfs/
9Np7708D2q+Z+Jr57q+3dGm/auKX97Ztt9ek898Si3VcP3EGUz8hHt29unYL
h9YHEyOv5c4af0fDPC9iPrOw7E07tSNxbLbFe+MvYI4+cdas6bblDFjQSz6v
9QkmWUE1o+nnh3hcuP7Lzx/AzHVi2z5ti6i31H7EO/YPfbL4Ne3vQJy4dmBy
/FOwaABx/tvucese0PjH/r+3Ob9jlRNofTLx5NFN13Zep/vYE684z2rrXabz
DYi95MQX8iNo/Dv5+05tKAyddILGTxKXrHunKA6g+9sRt+W/PhHmA+ZqEs94
+PTw9x10Xgx5v7zwu+b5cBWYf428j4zc99+rWkL7ryIOt1/CDFhA+8kRu038
vdZxBo27mUuRau3q+V0j6HmUyPvO9+2EI0YadF4yeR8yT/rSlqvSeXb978uw
+5Nv9ujDvDPk/brZetAIG5a6gbx/35kwDrtrwTw/YjOd5+GXy6kViZVa3Ac2
5oJFo8j7O/W26EdYMq2fPEmKBir451QeBAsKx5H7al3J4XjRuAVxlWSs5cTt
tD5mrBSlpJWlBqwHC13J94vTjmkxXGswN4t8X4kcFT8utaD5w4lN5kuGHTCl
+Vu5UtSne/Z0jhGd1zlaihLeN3h7KoGZ7pFSpPHiv/sXOWCOBXHg3UuNmV2j
wHv0yPdX4ILNQ76BucUjpOjf1JtLnxaDmb1aUrTywlpu71WwSF2dfN+aDVlq
exEs1BksRXGl7/afDwPz9NXI+07DKsvoGO0/WkWK7l808rB1p+5QIN+3l38m
n59K+7WS3w+zZyaWV4+n8dfk94V7hVuPkSHtd/avBGVqVa58pkn30/ojQbui
Mlur/4yE+j9tEpQffcbCOAss7PwiQb8tbPi7M2k8qEGCjKq6Q549A/PUPkvQ
4RH7amwTwJyhrARNvOoUuDscLKirlaCQa8ZZz5xp/i3y++jpXMnXXnvanymQ
IKYmaviSZbS//nuy/0gVjxor6hDy+6rxeotynyGYb0R+v9ne+G/lkm960M8p
VYJawsXd8g1g7o4HEnTt6L+k13Vg5mCKBH1znaNkWUZ9LEGCLhg9w1MywML1
QgmSxqeYaobQflrnyL5X3kuLjoM5FWESNP1Mc1hYAO1/LlSCgjwnNCnspW4/
JUEmU+7e/rOW2u+IBPk+vq4hNQbzd+0gvyfvZIiu6dP+RdskKO9itZezDo1P
3ipBo3x03her0P0qXMjvTYuLJ7NadWE/sYMEqf8X2pGAwZznlhIU9/ZQ5YGN
YK6tsgRdNfO1SXQEM8HyEhR2wztVugLMxxwJ8j6wK3QpD8zT7BKjeQYu1gZj
ab9VTWJU7suLy/8xAu6b806M3sqsNDmNYH5ylhhl2M0RzJSBuXZYjIRGZhuE
ZWDe3jQx2lVorO77gsYt74qR3DglX8MTYOHHQDH6dX7gJ6cAMFPtL0aN//pW
hR0Ec0oOiFFhyZ+JnR60/uZOMboa2CwpWE790FGMTCs+LPLXov2uThCjzUGX
tIoSdCDelVuLCtFvJf9YMF8iqkXon/NfbgyYeZZRi7jeI+u8z9H8+Q9qEesa
m6DtCxZkXapFHpaplpttaNzNtRZV/h42VWkedcC6WmT7+AA3dRbND15diyZM
tFCQMwFzfGxqUbP2q8J7Q8GilHG1yKvt/ZbvEm3I92+uQdL7UxyjPoKZh2wN
WrXz3GJUAhZV19QgU8ZhUmQ2jffl16C2D9UdM5JpPCqpBvkmfjl9xB/Mr/Ko
QUf5Ax+oalLLl1Wj1CLbiHI1Wr8trxqx1mFeNxTBwjRcjRbra02b9lcL4kYp
1eT3w7hUBxn1xKBqdHPNssdXH4JFFabVCC+OTBtvB+a0BVShtmcVUS2LwIK/
e6vQmLF6fukILPy5tQqFDLxjsdwczL2+vArZi56+8NKj/X7rViFmTlXGs8bh
8HlJfvwRcaYYYJtTYGZBWSU6oj1/86mjYIFNViXq7HPryfWjnvCkEv0ojbNc
5knrYy5Uolr/qS/sV9H6ifaVKC173iMXXTA3M6cC7dm06Y7ffU24n/Sr5ahx
0dEF6XFgbuOpcuQ+TSj7ewvM6dxfjjbI1RscvQAWpC4tR0sSdsUE+VFf7CxD
YzoOX46cDxb9sitDNWevnk6u0IDzr5CUoLIcbgq/CMx5lVuCCvrii7XyaHxI
agl6dSBNV5AJZladKEGxG8uSHe9QLx1bgjwnDS7u2Uetta0Y/csXjLBXo/WD
oz+gDnnleQqKYNGVLR/QD+tzWzL6hsF9SCd9QMzjG0lj2sHMDVyAsq9lWHVV
g/myT+9RmGcHPzYeLNhtkI9GqexI7FgA5u50y0WbXxWEGVmBORoGuei29/R9
9jOpd9bmoHG1f2eljAcLjdbkoGkp4dlb1Wh9gXU2WrDySV1pxVCYN1zpDdp5
oVfr0Q6wsCA9A+2aaaJQO2oIxENPXUVbLaQJWVmqsK977xvskWDhtPg5dcCa
LOypGzkwLwnMvZCQhff9s9lcGAkWPXPIxkdwoma1K5ifFZeDL9n6HP3xTwXm
ma54h3Od1Rx1Z4C5NuEfsIn/3D6vu8qQ715RhkWSlSafosDcxL4y7GSzda3z
GTCvYGI5PqEeloy8wIJHgeW4+q7EeehsMKfeuAKHlAhSH71XgnmndlbiBpO3
WzraFCG/qrIKHzlfG7bjM5iPuquwxu+fz8UfwYyvYTW2fj1CPScTLOTvqsaX
nT0zLgeDOfI91Xhh0GBNCz0wd6lOLb4tWZN9aL4C9PswVoLN6s3+ls+gZhdI
cHbzMFPTCWDeO1cJbugsut6gDuYoXJVgEw27A2vE8nB/1oOk+PHihUZT/MDM
eUaKbVYYrwvxBHNi/kpx+Rq5iE8uYIHv8Dr8my/quroQzL1oW4ctA6xKFDVo
/r7kOpz9cIaASRkI/fNnMHhtmmaapRDMzOYxuCGz7WvUReqw5QxWzk91XnGY
umELg1fUT56WYQvmuYYzuHLEWOlFVg7mO9cxeLuB/PCfFWCRfhOD/4z9tHRZ
HnVeG4P1zG8/46SCOcUKMrx5hX74nkAwE2Uiw1+Oa1nZjgBz5fbKsErgw58X
VWj8lZ8MT/VfeofpHgD1GwUy7OsVqHJYNoB+niJlWHHj56qUJDDf4ZEMmzgd
C+uKofnK6TK8crUub/E5MBMjkuHLtivi6w5QuxXJ8JgZz3w05tH6zV9leMm0
VRNdp4EFg9pkeLdJkzjZkPa7+EeGn3L1Fy5SBPN4Ciy2GXxKw7+IA/3k9Vns
oWyQm/2aWmjE4tCB6YeGPQWL9CawuLTrG5N0BcyPN2OxW4PjQ8kWauPFLA6W
/XAzcaT1yctYnCQO0fZbDBYMW8XittLMwKGTwLyDzizWLnSa7qIP5u7fyOK5
eS31iUPAnOWuLJY7tvRKcGMf7o9f9mDxMp/APoMPYJGCJ4sjdz3ySH8E5jjs
YTF3ne7Mb4dp/PgBFu9YuSLmlCuY5+7L4tSFxwcaLKRxo0MsRtObSlYPpvUz
j5L9x+vP+dra22/mtIDFhfqrhUGVYO7zE2Tf4aeURr8E894EsXizSrrX81vU
icEsjuN8r7APovm7Q1j8/Td3XvMOMF8llMUzvjvePbkCLAw6y+Ijn0JU9c1o
fU0Yi7OrM73TtMEC1QgWqxW3VK/61wP5OudY7Jg7Zn5THXUf8fXMdQknssGi
N+dZzD4OGzIqEczwI1lskijyfRZO49XE3rc6JCu9aXzKBRZnXJ6wqNEJzHEh
Vt74ZesAKxr3IHbixp3QM6T1dsR3P7vfNlek89WJ25KMRXZfuyGeQvrz9rHS
bcVg/jjiiJm3e44+A3OOkP3Ef11HXbkG5t0n+08UjbZ8dIzGM8h5fU9J1ue7
0/rYcHIfy2L8Py0Fcz3I/WgM3RjdPRUsVCD3x6/QTdMaTuOCMyx+cK2qfGrX
P9i/4jSLu12j222l1Irk+VxpHj79cAJ113EWNzwsW3UxHMzJPEaej88FrxRv
6vWBLC7qG5IitQLzjf1ZPCqnML/TECyw92GxZ2h401AlGl/nzWJFLdXxNiV/
4T46d5HnVZO3aFMadcQOFsfeCnH3uQ4Wcrax2NpEMTZ+G5h7wIXFPmiAvtrf
LohH2rH4jbzIcmwdmP/XlsVD849usM4G8+bZsDjFsTt6X0QX3WcOi+t3dmpU
GNH8FGMWm01Lm/5Difb7RP6+BR0H7ZW+/4H8Dh0WjzzWFj7nOZh3R5XFDpe+
K99cDuaYt8qwcH3K+OemYNGsZhn+MXrX4mItGh/+SYZDExtPyjGdUL+xXIZf
v/rU63EQLBz5TIZNm6o7pt34DfXbyfvxYMuUiTpBYH68hwy/6Dzu0usJFuS4
yPB8RZPcgtlg5uZyGXYwPhy9s/wXxLPHyrCPi97cO6pg7tcyBme4e3mFtnVA
XD+Pwb273sTurwZzTF8xOPiwpyovHizqiGfwlegMsXgBmMs5TOpLNhzTPtwO
9bNGkPqqB096+GDGW5XBCxi5xnpbsIjbU4ff/0iyf6JF89l3dVis+s/Q/lEb
xK+41OG+RdezzzS2wn0MPyLFCzNqB/U4tcA+V86J8YOke3PeWoK5jrvFeMT1
vTsjuWCmfIkYV3YqXlhe/hPuZ/wAMR4b4DT0xt8f0G/03lr85vgvNZ7td4g/
49Xg7ghzxWCmCfrf/O8j3pf48M8wzU+Qz5iVYlN1r5MLGBbyRymV4lbvyeoH
7oO5s2tLsLdVonG5LVg05GQJ9imKXRl1RAbnW1hSjNubJy2dWVAHz7OgqBAr
nvwjXOxdDfGg3nfYycP4dumRPJi/LDwdvy2oDjVf8w7B34v5C7TDv+btxkl5
/RboKqcj5TG18kED8/stfC9OR8sCxEfLn7yHuPOpl6hgYp23z/AiiNeVvkI7
bLzv1zaX9psz/eEbtFvod1mf/HdG/301aeehuVNeP7aP/tRv3tuYUjSzvDLq
VR5YMPJdKTIN+HZ4cjeN27eXonF5OjbKW+qh/4alZUhzm1cZNvncb+739jL0
LWZkx9RXDTDvw4IKdEvNd+bgz01wHuecj+jak7O6ATrNkD/j20cUteF2T+NS
sPCLRhUKSyjIyX5A46WuVch/obHTEf+v/RYldFYhhyPFvl9Vv8M+ygY1SM5X
S+yu2wLn+bRUjDbwk0pfzKAW7hGjx8tQnpo9tUGkGLkZ7Ex7Gkzt+lGM3rzL
PC/fARaJ+RJ0cqT7oruFrbCv53YpEit0Wf5polY5LUUzWsLN7BTaIN89Torq
s58bdFiCeUvqpWihl+pfm0QaF22qQ/KvHz/4dLIdzqPDZdCmZNt7FrfATMIU
Bj29LL5+NgPM17JkkLun4hnzVpp/bC2DcjQ3bD25uQPyz4cwKNhjwAjjOb/g
fqO+MEhqH6Xu5wjm5rcxaJblJIX3e2m8qodBDUPWtnnHUQs0ZWhxekLBG83f
kN9nJUNKavbH3X6ABWkhMrRu/AbRrEGd8DzWRspQ0gL3PpUxYE7RVRlaecg/
8Ml6sGB1kgxFNQgPyeeA+ZfyZKhxQPKLqjowT6lEhubqP+tM+QsWOVbJkHRN
ns9a0z/Q/1iDDI173bo/7jqYP3wAi/zF/1IPp4FFm5RYlN+p0LKyBMw7NphF
XlP1vDoVu8BrdVmUdn2B5xJv6oXTWKT83C5xVDj11hks2lDq1NgSDxa5zGFR
r/Iuj6sS6k8LWLTI96Jb85K/cB8WjiyKirxx+9VWsMB0HYsaU+KZC0fBPIVN
LAr79HKz5VMan7+VRdLenBtDisDCRA8WmeoViz81gUXfdrKo3L5+Q5jBP7Di
PhaN2/3jKn8umJF4k/Oe/lM1Yy1YcN6HnDdWbsSgfWC+gT+LRr1Sc5aE0njo
YXL+au2oR/eoS46wSNTBrTglAgs7jrLIfdLMNVN/gznFJ8j9LEYX5IZ1w7zT
QeR+3JaWVE4CC0YFk/sJXDM0eTF1+GkWpVxxWXVsC5hXG0Lu68n2iDVHwEKF
UBbZF+3/MD4azFc7y6LY5gC17kdgTgtxh0Lw8uICWp8axqLFhudD736h9SvC
WXTF6lqev1wP3Mdb4mbnu8or9MHM6AgWWR14YGs4G8xbQxwR8SL4lwO1OzGT
+CYnbw+tdyA2yymQvxkC5vbXn2QqbbzvgDn9/aXpy/f4Z9J6J+K5F0VRRyv+
N5/sd3n3TFHQDzpfj7hlUVJTqFIv9LMn57EzMNCM5IIF28n54/9ctIqeAxby
z7BIrlTZ44YDWGRJ7mtzcuC5O7tofhe534ygtheJQWDe1VMs0tq8nX14g/Yf
SZ7HPguxaloazT9GnlfB0NUzM4tovxwBiyY052x+00jjP8jzPZk1N+TdgD6Y
30We/1zfMbXl5mDRc/J5iVp1Vb7Wro++v3xZ1DpBfapsG433HWBRQm2n4Hs0
mFfqxSL5Z7uT2lPBgiG7WeQaISvryqP108jnV3v++3GK3XSeDvm8zx7MnRCs
wuFx4AXKooZDNVaDdMC8s+TvY8GaVR5DTMGC0LUs6lKYkz7SjcanLGZRnHf7
h5tetF6d/P051t1nDQNofsk8FqW+MFKbcAkslJvJIo9daq4zcmm+mhGLhlfl
HnheCmYU9Vn0ZuHxkLl1YO5nHRbpj/79iPeH2o68L8qL6+RXmAyA/OzfMnRi
3jXd4llgjrhFhkyTHKeusQFzPzbL0NmTec7rN4GF/lIZWjDrSdK2CDBvZ7YM
pV4Ptj/aBhYpn5Wh95rBX4Zw5PrNf3FChhrOnjp6ezCYWXxYhkYdCUrJngDm
DtwpQyGbTiiruoJ5vxbKEF//qCj6PViY/5tBAZcDnSdW0/qD3xgUNTjwR0YD
ze+TMaigJ2CUdMBAmPe0gEGzpYf8x8wGc2KFDBp6y8f00V0wN3oBgybp+Lxd
8JjmL53FoMXnDm4ux2CheCKDjhw7ENZZAxbFDWVQo+v+xnnD5OF5XEqvQyLu
HmF+IPUbqRTtjXUfWu+kAG7qFqOIQ1djIrZSK9eJ0QP7wglz9oG5nSIx+tFr
MT/iDFhkEyRGuzeqes/OBPNuKYuR5/DHZWGGipB/SbkWeQT3Rc38Rm37pQpt
9rymf/q4MtQ7Ty9H/6oHFbaGU69TKUdXlh46uukamLH+VIZKJqyrm/4EzHt5
qQwt/KJ1W1xP80/8LkUT3SPHmC0ZBPsmPytBHS4hkyTqKpD/ZFkhOrPad455
jCrcV0hOFpIffrnh2F916P/V8BLW+HFUXUNpCMTLL0Vhw3c7Zt3VBIscFK9i
6yNWwe8mg5kd9TfwofpPY4e5Ulfm3sE/nppti80C84RL7uNvJo373RYPBWuX
PscdOpJTyXbUQ7e8wP/kS692OICFkT9fYJW6l6+DXcH88aoZePzFc8OS/cGc
21aZ2O3frEftSWBm5kIR/vj+VEvQkGFQH8fPxpesbyxaq0195142dnj09NpY
/WH0fpuzcWHUp4W5JmBOtXcOzt0y/6rSYjDXXpCL0zq754ceoR4Q/g5HGR+8
eK4JLHi0pwA7Rp1tdG0B8+clFmCNQXfmmXZSC+oLcMSPki/F8hqQP37DBxyc
Ps1KgwsW9swvxL6rvtZfcqJuH1CM1wa4zbqWBeb/SSjBUTeGK3bmgUUXRCW4
EudWrCkG84ZUlWAn+Uk+gyU0/kCxFK8Lb38i+E0d4laKN9wKmr59oib4v+Fl
mJ8VN3nGObCwZms5Fn5e133+Mpj3ya8cy5RUC75fp/lFZ8uxm93eXfEJYMG6
J+V4a4VFkt4bMN9kQAX2+PJu/IBfNN4cXYF3q341KtwwHBz1uBJ/PZQhr7oF
zBmdVYk9G8802G6nPl9WibfnTEh6fQDMndZRid2OeUx/Fgbmb53xEa9vl6GY
V2AmNfUjXlxbtcnTSAvqL12twjlLE6zjJ4CFvvFVeOELP279VLBo0bMqPP+y
dr2LJZiXVFyFrVY57lrtSONnFauxWVbRodnBYCbXqxobJOdGKTaDBa+n12DH
Wy/S81to/nrrGhx6MUkc0QnmSpfV4I6ACCMdBW1wytYanG/n9GA8F8zZcqkG
+/74nLPECcxf1FaDP0xX+BX6BswkCWux3LhOnVV51JzkWjxbr2muZjFYsOhZ
LY6V+yC4LgGLbubVYv+yS2opf2j++dZaPMZnzJgPU3Vg/klrMQ54YbNmyHWw
cP4HMTbbVNziepvGx1aIcXPfpojUeOoesRhvsPXNW/0UzDvzTYznViagSx9o
/XBVCf7TPniyLmcExActlmDfaVXyxtvA/IonEjy1zD32wC6wcEOGBDf4tqLs
/TS/QiTBa1+pBGw7Sn3/gwTPWDGvNT6a5n9pkOB2z1jJ5Hww94KOFO+L2502
a5ounF/XW4qlRSMvq88Cc7/6SfGKrvwDDVZg4eNAKTaxmzg9ahmYN/aMFNe3
fk7+tQ3Mv3xLip3nud5+GkP7peVLsXX56jAzFT2wk14dTunh7FIZBmaUDerw
yPGpS1kdMP+JcR3+c0hd6cJYMLdlch1+bPD+eCuPxlVQHR67a6Ffqh914ZY6
rCZn4Tb1M7Xkdh1O9xu4puErmHfhXh32+F5kc7MNzOEl1mFR1Y6x6pyR4NDU
Onzg4bXG73pgUfGrOlyzqdfrvj1YaFFThxOe5wRMzgTznBUZvHbKhd31b8CC
MiUGy93Z7BKTR+MrBjF4U0SntdpHMH+2GoOHbJso962V9v85jMG+GuEhyeNH
Qf7nUQxetMfxsslFsEB+OoMPXnjJ2XsVzDEwY/Dd50a7n9yicQtzMk+udYFV
CrXbTAaLosJbVuTQfrFzGDxXlLt8fydYmD+fwVM158i92KgP8UJ7BrvMFu7p
3kKduprBYS5K1bwdYNF5BwZ/ja94mHcQzF3hyOAEK2+X2nAw54kzg409kl/0
YrBw5mYGj0jX37tozGjwGE8G926NHzlsEpjzhbheffo78XSwIH4Xg1PdFxoe
RGDGeA+DbYfuKovdABap7CP3s/2FBSeSxs/7kPvUWFD/Ppr2s/Rl8IL/3p+P
vknjn4jVNeuapqaAedP9GRz3SiHG5S2Y+/Iwgyu01nBe9tD6iGMMzhCJU4Ll
DWBfIwGDhbs81juoUj8j3v360OOmEWBu1XEGy+8Ruo+YARYMDmLwjOzv73w8
adw6hMEXvEMiTT+C+aJzDP5bkPIiRAIWjT/PYLfxJXXMJzAvgthcrDs1soXO
WxfJ4ObYtZ//yHOhnr1Anofal+PrR4NF7y+T5zvn0OVThmBmTBSDOzxUEx+N
ofmBxJteTyseNInGJ0UzeIqv/+gMC7Dw6BUGF9YNeqm3mrrnGvn8DI4pXOwI
5i67zuBZc6ey3s503mXim5ccBr13AQtMYhi8d+l15wBPmr/8BoOHPpncUXuS
xnfeYvBC5pWS8mkaTyL2H7x65IxQ6mZiZrvPgrDzNH+7kMGPRr06b3WD7rvh
NoMdgldNuZFG8w3vkOe3vmVpejqNryXumhzpUZFJzxtKLCwrvTU4i+7bQvyd
66RxtIg67S6DQ15u6tzcSM87Lo7B4ogezYCvtN6BeJrbTdPoH2BOIHGlMrOz
qIPOLyE2dtoqRgMMYb53PINftex8zdUDi2ISGKyRrSK10gfzMPG26OS/67g0
X0asZv3dPHIcjY9NZPD6s/viBpjT+nvEKZuHZenPAguziTlmj+vmzKFxljiu
qn2ENwLzRyeR5z3W7yy7nOafI17SpZPQuxIsSCK+XvAiW8+BOod4wYG/PQ7r
6Pwu4nOiwH1Z7nS/jckMNtkYtPZuIJ2nmkL225+mIX+c1hsSh5xuLNoaRD2L
+PMTu2XGZ6ldiYVqWij2Cu2XTFxoZNs9IIbu9x9xz+xD6VtugblFxBu2ScwN
42i8hVjr1b0Jwid0/pT75PNT/vFzXxrNtyL2bh50xzUDzFlGXKztpW/wmsbd
iXsnC2uOZtN99hFPsSmNlr6l93WEOHTvLI2bhTR+kTj91I6inhJ6HzeJG69f
C3OpoPkJxIve9Srqi+m8TOKDUtPsI3X0fNnEsR1ux8Us7feBmGP49t/1Jnoe
CfE0i64X/77R/p+JN6+Y5Luxhfb7Rhy21cX8ZTs9bxvxy0PnWvQ6//d8iJvP
vb5/+C+d10s8Iq7ds6aHnlf+AXk/Zo6dMHeAEdQPIvYtdf58VR7MVSe+23gm
tksJLNAgLut96bpelVqbWE7rx6h0dTBHj9h0ErdmhAaYp0/sOt8h2l+L9uMS
RzgHOVaNoPVGxJl70obNHgUWjiH+erKxMNoAzB9HrHdNL6zTiMbHEy9JtVvq
PA7MTCD2yz2q+HwizZ9IHCdOzdKeQvP7Xd7GCnxNaX6/Bw7Ssq40//98MwPb
fzMt6D79/fgzD724PJfG++edW57s82sePV//Pq+2SMzWzqfx/n2/+Q1pebqQ
nq//PCMj5t8fvoTOMyBedveA58HltL7/Pvwz7o0vX0njusTxxR/rzR3ovv33
WdkwKPbi2v+/71zHMzHp62h+//NIe6McXbeRWqX/vKYhkQquNF+ROOqmUtgk
NzpPjjhY7XTw6m10vx7y/H0PKx7320HrO4nXOin4ZnnR+v7P08LsoH1N++n5
GohnmMnvGuJDzRAPVx/I3xhA+5URl+dwlrWfpvFnxNnmgoW6Z2n8PvHT233W
KIJ+Hu4RXwrsNT97ic7r//tZM7Nb3/g23WcP8YI7ASOW3qX79/89mg37p7E3
nsbXE2t871J6eZ/OW0hcerez1SGDztMhfqPh983/P2pV4seC3w03RTS/j7wf
Lmz6VducS/dpIF49vD3nRBnt/4i4+OSPq4+/0f2siUWtey5V/aT9phGnun6P
6G2j/QyIz1t+O7msi9b3kfffqvamPayCMcRfERe6fZ6vYQAWTieWycf/uWwE
ZkYRd8TteKg7DsxTJtb9+nWU4RQwV0rer+4H2jqnWYJFwcR/T/bdX+EMFhSS
9/m4e7p6Z87RuAX5fphjW1usdvF//YntmmJOn4+i8wcQ75/C/RV9A8x5T75/
Mp+NK45LpvM3Ejvkmgdnv6XzD5Lvq207flkteU/rnYj9VZ63vy+k82YT31g5
d0tZBZ3XfY+8/yp5Vuwnmn+S+K+/XPu2L9TuxINHZic2NVMvIjZztdVpbaVW
Il40YFDhwV90fiP5vl13Jz/ozx867x2x56IwyyPddN9E4v/9/zeQf4b4/wBA
jC11
       "]]},
     Annotation[#, "Charting`Private`Tag$39077#2"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-0.5818651005951258, 0.5818644992766403}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.707502783717319*^9, 3.707502793094507*^9}, {
   3.707502855404072*^9, 3.707502876885373*^9}, {3.707502909433444*^9, 
   3.70750291146299*^9}, 3.7075031508632593`*^9, 
   3.707503282044818*^9},ExpressionUUID->"9ab15774-089f-445b-aaba-\
4fd1b3895c61"]
}, Open  ]]
},
WindowSize->{840, 1001},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
FrontEndVersion->"11.2 for Mac OS X x86 (32-bit, 64-bit Kernel) (June 12, \
2017)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 160, 3, 32, "Input", ExpressionUUID -> \
"0a7ab603-74ce-420a-8cf3-0e8d7e047497"],
Cell[CellGroupData[{
Cell[743, 27, 303, 7, 32, "Input", ExpressionUUID -> \
"d420ff1b-170d-4b47-b118-1fc033dee3be"],
Cell[1049, 36, 373, 9, 32, "Output", ExpressionUUID -> \
"ff92d99e-d051-487e-a5cc-0379cff1ef5e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1459, 50, 576, 14, 32, "Input", ExpressionUUID -> \
"b144de3d-4e62-44bf-bcb4-ff91db9e3138"],
Cell[2038, 66, 783, 19, 54, "Output", ExpressionUUID -> \
"d3b52a49-f7ab-47a2-b309-1c8d70620491"]
}, Open  ]],
Cell[2836, 88, 195, 4, 32, "Input", ExpressionUUID -> \
"c3ebc529-7798-46fb-8a51-b9ee12011e67"],
Cell[CellGroupData[{
Cell[3056, 96, 429, 12, 32, "Input", ExpressionUUID -> \
"1c526708-94f5-49a5-82ca-40da6a6454e1"],
Cell[3488, 110, 90520, 1491, 199, "Output", ExpressionUUID -> \
"f78a8060-5207-472d-8585-51320b7cf528"]
}, Open  ]],
Cell[CellGroupData[{
Cell[94045, 1606, 720, 16, 54, "Input", ExpressionUUID -> \
"2d2f2250-2984-40dc-9c2e-2811865ea22f"],
Cell[94768, 1624, 12138, 259, 135, "Output", ExpressionUUID -> \
"a8e01361-2595-47ca-ac74-bf454c58aa12"]
}, Open  ]],
Cell[CellGroupData[{
Cell[106943, 1888, 348, 10, 32, "Input", ExpressionUUID -> \
"6a0de1b7-874f-4ab6-8b9d-e3431c80d146"],
Cell[107294, 1900, 20261, 350, 238, "Output", ExpressionUUID -> \
"ce1fff2a-c56e-4c72-a06c-7de38f77c039"]
}, Open  ]],
Cell[127570, 2253, 991, 32, 54, "Input", ExpressionUUID -> \
"c4e07b6f-1619-4e4b-8eab-4fe9defd26a6"],
Cell[CellGroupData[{
Cell[128586, 2289, 479, 9, 32, "Input", ExpressionUUID -> \
"b197d8c6-2fc6-44d2-9570-133c9b346a0c"],
Cell[129068, 2300, 19641, 419, 181, "Output", ExpressionUUID -> \
"1704ab28-4934-4f0b-a1d3-53a6783d8df5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[148746, 2724, 490, 14, 32, "Input", ExpressionUUID -> \
"7663e62f-77fe-4161-9039-95e90f35ea8e"],
Cell[149239, 2740, 30173, 515, 238, "Output", ExpressionUUID -> \
"71ed944d-b7d7-400b-8dff-7488dfb0c4db"]
}, Open  ]],
Cell[CellGroupData[{
Cell[179449, 3260, 372, 11, 32, "Input", ExpressionUUID -> \
"f2862495-fa63-4a5f-8612-80fff30440b4"],
Cell[179824, 3273, 30996, 529, 272, "Output", ExpressionUUID -> \
"a31b43c9-92ea-477a-8346-a80ca1f66e6b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[210857, 3807, 770, 17, 54, "Input", ExpressionUUID -> \
"8948a02f-d48f-4c75-9c2a-a255cb6e3556"],
Cell[211630, 3826, 12180, 260, 135, "Output", ExpressionUUID -> \
"afc06ecb-1907-4177-919f-e6c508611922"]
}, Open  ]],
Cell[CellGroupData[{
Cell[223847, 4091, 483, 14, 32, "Input", ExpressionUUID -> \
"c3e85acc-3f8f-42e0-8ca9-d9c6fb7fb093"],
Cell[224333, 4107, 36024, 611, 238, "Output", ExpressionUUID -> \
"c61a5d57-d501-4164-978b-b9e456ed948b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[260394, 4723, 454, 9, 32, "Input", ExpressionUUID -> \
"148136ec-2f39-404c-95f1-7cc3c821963a"],
Cell[260851, 4734, 11739, 251, 121, "Output", ExpressionUUID -> \
"363d09ef-5bfd-4556-b644-cd3641a88f1d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[272627, 4990, 490, 14, 32, "Input", ExpressionUUID -> \
"39429816-9165-4937-a09e-1d7597823390"],
Cell[273120, 5006, 31658, 539, 238, "Output", ExpressionUUID -> \
"c98803f2-6b3e-4b7d-8b97-ca155feee5ef"]
}, Open  ]],
Cell[CellGroupData[{
Cell[304815, 5550, 949, 19, 54, "Input", ExpressionUUID -> \
"b5c3ba0e-c2b7-4e05-be4f-d830341f5959"],
Cell[305767, 5571, 20272, 432, 195, "Output", ExpressionUUID -> \
"d9bc93b8-629b-43b1-bcc2-27d8f866960b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[326076, 6008, 454, 9, 32, "Input", ExpressionUUID -> \
"d0a29ce2-f619-4e88-a2b6-f3e3649581d8"],
Cell[326533, 6019, 19669, 420, 181, "Output", ExpressionUUID -> \
"7d620feb-5afc-41a5-b6f6-b9befdf2e3e7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[346239, 6444, 490, 14, 32, "Input", ExpressionUUID -> \
"fd0ff166-a6b8-4bcd-8fc2-60fd9822b736"],
Cell[346732, 6460, 33275, 566, 272, "Output", ExpressionUUID -> \
"9ab15774-089f-445b-aaba-4fd1b3895c61"]
}, Open  ]]
}
]
*)

(* End of internal cache information *)

